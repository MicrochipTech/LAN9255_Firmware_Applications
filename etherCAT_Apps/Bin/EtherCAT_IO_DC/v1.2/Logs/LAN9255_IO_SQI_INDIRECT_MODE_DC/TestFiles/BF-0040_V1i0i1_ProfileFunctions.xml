<?xml version="1.0" encoding="UTF-8" standalone="yes"?><EtherCATTest Name="EtherCAT Profile Base Functions" SchemaVersion="1.0.31" xsi:noNamespaceSchemaLocation="EtherCATTest.xsd" RealeaseState="Released" TestId="64" TestVendorId="1" TestVersion="1.0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<Comment>This file includes test functions for EtherCAT profile tests.</Comment>
	<History>
		<HistoryEntry Editor="R.H." TestVersion="0.0.1" Date="2013-06-27">file created</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.2" Date="2013-01-15">Check not defined object and entry ranges</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.6" Date="2014-07-21">update string format, enhancements due to handling of the CTT2.x</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.7" Date="2014-08-06">Skip also SI0 comparison if the object description compare is skipped
Change category handling ("c" is handled optional by default), function to evaluate the condition is still missing (a warning is written to the logger)</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.8" Date="2014-08-13">VerifyObjectDescription:
- remove parameter "MaxSubIndex"</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.9" Date="2014-09-05">Remove obsolete Test functions:
- VerifyDeviceObject
- VerifyModules
- VerifyObjectRange
- VerifyObject</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.10" Date="2015-10-12">Add function:
- Get CurrentProfileList
- GetDeviceProfile
- GetModuleProfile
- GetSubModuleProfile</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.11" Date="2015-10-15">Add function:
- DeviceProfileSupported</HistoryEntry>
		<HistoryEntry Editor="B.L." TestVersion="0.0.12" Date="2016-02-17" Id="EN_BF_0040_160217" Type="Enhancement">Update to Schema version 1.0.24</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.13" Date="2016-09-28" Id="EN_BF_0040_160928" Type="Enhancement">GetOnlineProfile: in case that the module profile is define in 0x1000 (bit16-31) do not evaluate the 0xF01x entries. just get the number of modules (0xF01x.0)</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.14" Date="2016-09-30" Id="EN_BF_0040_160930" Type="Enhancement">DeviceProfileSupported: Handle not defined profile elements</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.15" Date="2016-12-05" Id="">Changed return type of CheckReservedEntryRange and CheckReservedObjectRange (the errors will be written to logger directly and only the error indication will be returned)</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.16" Date="2017-06-06" Id="">Handle Module Profile Information in GetOfflineProfiles</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.17" Date="2017-12-08" Id="">GetOnlineProfiles : Raise Error in case that the target state can not be reached</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.19" Date="2018-08-28" Id="">GetOfflineProfiles : combine device profile and module profile information</HistoryEntry>
		<HistoryEntry Editor="B.L." TestVersion="0.0.20" Date="2018-09-14" Id="">Add output IDs and update Schema version to 1.0.31</HistoryEntry>
		<HistoryEntry Editor="F.L." TestVersion="0.0.21" Date="2018-11-12">TestFunction 202, WriteLine 15: Changed Param2 to Param1.</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="0.0.22" Date="2019-01-18">DeviceAndModuleProfileDefined: change abort condition for module profile compare</HistoryEntry>
		<HistoryEntry Editor="F.E." TestVersion="0.0.23" Date="2019-05-02">Set version to 1.0.0</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="1.0.1" Date="2019-05-14">Get online profiles add missing variable</HistoryEntry>
	</History>
	<TestFunctions>
		<TestFunction FunctionId="101" Name="CheckReservedEntryRange">
			<?MAX_OUTPUT_ID 2?>
			<!--Editor: RH-->
			<Description>
				<Action>Check if a specififed entry range is not used</Action>
				<References>
					<Reference></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>CheckReservedEntryRange.uint16ObjectIndex</Name>
				<Type>UInt16</Type>
				<!---->
			</Parameter>
			<Parameter>
				<Name>CheckReservedEntryRange.int16FirstReservedEntry</Name>
				<Type>Int16</Type>
				<!--First Reserved entry-->
			</Parameter>
			<Parameter>
				<Name>CheckReservedEntryRange.int16NextDefinedEntry</Name>
				<Type>Int16</Type>
				<!--Next defined entry (if -1 also the last entry shall be reserved)-->
			</Parameter>
			<Parameter>
				<Name>CheckReservedEntryRange.odObjectDictToCheck</Name>
				<Type>ObjectDictionary</Type>
			</Parameter>
			<LocalVariables>
				<Name>CheckReservedEntryRange.int16Counter</Name>
				<Type>Int16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CheckReservedEntryRange.int16LastReservedEntry</Name>
				<Type>Int16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CheckReservedEntryRange.uint16Type</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CheckReservedEntryRange.strErrorText</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>CheckReservedEntryRange.bError</Name>
				<Type>Bool</Type>
			</OutParameter>
			<TestStep Name="InitResult">
				<SetVariable Target="CheckReservedEntryRange.bError">false</SetVariable>
			</TestStep>
			<TestStep Name="DEBUG_DumpParamter">
				<Compare>
					<Equal>
						<Value1>bDEBUG</Value1>
						<Value2>true</Value2>
						<WriteLine Id="0" Param0="CheckReservedEntryRange.uint16ObjectIndex" Param1="CheckReservedEntryRange.int16FirstReservedEntry" Param2="CheckReservedEntryRange.int16NextDefinedEntry" Level="Verbose">DEBUG | CheckReservedEntryRange (ObjectIndex 0x{0:X} ; first reserved entry {1} ; next defined entry {2})</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetLastReservedEntry">
				<Compare>
					<Lower>
						<Value1>CheckReservedEntryRange.int16NextDefinedEntry</Value1>
						<Value2>0</Value2>
						<SetVariable Target="CheckReservedEntryRange.int16LastReservedEntry">255</SetVariable>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>CheckReservedEntryRange.int16NextDefinedEntry</Value1>
						<Value2>0</Value2>
						<SetVariable Target="CheckReservedEntryRange.int16LastReservedEntry">CheckReservedEntryRange.int16NextDefinedEntry - 1</SetVariable>
					</Greater>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CheckReservedEntryRange.int16NextDefinedEntry</Value1>
						<Value2>0</Value2>
						<SetVariable Target="CheckReservedEntryRange.int16LastReservedEntry">0</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="InitEntryCounter">
				<SetVariable Target="CheckReservedEntryRange.int16Counter">CheckReservedEntryRange.int16FirstReservedEntry</SetVariable>
			</TestStep>
			<TestStep Name="EntryLoopStart">
				<Compare>
					<Greater>
						<Value1>CheckReservedEntryRange.int16Counter</Value1>
						<Value2>CheckReservedEntryRange.int16LastReservedEntry</Value2>
						<Return Id="1"></Return>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep Name="GetEntryDescr">
				<GetObjectDescription SourceDictionary="CheckReservedEntryRange.odObjectDictToCheck" Index="CheckReservedEntryRange.uint16ObjectIndex" SubIndex="CheckReservedEntryRange.int16Counter" SDOInfoReload="false">
					<Type>CheckReservedEntryRange.uint16Type</Type>
				</GetObjectDescription>
				<GotoOnFailure>EntryLoopEnd</GotoOnFailure>
			</TestStep>
			<TestStep Name="CheckDataType">
				<!--Type equal 0 (padding entry) is also allowed in the reserved range.-->
				<Compare>
					<Equal>
						<Value1>CheckReservedEntryRange.uint16Type</Value1>
						<Value2>0</Value2>
						<GotoStep>EntryLoopEnd</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="HandleDefinedReservedEntry">
				<SetVariable Param0="CheckReservedEntryRange.uint16ObjectIndex" Param1="CheckReservedEntryRange.int16Counter" Target="CheckReservedEntryRange.strErrorText">Reserved entry 0x{0:X4}.{1} is defined.</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="CheckReservedEntryRange.bError">true</SetVariable>
				<WriteLine Id="2" Level="Error" Param0="CheckReservedEntryRange.strErrorText">{0}</WriteLine>
			</TestStep>
			<TestStep Name="EntryLoopEnd">
				<SetVariable Target="CheckReservedEntryRange.int16Counter">CheckReservedEntryRange.int16Counter + 1</SetVariable>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>EntryLoopStart</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="102" Name="CheckReservedObjectRange">
			<?MAX_OUTPUT_ID 2?>
			<!--Editor: RH-->
			<Description>
				<Action>Check if a specififed entry range is not used</Action>
				<References>
					<Reference></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>CheckReservedObjectRange.uint16FirstReservedObject</Name>
				<Type>UInt16</Type>
				<!--First reserved object-->
			</Parameter>
			<Parameter>
				<Name>CheckReservedObjectRange.uint16NextDefinedObject</Name>
				<Type>UInt16</Type>
				<!--Next defined object-->
			</Parameter>
			<Parameter>
				<Name>CheckReservedObjectRange.odObjectDictToCheck</Name>
				<Type>ObjectDictionary</Type>
			</Parameter>
			<LocalVariables>
				<Name>CheckReservedObjectRange.strErrorText</Name>
				<Type>String</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CheckReservedObjectRange.uint16Counter</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CheckReservedObjectRange.uint16LastReservedObject</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<OutParameter>
				<Name>CheckReservedObjectRange.bError</Name>
				<Type>Bool</Type>
			</OutParameter>
			<TestStep Name="InitResult">
				<SetVariable Target="CheckReservedObjectRange.bError">false</SetVariable>
			</TestStep>
			<TestStep Name="DEBUG_DumpParamter">
				<Compare>
					<Equal>
						<Value1>bDEBUG</Value1>
						<Value2>true</Value2>
						<WriteLine Id="0" Param0="CheckReservedObjectRange.uint16FirstReservedObject" Param1="CheckReservedObjectRange.uint16NextDefinedObject" Level="Verbose">DEBUG | CheckReservedObjectRange (First reserved object 0x{0:X4} ; next defined object 0x{1:X4})</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetLastReservedObject">
				<SetVariable Target="CheckReservedObjectRange.uint16LastReservedObject">CheckReservedObjectRange.uint16NextDefinedObject - 1</SetVariable>
			</TestStep>
			<TestStep Name="InitObjectCounter">
				<SetVariable Target="CheckReservedObjectRange.uint16Counter">CheckReservedObjectRange.uint16FirstReservedObject</SetVariable>
			</TestStep>
			<TestStep Name="ObjectLoopStart">
				<Compare>
					<Greater>
						<Value1>CheckReservedObjectRange.uint16Counter</Value1>
						<Value2>CheckReservedObjectRange.uint16LastReservedObject</Value2>
						<Return Id="1"></Return>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep Name="GetObjectDescr">
				<GetObjectDescription SourceDictionary="CheckReservedObjectRange.odObjectDictToCheck" Index="CheckReservedObjectRange.uint16Counter" SubIndex="-1" SDOInfoReload="false"></GetObjectDescription>
				<GotoOnFailure>EntryLoopEnd</GotoOnFailure>
			</TestStep>
			<TestStep Name="HandleDefinedReservedEntry">
				<SetVariable Param0="CheckReservedObjectRange.uint16Counter" Target="CheckReservedObjectRange.strErrorText">Reserved object 0x{0:X4} is defined.</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="CheckReservedObjectRange.bError">true</SetVariable>
				<WriteLine Id="2" Level="Error" Param0="CheckReservedObjectRange.strErrorText">{0}</WriteLine>
			</TestStep>
			<TestStep Name="EntryLoopEnd">
				<SetVariable Target="CheckReservedObjectRange.uint16Counter">CheckReservedObjectRange.uint16Counter + 1</SetVariable>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>ObjectLoopStart</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="201" Name="GetOfflineProfiles">
			<?MAX_OUTPUT_ID 18?>
			<!--Editor: RH-->
			<Description>
				<Purpose>Get a flat list of all Profiles defined in the device description</Purpose>
				<PreCondition></PreCondition>
				<Action>- Iterate of all Profile Elements
-- Iterate over all ChannelCount
-- Iterate over all ChannelInfo (only if no ProfileNo is defined in the parent element defined)</Action>
				<PostCondition>Retrun a string array contains all profile info (string format "[DeviceProfile]_[ModuleProfile]_[SubModule]")</PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<LocalVariables>
				<Name>GetOfflineProfiles.strProfileItem</Name>
				<Type>String</Type>
				<!--string describe a profile ("[DeviceProfile]_[ModuleProfile]_[SubModule]")-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.uint16CurDeviceProfile</Name>
				<Type>Int32</Type>
				<!--Device Profile-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.uint16CurModuleDeviceProfile</Name>
				<Type>Int32</Type>
				<!--Device Profile-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.uint16CurModuleProfile</Name>
				<Type>UInt16</Type>
				<!--ModuleProfile (if AddInfo not defined value is set to 0)-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.uint32AssignedModulesCount</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.int32ModuleAddInfo</Name>
				<Type>Int32</Type>
				<!--AddInfo in the module (if AddInfo not defined value is set to 0)-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.uint16CurSubModuleProfile</Name>
				<Type>UInt16</Type>
				<!--SubModule Profile-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.uint32ProfileChannelCounter</Name>
				<Type>UInt32</Type>
				<!--Counter over channels within the current profile element-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOfflineProfiles.uint32ProfileCounter</Name>
				<Type>UInt32</Type>
				<!--Counter over all profile elements of a device-->
			</LocalVariables>
			<OutParameter>
				<Name>GetOfflineProfiles.arrProfiles</Name>
				<Type>ArrayOfString</Type>
			</OutParameter>
			<TestStep Name="InitArray">
				<InitArray TargetArray="GetOfflineProfiles.arrProfiles" Length="0"></InitArray>
			</TestStep>
			<TestStep Name="CheckIfProfileElementsAreDefined">
				<Description Id="0" Param0="DeviceDescr.Profile.Count" Level="Verbose">GetOfflineProfiles : {0} Profile elements defined.</Description>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile.Count</Value1>
						<Value2>0</Value2>
						<GotoStep>CheckIfModulesAreAssigned</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="InitProfileLoopCounter">
				<SetVariable Target="GetOfflineProfiles.uint32ProfileCounter">0</SetVariable>
			</TestStep>
			<TestStep Name="InitChannelLoopCounter">
				<SetVariable Target="GetOfflineProfiles.uint32ProfileChannelCounter">0</SetVariable>
			</TestStep>
			<TestStep Name="ProfileLoopStart">
				<!--Reset Channel Counter-->
				<SetVariable Target="GetOfflineProfiles.uint32ProfileChannelCounter">0</SetVariable>
				<!--Stop profile loop if all profile elements were iterated-->
				<Compare>
					<LowerOrEqual>
						<Value1>DeviceDescr.Profile.Count</Value1>
						<Value2>GetOfflineProfiles.uint32ProfileCounter</Value2>
						<GotoStep>ProfileLoopEnd</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetDeviceProfile">
				<!--GoTo "HandleChannelInfo" if no ProfileNo defined or 0-->
				<SetVariable Target="GetOfflineProfiles.uint16CurDeviceProfile">DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ProfileNo</SetVariable>
				<WriteLine Id="1" Param0="GetOfflineProfiles.uint32ProfileCounter" Level="Verbose" Param1="GetOfflineProfiles.uint16CurDeviceProfile">DeviceDescr.Profile[{0}].ProfileNo '{1}'.</WriteLine>
			</TestStep>
			<TestStep Name="GetModuleProfile">
				<!--if AddInfo is null the ModuleProfile is set to 0.-->
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].AddInfo</Value1>
						<Value2>null</Value2>
						<SetVariable Target="GetOfflineProfiles.uint16CurModuleProfile">0</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].AddInfo</Value1>
						<Value2>null</Value2>
						<SetVariable Target="GetOfflineProfiles.uint16CurModuleProfile">DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].AddInfo</SetVariable>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].AddInfo</Value1>
						<Value2>null</Value2>
						<WriteLine Id="2" Param0="GetOfflineProfiles.uint32ProfileCounter" Level="Verbose" Param1="GetOfflineProfiles.uint16CurModuleProfile">DeviceDescr.Profile[{0}].AddInfo '{1}'</WriteLine>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetSubModuleProfile">
				<SetVariable Target="GetOfflineProfiles.uint16CurSubModuleProfile">0</SetVariable>
				<WriteLine Id="3" Level="Verbose">SubModule is set to 0</WriteLine>
				<!--TODO : parse SubModule Element when the element is defined and parsed by the CTT-->
			</TestStep>
			<TestStep>
				<Compare>
					<NotEqual>
						<Value1>GetOfflineProfiles.uint16CurDeviceProfile</Value1>
						<Value2>0</Value2>
						<GotoStep>AddFirstProfile</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOfflineProfiles.uint16CurModuleProfile</Value1>
						<Value2>0</Value2>
						<GotoStep>AddFirstProfile</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOfflineProfiles.uint16CurSubModuleProfile</Value1>
						<Value2>0</Value2>
						<GotoStep>AddFirstProfile</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetOfflineProfiles.uint32ProfileChannelCounter">0</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>HandleChannelCountValue</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="AddFirstProfile">
				<!--Laut HBu(2018-08-28) Module/Channels werden "summiert"
In case of defined Modules to not add device elements based profile information to the profile list
<Compare>
	<Greater>
		<Value1>CurrentConfig.SlotCount</Value1>
		<Value2>0</Value2>
		<GotoStep>CheckIfModulesAreAssigned</GotoStep>
	</Greater>
</Compare>-->
				<!--in case that no module profile is defined but slots are defined skip device profile infos-->
				<Compare>
					<Equal>
						<Value1>(CurrentConfig.SlotCount &gt; 0) AND (GetOfflineProfiles.uint16CurModuleProfile == 0)</Value1>
						<Value2>true</Value2>
						<WriteLine Id="4" Level="Verbose" Param0="GetOfflineProfiles.uint16CurDeviceProfile" Param1="GetOfflineProfiles.uint16CurModuleProfile" Param2="GetOfflineProfiles.uint16CurSubModuleProfile">GetOfflineProfiles : Skip device element profile information ({0}_{1}_{2}) because slots are supported and no module profile is defined in the device.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>(CurrentConfig.SlotCount &gt; 0) AND (GetOfflineProfiles.uint16CurModuleProfile == 0)</Value1>
						<Value2>true</Value2>
						<GotoStep>HandleChannelInfo</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetOfflineProfiles.strProfileItem" Param0="GetOfflineProfiles.uint16CurDeviceProfile" Param1="GetOfflineProfiles.uint16CurModuleProfile" Param2="GetOfflineProfiles.uint16CurSubModuleProfile">{0}_{1}_{2}</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<Description Id="5" Level="Verbose" Param0="GetOfflineProfiles.strProfileItem">GetOfflineProfiles | Add Info '{0}'</Description>
				<AddArrayItem TargetArray="GetOfflineProfiles.arrProfiles">GetOfflineProfiles.strProfileItem</AddArrayItem>
				<!--First element already added : decrement channelloop counter-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetOfflineProfiles.uint32ProfileChannelCounter">1</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="HandleChannelCountValue">
				<!--Goto "ProfileLoopEnd" if ChannelCount not defined-->
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelCount</Value1>
						<Value2>null</Value2>
						<GotoStep>HandleChannelInfo</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ChannelCntLoopStart">
				<!--Check if loop finished-->
				<Compare>
					<GreaterOrEqual>
						<Value1>GetOfflineProfiles.uint32ProfileChannelCounter</Value1>
						<Value2>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelCount</Value2>
						<GotoStep>ProfileLoopEnd</GotoStep>
					</GreaterOrEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<Description Id="6" Level="Verbose" Param0="GetOfflineProfiles.strProfileItem">GetOfflineProfiles | Add Info '{0}'</Description>
				<AddArrayItem TargetArray="GetOfflineProfiles.arrProfiles">GetOfflineProfiles.strProfileItem</AddArrayItem>
			</TestStep>
			<TestStep Name="ChannelCntLoopEnd">
				<SetVariable Target="GetOfflineProfiles.uint32ProfileChannelCounter">GetOfflineProfiles.uint32ProfileChannelCounter + 1</SetVariable>
				<Compare>
					<Lower>
						<Value1>GetOfflineProfiles.uint32ProfileChannelCounter</Value1>
						<Value2>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelCount</Value2>
						<GotoStep>ChannelCntLoopStart</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="HandleChannelInfo">
				<SetVariable Target="GetOfflineProfiles.uint32ProfileChannelCounter">0</SetVariable>
			</TestStep>
			<TestStep Name="ChannelInfoLoopStart">
				<Description Id="7" Level="Verbose" Param0="DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelInfo.Count" Param1="GetOfflineProfiles.uint32ProfileCounter">DeviceDescr.Profile[{1}].ChannelInfo.Count = '{0}'</Description>
				<Compare>
					<LowerOrEqual>
						<Value1>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelInfo.Count</Value1>
						<Value2>GetOfflineProfiles.uint32ProfileChannelCounter</Value2>
						<GotoStep>ProfileLoopEnd</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetChannelInfo_DeviceProfile">
				<SetVariable Target="GetOfflineProfiles.uint16CurDeviceProfile">DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelInfo[GetOfflineProfiles.uint32ProfileChannelCounter].ProfileNo</SetVariable>
				<WriteLine Id="8" Param0="GetOfflineProfiles.uint32ProfileCounter" Level="Verbose" Param1="GetOfflineProfiles.uint32ProfileChannelCounter" Param2="GetOfflineProfiles.uint16CurDeviceProfile">DeviceDescr.Profile[{0}].ChannelInfo[{1}].ProfileNo '{2}'.</WriteLine>
			</TestStep>
			<TestStep Name="GetChannelInfo_ModuleProfile">
				<!--if AddInfo is null the SubProfile is set to 0.-->
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelInfo[GetOfflineProfiles.uint32ProfileChannelCounter].AddInfo</Value1>
						<Value2>null</Value2>
						<SetVariable Target="GetOfflineProfiles.uint16CurModuleProfile">0</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelInfo[GetOfflineProfiles.uint32ProfileChannelCounter].AddInfo</Value1>
						<Value2>null</Value2>
						<SetVariable Target="GetOfflineProfiles.uint16CurModuleProfile">DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelInfo[GetOfflineProfiles.uint32ProfileChannelCounter].AddInfo</SetVariable>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="9" Param0="GetOfflineProfiles.uint32ProfileCounter" Level="Verbose" Param1="GetOfflineProfiles.uint32ProfileChannelCounter" Param2="GetOfflineProfiles.uint16CurModuleProfile">DeviceDescr.Profile[{0}].ChannelInfo[{1}].AddInfo '{2}'.</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetChannelInfo_SubModuleProfile">
				<SetVariable Target="GetOfflineProfiles.uint16CurSubModuleProfile">0</SetVariable>
				<WriteLine Id="10" Level="Verbose">SubModule is set to 0</WriteLine>
				<!--TODO : parse SubModule Element when the element is defined and parsed by the CTT-->
			</TestStep>
			<TestStep Name="AddChannelInfoProfile">
				<!--In case of defined Modules to not add device elements based profile information to the profile list-->
				<Compare>
					<Greater>
						<Value1>CurrentConfig.SlotCount</Value1>
						<Value2>0</Value2>
						<GotoStep>CheckIfModulesAreAssigned</GotoStep>
					</Greater>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetOfflineProfiles.strProfileItem" Param0="GetOfflineProfiles.uint16CurDeviceProfile" Param1="GetOfflineProfiles.uint16CurModuleProfile" Param2="GetOfflineProfiles.uint16CurSubModuleProfile">{0}_{1}_{2}</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<Description Id="11" Level="Verbose" Param0="GetOfflineProfiles.strProfileItem">GetOfflineProfiles | Add Info '{0}'</Description>
				<AddArrayItem TargetArray="GetOfflineProfiles.arrProfiles">GetOfflineProfiles.strProfileItem</AddArrayItem>
			</TestStep>
			<TestStep Name="ChannelInfoLoopEnd">
				<SetVariable Target="GetOfflineProfiles.uint32ProfileChannelCounter">GetOfflineProfiles.uint32ProfileChannelCounter + 1</SetVariable>
				<Compare>
					<Lower>
						<Value1>GetOfflineProfiles.uint32ProfileChannelCounter</Value1>
						<Value2>DeviceDescr.Profile[GetOfflineProfiles.uint32ProfileCounter].ChannelInfo.Count</Value2>
						<GotoStep>ChannelInfoLoopStart</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="ProfileLoopEnd">
				<SetVariable Target="GetOfflineProfiles.uint32ProfileCounter">GetOfflineProfiles.uint32ProfileCounter + 1</SetVariable>
				<Compare>
					<Greater>
						<Value1>DeviceDescr.Profile.Count</Value1>
						<Value2>GetOfflineProfiles.uint32ProfileCounter</Value2>
						<GotoStep>ProfileLoopStart</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep Name="CheckIfModulesAreAssigned">
				<Description Id="12" Param0="CurrentConfig.SlotCount" Level="Verbose">GetOfflineProfiles : {0} Slots(s) supported</Description>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetOfflineProfiles.uint32ProfileCounter">0</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CurrentConfig.SlotCount</Value1>
						<Value2>0</Value2>
						<GotoStep>END</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="GetOfflineProfiles.uint32AssignedModulesCount">CurrentConfig.MdlIds</SizeOf>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="13" Param0="GetOfflineProfiles.uint32AssignedModulesCount" Level="Verbose">GetOfflineProfiles : {0} Module(s) assigned.</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ModuleProfileLoopStart">
				<!--Reset Channel Counter-->
				<!--Stop profile loop if all profile elements were iterated-->
				<Compare>
					<LowerOrEqual>
						<Value1>GetOfflineProfiles.uint32AssignedModulesCount</Value1>
						<Value2>GetOfflineProfiles.uint32ProfileCounter</Value2>
						<GotoStep>END</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetModuleDeviceProfile">
				<GetArrayItem SourceArray="CurrentConfig.MdlProfileNoList" Target="GetOfflineProfiles.uint16CurModuleDeviceProfile" Index="GetOfflineProfiles.uint32ProfileCounter"></GetArrayItem>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="14" Param0="GetOfflineProfiles.uint32ProfileCounter" Level="Verbose" Param1="GetOfflineProfiles.uint16CurModuleDeviceProfile">Module[{0}].ProfileNo '{1}'.</WriteLine>
					</Equal>
				</Compare>
				<!--If no ProdileNo defined in the Module use the ProfileNo defined in the device-->
				<Compare>
					<Equal>
						<Value1>GetOfflineProfiles.uint16CurModuleDeviceProfile</Value1>
						<Value2>0</Value2>
						<SetVariable Target="GetOfflineProfiles.uint16CurModuleDeviceProfile">GetOfflineProfiles.uint16CurDeviceProfile</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetModuleAddInfoProfile">
				<GetArrayItem SourceArray="CurrentConfig.MdlAddInfoList" Target="GetOfflineProfiles.int32ModuleAddInfo" Index="GetOfflineProfiles.uint32ProfileCounter"></GetArrayItem>
				<WriteLine Id="15" Param0="GetOfflineProfiles.uint32ProfileCounter" Level="Verbose" Param1="GetOfflineProfiles.int32ModuleAddInfo">Module[{0}].AddInfo '{1}'</WriteLine>
			</TestStep>
			<TestStep Name="GetModuleSubModuleProfile">
				<SetVariable Target="GetOfflineProfiles.uint16CurSubModuleProfile">0</SetVariable>
				<WriteLine Id="16" Level="Verbose">SubModule is set to 0</WriteLine>
				<!--TODO : parse SubModule Element when the element is defined and parsed by the CTT-->
			</TestStep>
			<TestStep Name="AddProfileDefinedInTheAssignedModule">
				<SetVariable Target="GetOfflineProfiles.strProfileItem" Param0="GetOfflineProfiles.uint16CurModuleDeviceProfile" Param1="GetOfflineProfiles.int32ModuleAddInfo" Param2="GetOfflineProfiles.uint16CurSubModuleProfile">{0}_{1}_{2}</SetVariable>
			</TestStep>
			<TestStep>
				<Description Id="17" Level="Verbose" Param0="GetOfflineProfiles.strProfileItem">GetOfflineProfiles | Add Info '{0}'</Description>
				<AddArrayItem TargetArray="GetOfflineProfiles.arrProfiles">GetOfflineProfiles.strProfileItem</AddArrayItem>
			</TestStep>
			<TestStep Name="ModuleProfileLoopEnd">
				<SetVariable Target="GetOfflineProfiles.uint32ProfileCounter">GetOfflineProfiles.uint32ProfileCounter + 1</SetVariable>
				<Compare>
					<Greater>
						<Value1>GetOfflineProfiles.uint32AssignedModulesCount</Value1>
						<Value2>GetOfflineProfiles.uint32ProfileCounter</Value2>
						<GotoStep>ModuleProfileLoopStart</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep Name="END">
				<Compare>
					<Equal>
						<Value1>bDEBUG</Value1>
						<Value2>true</Value2>
						<WriteLine Id="18" Level="Verbose" Param0="GetOfflineProfiles.arrProfiles">DEBUG | GetOfflineProfiles finished (Profiles : '{0}').</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="202" Name="GetOnlineProfiles">
			<?MAX_OUTPUT_ID 27?>
			<!--Editor: RH-->
			<Description>
				<Purpose>Get a flat list of all Profiles defined in the slave application</Purpose>
				<PreCondition></PreCondition>
				<Action>- Get Value of 0x1000
- Get Entries of 0xF010 to 0xF01F</Action>
				<PostCondition>Retrun a string array contains all profile info (string format "[DeviceProfile]_[ModuleProfile]_[SubModule]")</PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>GetOnlineProfiles.strTargetState</Name>
				<Type>String</Type>
				<!--State in which the objects shall be read out-->
			</Parameter>
			<LocalVariables>
				<Name>GetOnlineProfiles.F01xEntryLoopCounter</Name>
				<Type>UInt16</Type>
				<!--Loop counter over all F01x entries-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.ModuleProfileObjectIndex</Name>
				<Type>UInt16</Type>
				<!--Index of the current Module Profile Object-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.ModuleProfileObjectMaxSubIndex</Name>
				<Type>Byte</Type>
				<!--Max Subindex of the current Module Profile Object-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.SdoAbortCode</Name>
				<Type>UInt32</Type>
				<!--Abortcode of the SDO access-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.tmpDataArray</Name>
				<Type>ArrayOfBytes</Type>
				<!--tmpArray to read object data-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.tmpDataArrayLength</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.strCurProfileInfo</Name>
				<Type>String</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.strObj1000ProfileStr</Name>
				<Type>String</Type>
				<!--profile info based on obj 0x1000-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.uint16CurrentModuleProfile</Name>
				<Type>UInt16</Type>
				<!--Module profile-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.uint16ModuleProfile0x1000</Name>
				<Type>UInt16</Type>
				<!--Module profile according 0x1000-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.uint16CurrentSubModuleProfile</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.uint16DeviceProfile</Name>
				<Type>UInt16</Type>
				<!--Low word of 0x1000-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.uint32ObjectProfileValue</Name>
				<Type>UInt32</Type>
				<!--Value of Object 0x1000 or 0xF01x-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.strResult</Name>
				<Type>String</Type>
				<DefaultValue>EmptyString</DefaultValue>
				<!--uploadFailureText-->
			</LocalVariables>
			<LocalVariables>
				<Name>GetOnlineProfiles.AbortMessage</Name>
				<Type>String</Type>
				<DefaultValue>EmptyString</DefaultValue>
				<!--mailbox error message-->
			</LocalVariables>
			<OutParameter>
				<Name>GetOnlineProfiles.arrProfiles</Name>
				<Type>ArrayOfString</Type>
			</OutParameter>
			<TestStep Name="DEBUG_DumpParamter">
				<Compare>
					<Equal>
						<Value1>bDEBUG</Value1>
						<Value2>true</Value2>
						<WriteLine Id="0" Level="Verbose" Param0="GetOnlineProfiles.strTargetState">DEBUG | GetOnlineProfiles(TargetState '{0}')</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ResetDevice">
				<CallTestFunction Name="Reset"></CallTestFunction>
			</TestStep>
			<TestStep Name="InitResult">
				<InitArray TargetArray="GetOnlineProfiles.arrProfiles" Length="0"></InitArray>
			</TestStep>
			<TestStep Name="CheckIfCoESupported">
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Mailbox</Value1>
						<Value2>false</Value2>
						<WriteLine Id="1" Level="Verbose">Device doesn't support mailbox communication.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Mailbox</Value1>
						<Value2>false</Value2>
						<GotoStep>END_Dump</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Mailbox.CoE</Value1>
						<Value2>false</Value2>
						<WriteLine Id="2" Level="Verbose">SKIP TEST : Device doesn't support CoE mailbox protocol.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Mailbox.CoE</Value1>
						<Value2>false</Value2>
						<GotoStep>END_Dump</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="InitModuleProfileObjectIndex">
				<SetVariable Target="GetOnlineProfiles.ModuleProfileObjectIndex">#xF010</SetVariable>
			</TestStep>
			<TestStep Name="HandleRequestedState">
				<Compare>
					<Equal>
						<Value1>GetOnlineProfiles.strTargetState</Value1>
						<Value2>"OP"</Value2>
						<GotoStep>RunToOP</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>GetOnlineProfiles.strTargetState</Value1>
						<Value2>"SafeOP"</Value2>
						<GotoStep>RunToSafeOP</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>GetOnlineProfiles.strTargetState</Value1>
						<Value2>"PreOP"</Value2>
						<GotoStep>RunToPreOP</GotoStep>
					</Equal>
				</Compare>
				<!--Handle unspecified state-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<RaiseError Id="3" Param0="GetOnlineProfiles.strTargetState">GetOnlineProfiles : Target state '{0}' not specified.</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="RunToPreOP">
				<RunToState Timeout="-1">
					<State>PREOP</State>
				</RunToState>
				<RaiseErrorOnFailure Id="4">Failed to Run to PreOP</RaiseErrorOnFailure>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>GetObject0x1000</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="RunToSafeOP">
				<RunToState Timeout="-1">
					<State>SAFEOP</State>
				</RunToState>
				<RaiseErrorOnFailure Id="5">Failed to Run to SafeOP</RaiseErrorOnFailure>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>GetObject0x1000</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="RunToOP">
				<RunToState Timeout="-1">
					<State>OP</State>
				</RunToState>
				<RaiseErrorOnFailure Id="6">Failed to Run to OP</RaiseErrorOnFailure>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>GetObject0x1000</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetObject0x1000">
				<UploadCoEObject>
					<Index>#x1000</Index>
					<SubIndex>0</SubIndex>
					<DataVar>GetOnlineProfiles.uint32ObjectProfileValue</DataVar>
					<AbortCode>GetOnlineProfiles.SdoAbortCode</AbortCode>
					<AbortMessage>GetOnlineProfiles.AbortMessage</AbortMessage>
					<CompleteAccess>false</CompleteAccess>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="7">Failed to read 0x1000 (Device Type).</RaiseErrorOnFailure>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.AbortMessage</Value1>
						<Value2>EmptyString</Value2>
						<SetVariable Param0="GetOnlineProfiles.AbortMessage" Target="GetOnlineProfiles.strResult">VerifyModuleOnline : Failed to upload 0x1000 (Device Type) '{0}'</SetVariable>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.AbortMessage</Value1>
						<Value2>EmptyString</Value2>
						<GotoStep>END_Dump</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>0</Value2>
						<SetVariable Param0="GetOnlineProfiles.SdoAbortCode" Target="GetOnlineProfiles.strResult">VerifyModuleOnline : Failed to upload 0x1000 (Device Type) '0x{0:X8}'.</SetVariable>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>END_Dump</GotoStep>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetDeviceProfile">
				<Description Id="8" Param0="GetOnlineProfiles.uint32ObjectProfileValue" Level="Verbose">0x1000 (Device Type) : 0x{0:X8}</Description>
				<!--Get Bit 0-15 (Device Profile) of the 0x1000 value-->
				<GetBits Source="GetOnlineProfiles.uint32ObjectProfileValue" Target="GetOnlineProfiles.uint16DeviceProfile">
					<Offset>0</Offset>
					<Length>16</Length>
				</GetBits>
				<!--Verbose output of read profile value-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="9" Level="Verbose" Param0="GetOnlineProfiles.uint16DeviceProfile">Device Profile 0x{0:X4}/{0} (Object 0x1000; bit0-15)</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetModuleProfile">
				<!--Get Bit 16-32 (Module Profile) of the 0x1000 value-->
				<GetBits Source="GetOnlineProfiles.uint32ObjectProfileValue" Target="GetOnlineProfiles.uint16ModuleProfile0x1000">
					<Offset>16</Offset>
					<Length>16</Length>
				</GetBits>
				<!--Verbose output of read profile value-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="10" Level="Verbose" Param0="GetOnlineProfiles.uint16ModuleProfile0x1000">Device ModuleProfile 0x{0:X4}/{0} (Object 0x1000; bit16-31)</WriteLine>
					</Equal>
				</Compare>
				<!--CreateProfileInfoString-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetOnlineProfiles.strObj1000ProfileStr" Param0="GetOnlineProfiles.uint16DeviceProfile" Param1="GetOnlineProfiles.uint16ModuleProfile0x1000">{0}_{1}_0</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="LoopStart0xF01x">
				<Description Id="11" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Level="Verbose">GetOnlineProfiles : Read 0x{0:X4}.0.</Description>
				<UploadCoEObject>
					<Index>GetOnlineProfiles.ModuleProfileObjectIndex</Index>
					<SubIndex>0</SubIndex>
					<DataVar>GetOnlineProfiles.ModuleProfileObjectMaxSubIndex</DataVar>
					<AbortCode>GetOnlineProfiles.SdoAbortCode</AbortCode>
					<AbortMessage>GetOnlineProfiles.AbortMessage</AbortMessage>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="12" Param0="GetOnlineProfiles.ModuleProfileObjectIndex">Failed to read 0x{0:X4}.0</RaiseErrorOnFailure>
				<!--Dump info if upload of Si0 failed-->
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.AbortMessage</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="13" Level="Output" Param0="GetOnlineProfiles.AbortMessage" Param1="GetOnlineProfiles.ModuleProfileObjectIndex">Read 0x{1:X4}.0 failed '{0}'</WriteLine>
					</NotEqual>
				</Compare>
				<!--Abort F01x loop if upload of Si0 failed-->
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.AbortMessage</Value1>
						<Value2>EmptyString</Value2>
						<GotoStep>END</GotoStep>
					</NotEqual>
				</Compare>
				<!--Dump verbose info if last 0xF01x object read-->
				<Compare>
					<Equal>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>#x06020000</Value2>
						<WriteLine Id="14" Level="Verbose" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Param1="GetOnlineProfiles.SdoAbortCode">Object 0x{0:X4} does not exists (0x{1:X8}).</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>#x06020000</Value2>
						<GotoStep>END</GotoStep>
					</Equal>
				</Compare>
				<!--Dump info if upload of Si0 failed-->
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="15" Level="Output" Param0="GetOnlineProfiles.SdoAbortCode" Param1="GetOnlineProfiles.ModuleProfileObjectIndex">Read 0x{1:X4}.0 failed '0x{0:X}'.</WriteLine>
					</NotEqual>
				</Compare>
				<!--Abort F01x loop if upload of Si0 failed-->
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>END</GotoStep>
					</NotEqual>
				</Compare>
				<!--Dump Read Data-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="16" Level="Verbose" Param0="GetOnlineProfiles.ModuleProfileObjectMaxSubIndex" Param1="GetOnlineProfiles.ModuleProfileObjectIndex">Read 0x{1:X4}.0 = 0x{0:X}.</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ResetF01xEntryLoopCounter">
				<SetVariable Target="GetOnlineProfiles.F01xEntryLoopCounter">1</SetVariable>
			</TestStep>
			<TestStep Name="EntryLoopStart">
				<Compare>
					<Greater>
						<Value1>GetOnlineProfiles.F01xEntryLoopCounter</Value1>
						<Value2>GetOnlineProfiles.ModuleProfileObjectMaxSubIndex</Value2>
						<GotoStep>LoopEnd0xF01x</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep Name="CheckModuleProfile0x1000">
				<!--In case that the Module Profile is already defined in 0x1000 (bit 16-31) the 0xF01x.y values can be ignored-->
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.uint16ModuleProfile0x1000</Value1>
						<Value2>0</Value2>
						<SetVariable Target="GetOnlineProfiles.uint16CurrentModuleProfile">GetOnlineProfiles.uint16ModuleProfile0x1000</SetVariable>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.uint16ModuleProfile0x1000</Value1>
						<Value2>0</Value2>
						<GotoStep>CreateProfileString</GotoStep>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="ReadProfileInfoOfSiX">
				<Description Id="17" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Level="Verbose" Param1="GetOnlineProfiles.F01xEntryLoopCounter">0x{0:X}.{1} : SDO upload.</Description>
				<UploadCoEObject>
					<Index>GetOnlineProfiles.ModuleProfileObjectIndex</Index>
					<SubIndex>GetOnlineProfiles.F01xEntryLoopCounter</SubIndex>
					<DataVar>GetOnlineProfiles.tmpDataArray</DataVar>
					<AbortCode>GetOnlineProfiles.SdoAbortCode</AbortCode>
					<AbortMessage>GetOnlineProfiles.AbortMessage</AbortMessage>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="18" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Param1="GetOnlineProfiles.F01xEntryLoopCounter">0x{0:X}.{1}  : Failed to read entry.</RaiseErrorOnFailure>
				<!--Dump info if upload of SiX failed-->
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.AbortMessage</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="19" Level="Verbose" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Param1="GetOnlineProfiles.F01xEntryLoopCounter" Param2="GetOnlineProfiles.AbortMessage">0x{0:X}.{1}  : Failed to read entry '{2}'.</WriteLine>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.AbortMessage</Value1>
						<Value2>EmptyString</Value2>
						<GotoStep>LoopEnd0xF01x</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="20" Level="Verbose" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Param1="GetOnlineProfiles.F01xEntryLoopCounter" Param2="GetOnlineProfiles.SdoAbortCode">0x{0:X}.{1}   : Failed to read entry '0x{2:X}'.</WriteLine>
					</NotEqual>
				</Compare>
				<!--SkipCurrentF01xObject-->
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.SdoAbortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>LoopEnd0xF01x</GotoStep>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetUint32Value">
				<SizeOf UInt32Var="GetOnlineProfiles.tmpDataArrayLength">GetOnlineProfiles.tmpDataArray</SizeOf>
			</TestStep>
			<TestStep>
				<SetVariable Target="GetOnlineProfiles.uint32ObjectProfileValue">0</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="GetOnlineProfiles.tmpDataArrayLength">GetOnlineProfiles.tmpDataArrayLength * 8</SetVariable>
			</TestStep>
			<TestStep>
				<GetBits Target="GetOnlineProfiles.uint32ObjectProfileValue" Source="GetOnlineProfiles.tmpDataArray">
					<Offset>0</Offset>
					<Length>GetOnlineProfiles.tmpDataArrayLength</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetModuleProfileInfoOfSiX">
				<Description Id="21" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Param1="GetOnlineProfiles.F01xEntryLoopCounter" Param2="GetOnlineProfiles.uint32ObjectProfileValue" Level="Verbose">0x{0:X}.{1} : Value 0x{2:X8}.</Description>
				<!--Get Bit 0-15 (Module Profile) of the 0xF01x.x value-->
				<GetBits Source="GetOnlineProfiles.uint32ObjectProfileValue" Target="GetOnlineProfiles.uint16CurrentModuleProfile">
					<Offset>0</Offset>
					<Length>16</Length>
				</GetBits>
				<!--Verbose output of read profile value-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="22" Level="Verbose" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Param1="GetOnlineProfiles.F01xEntryLoopCounter" Param2="GetOnlineProfiles.uint16CurrentModuleProfile">0x{0:X}.{1} (bit0-15): ModuleProfile 0x{2:X4}/{2}</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetSubModuleProfileInfoOfSiX">
				<!--Get Bit 16-31 (SubModuleProfile) of the 0xF01x.x value-->
				<GetBits Source="GetOnlineProfiles.uint32ObjectProfileValue" Target="GetOnlineProfiles.uint16CurrentSubModuleProfile">
					<Offset>16</Offset>
					<Length>16</Length>
				</GetBits>
				<!--Verbose output of read profile value-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<WriteLine Id="23" Level="Verbose" Param0="GetOnlineProfiles.ModuleProfileObjectIndex" Param1="GetOnlineProfiles.F01xEntryLoopCounter" Param2="GetOnlineProfiles.uint16CurrentSubModuleProfile">0x{0:X}.{1} (bit16-31): SubModuleProfile 0x{2:X4}/{2}</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CreateProfileString">
				<SetVariable Param0="GetOnlineProfiles.uint16DeviceProfile" Param1="GetOnlineProfiles.uint16CurrentModuleProfile" Param2="GetOnlineProfiles.uint16CurrentSubModuleProfile" Target="GetOnlineProfiles.strCurProfileInfo">{0}_{1}_{2}</SetVariable>
			</TestStep>
			<TestStep>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.ModuleProfileObjectIndex</Value1>
						<Value2>#xF010</Value2>
						<GotoStep>AddProfileToList</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.F01xEntryLoopCounter</Value1>
						<Value2>1</Value2>
						<GotoStep>AddProfileToList</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetOnlineProfiles.strObj1000ProfileStr">EmptyString</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="AddProfileToList">
				<Description Id="24" Level="Verbose" Param0="GetOnlineProfiles.strCurProfileInfo">GetOnlineProfiles | Add Info '{0}'</Description>
				<AddArrayItem TargetArray="GetOnlineProfiles.arrProfiles">GetOnlineProfiles.strCurProfileInfo</AddArrayItem>
			</TestStep>
			<TestStep Name="F01xEntryLoopEnd">
				<!--Increment EntryCounter-->
				<SetVariable Target="GetOnlineProfiles.F01xEntryLoopCounter">GetOnlineProfiles.F01xEntryLoopCounter + 1</SetVariable>
				<!--Start next cycle if index is less or equal MaxSubIndex-->
				<Compare>
					<LowerOrEqual>
						<Value1>GetOnlineProfiles.F01xEntryLoopCounter</Value1>
						<Value2>GetOnlineProfiles.ModuleProfileObjectMaxSubIndex</Value2>
						<GotoStep>EntryLoopStart</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="LoopEnd0xF01x">
				<!--Increment ModuleProfile object index-->
				<SetVariable Target="GetOnlineProfiles.ModuleProfileObjectIndex">GetOnlineProfiles.ModuleProfileObjectIndex + 1</SetVariable>
				<!--Start next cycle if index is less or equal 0xF01F-->
				<Compare>
					<LowerOrEqual>
						<Value1>GetOnlineProfiles.ModuleProfileObjectIndex</Value1>
						<Value2>#xF01F</Value2>
						<GotoStep>LoopStart0xF01x</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="END">
				<!--If the Profile info in 0x1000 is empty skip add info-->
				<Compare>
					<Equal>
						<Value1>GetOnlineProfiles.strObj1000ProfileStr</Value1>
						<Value2>EmptyString</Value2>
						<GotoStep>END_Dump</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>GetOnlineProfiles.strObj1000ProfileStr</Value1>
						<Value2>null</Value2>
						<GotoStep>END_Dump</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="Add0x1000ProfileInfoToList">
				<Description Id="25" Level="Verbose" Param0="GetOnlineProfiles.strObj1000ProfileStr">GetOnlineProfiles | Add Info '{0}' (Object 0x1000 Profile info)</Description>
				<AddArrayItem TargetArray="GetOnlineProfiles.arrProfiles">GetOnlineProfiles.strObj1000ProfileStr</AddArrayItem>
			</TestStep>
			<TestStep Name="END_Dump">
				<Compare>
					<NotEqual>
						<Value1>GetOnlineProfiles.strResult</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="27" Level="Output" Param0="GetOnlineProfiles.strResult">{0}</WriteLine>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>bDEBUG</Value1>
						<Value2>true</Value2>
						<WriteLine Id="26" Level="Verbose" Param0="GetOnlineProfiles.arrProfiles">DEBUG | GetOnlineProfiles finished (Result : '{0}').</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="301" Name="GetCurrentProfileList">
			<?MAX_OUTPUT_ID 3?>
			<!--Editor: RH-->
			<Description>
				<Purpose>Get a flat list of all Profiles defined for a specific state and OD type ('online'/ 'offline')</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition>Retrun a string array contains all profile info (string format "[DeviceProfile]_[ModuleProfile]_[SubModule]")</PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>GetCurrentProfileList.DicType</Name>
				<Type>String</Type>
				<!--"offline" ; "online"-->
			</Parameter>
			<Parameter>
				<Name>GetCurrentProfileList.TargetState</Name>
				<Type>String</Type>
				<!--"PreOP" ; "SafeOP" ; "OP"-->
			</Parameter>
			<OutParameter>
				<Name>GetCurrentProfileList.CurrentProfiles</Name>
				<Type>ArrayOfString</Type>
			</OutParameter>
			<TestStep Name="HandleDictionaryType">
				<Compare>
					<Equal>
						<Value1>GetCurrentProfileList.DicType</Value1>
						<Value2>"online"</Value2>
						<GotoStep>GetAllOnlineProfiles</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>GetCurrentProfileList.DicType</Value1>
						<Value2>"offline"</Value2>
						<GotoStep>GetAllOfflineProfiles</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<RaiseError Id="0" Param0="GetCurrentProfileList.DicType">GetCurrentProfileList | unsupported dictionary type '{0}'</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetAllOnlineProfiles">
				<Description Id="1" Level="Output">GetCurrentProfileList | Get all online Profiles</Description>
				<CallTestFunction Name="GetOnlineProfiles">
					<Parameter>GetCurrentProfileList.TargetState</Parameter>
					<OutParameter>GetCurrentProfileList.CurrentProfiles</OutParameter>
				</CallTestFunction>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="2"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetAllOfflineProfiles">
				<Description Id="3" Level="Output">GetCurrentProfileList | Get all offline Profiles</Description>
				<CallTestFunction Name="GetOfflineProfiles">
					<OutParameter>GetCurrentProfileList.CurrentProfiles</OutParameter>
				</CallTestFunction>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="302" Name="GetDeviceProfile">
			<!--Editor: RH-->
			<Description>
				<Purpose>Get the 16Bit Device Profile number from the ProfileListElementString</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>GetDeviceProfile.ProfileString</Name>
				<Type>String</Type>
				<!--Format "[DeviceProfile]_[ModuleProfile]_[SubModule]"-->
			</Parameter>
			<LocalVariables>
				<Name>GetDeviceProfile.TmpStringArray</Name>
				<Type>ArrayOfString</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>GetDeviceProfile.TmpString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>GetDeviceProfile.ID</Name>
				<Type>UInt16</Type>
			</OutParameter>
			<TestStep Name="InitId">
				<SetVariable Target="GetDeviceProfile.ID">0</SetVariable>
			</TestStep>
			<TestStep Name="GetProfileInformation">
				<RegexSplit OutputStrings="GetDeviceProfile.TmpStringArray">
					<Pattern>_</Pattern>
					<InputString>GetDeviceProfile.ProfileString</InputString>
				</RegexSplit>
			</TestStep>
			<TestStep Name="GetDeviceProfile">
				<GetArrayItem SourceArray="GetDeviceProfile.TmpStringArray" Target="GetDeviceProfile.TmpString" Index="0"></GetArrayItem>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetDeviceProfile.ID">GetDeviceProfile.TmpString</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="303" Name="GetModuleProfile">
			<!--Editor: RH-->
			<Description>
				<Purpose>Get the 16Bit Module Profile number from the ProfileListElementString</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>GetModuleProfile.ProfileString</Name>
				<Type>String</Type>
				<!--Format "[DeviceProfile]_[ModuleProfile]_[SubModule]"-->
			</Parameter>
			<LocalVariables>
				<Name>GetModuleProfile.TmpStringArray</Name>
				<Type>ArrayOfString</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>GetModuleProfile.TmpString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>GetModuleProfile.ID</Name>
				<Type>UInt16</Type>
			</OutParameter>
			<TestStep Name="InitId">
				<SetVariable Target="GetModuleProfile.ID">0</SetVariable>
			</TestStep>
			<TestStep Name="GetProfileInformation">
				<RegexSplit OutputStrings="GetModuleProfile.TmpStringArray">
					<Pattern>_</Pattern>
					<InputString>GetModuleProfile.ProfileString</InputString>
				</RegexSplit>
			</TestStep>
			<TestStep Name="GetModuleProfile">
				<GetArrayItem SourceArray="GetModuleProfile.TmpStringArray" Target="GetModuleProfile.TmpString" Index="1"></GetArrayItem>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetModuleProfile.ID">GetModuleProfile.TmpString</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="304" Name="GetSubModuleProfile">
			<!--Editor: RH-->
			<Description>
				<Purpose>Get the 16Bit Module Profile number from the ProfileListElementString</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>GetSubModuleProfile.ProfileString</Name>
				<Type>String</Type>
				<!--Format "[DeviceProfile]_[ModuleProfile]_[SubModule]"-->
			</Parameter>
			<LocalVariables>
				<Name>GetSubModuleProfile.TmpStringArray</Name>
				<Type>ArrayOfString</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>GetSubModuleProfile.TmpString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>GetSubModuleProfile.ID</Name>
				<Type>UInt16</Type>
			</OutParameter>
			<TestStep Name="InitId">
				<SetVariable Target="GetSubModuleProfile.ID">0</SetVariable>
			</TestStep>
			<TestStep Name="GetProfileInformation">
				<RegexSplit OutputStrings="GetSubModuleProfile.TmpStringArray">
					<Pattern>_</Pattern>
					<InputString>GetSubModuleProfile.ProfileString</InputString>
				</RegexSplit>
			</TestStep>
			<TestStep Name="GetSubModuleProfile">
				<GetArrayItem SourceArray="GetSubModuleProfile.TmpStringArray" Target="GetSubModuleProfile.TmpString" Index="2"></GetArrayItem>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SetVariable Target="GetSubModuleProfile.ID">GetSubModuleProfile.TmpString</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="401" Name="DeviceProfileSupported">
			<!--Editor: RH-->
			<Description>
				<Purpose>Check if a specific device profile is supported</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>DeviceProfileSupported.ODType</Name>
				<Type>String</Type>
				<!--"offline" or "online"-->
			</Parameter>
			<Parameter>
				<Name>DeviceProfileSupported.DeviceProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<LocalVariables>
				<Name>DeviceProfileSupported.TmpStringArray</Name>
				<Type>ArrayOfString</Type>
			</LocalVariables>
			<OutParameter>
				<Name>DeviceProfileSupported.Match</Name>
				<Type>Bool</Type>
			</OutParameter>
			<TestStep Name="InitResult">
				<SetVariable Target="DeviceProfileSupported.Match">false</SetVariable>
			</TestStep>
			<TestStep Name="GetProfiles">
				<CallTestFunction Name="GetCurrentProfileList">
					<Parameter>DeviceProfileSupported.ODType</Parameter>
					<Parameter>"PreOP"</Parameter>
					<OutParameter>DeviceProfileSupported.TmpStringArray</OutParameter>
				</CallTestFunction>
			</TestStep>
			<TestStep Name="CheckIfProfileIsDefined">
				<CallTestFunction Name="DeviceProfileDefined">
					<Parameter>DeviceProfileSupported.TmpStringArray</Parameter>
					<Parameter>DeviceProfileSupported.DeviceProfile</Parameter>
					<OutParameter>DeviceProfileSupported.Match</OutParameter>
				</CallTestFunction>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="402" Name="DeviceProfileDefined">
			<?MAX_OUTPUT_ID 3?>
			<!--Editor: RH-->
			<Description>
				<Purpose>Check if a specific device profile is defined in the provided profile array</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>DeviceProfileDefined.Profiles</Name>
				<Type>ArrayOfString</Type>
				<!--Array containing the profile values-->
			</Parameter>
			<Parameter>
				<Name>DeviceProfileDefined.DeviceProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<LocalVariables>
				<Name>DeviceProfileDefined.TmpString</Name>
				<Type>String</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceProfileDefined.TmpId</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceProfileDefined.Length</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceProfileDefined.Cnt</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<OutParameter>
				<Name>DeviceProfileDefined.Match</Name>
				<Type>Bool</Type>
			</OutParameter>
			<TestStep Name="InitResult">
				<SetVariable Target="DeviceProfileDefined.Match">false</SetVariable>
			</TestStep>
			<TestStep Name="InitCnt">
				<SetVariable Target="DeviceProfileDefined.Cnt">0</SetVariable>
			</TestStep>
			<TestStep Name="GetListLength">
				<Compare>
					<Equal>
						<Value1>DeviceProfileDefined.Profiles</Value1>
						<Value2>null</Value2>
						<Return Id="0"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="DeviceProfileDefined.Length">DeviceProfileDefined.Profiles</SizeOf>
				<Compare>
					<Equal>
						<Value1>DeviceProfileDefined.Length</Value1>
						<Value2>0</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetNextElement">
				<GetArrayItem SourceArray="DeviceProfileDefined.Profiles" Target="DeviceProfileDefined.TmpString" Index="DeviceProfileDefined.Cnt"></GetArrayItem>
			</TestStep>
			<TestStep Name="GetProfile">
				<CallTestFunction Name="GetDeviceProfile">
					<Parameter>DeviceProfileDefined.TmpString</Parameter>
					<OutParameter>DeviceProfileDefined.TmpId</OutParameter>
				</CallTestFunction>
				<Compare>
					<Equal>
						<Value1>DeviceProfileDefined.TmpId</Value1>
						<Value2>DeviceProfileDefined.DeviceProfile</Value2>
						<SetVariable Target="DeviceProfileDefined.Match">true</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceProfileDefined.TmpId</Value1>
						<Value2>DeviceProfileDefined.DeviceProfile</Value2>
						<Return Id="2"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="LoopStart">
				<Compare>
					<GreaterOrEqual>
						<Value1>DeviceProfileDefined.Cnt</Value1>
						<Value2>DeviceProfileDefined.Length</Value2>
						<Return Id="3"></Return>
					</GreaterOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="LoopEnd">
				<SetVariable Target="DeviceProfileDefined.Cnt">DeviceProfileDefined.Cnt + 1</SetVariable>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>LoopStart</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="403" Name="DeviceAndModuleProfileSupported">
			<!--Editor: RH-->
			<Description>
				<Purpose>Check if a specific device and module profile is supported</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>DeviceAndModuleProfileSupported.ODType</Name>
				<Type>String</Type>
				<!--"offline" or "online"-->
			</Parameter>
			<Parameter>
				<Name>DeviceAndModuleProfileSupported.DeviceProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<Parameter>
				<Name>DeviceAndModuleProfileSupported.ModuleProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<LocalVariables>
				<Name>DeviceAndModuleProfileSupported.TmpStringArray</Name>
				<Type>ArrayOfString</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceAndModuleProfileSupported.TmpString</Name>
				<Type>String</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceAndModuleProfileSupported.TmpId</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceAndModuleProfileSupported.Length</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceAndModuleProfileSupported.Cnt</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<OutParameter>
				<Name>DeviceAndModuleProfileSupported.Match</Name>
				<Type>Bool</Type>
			</OutParameter>
			<TestStep Name="InitResult">
				<SetVariable Target="DeviceAndModuleProfileSupported.Match">false</SetVariable>
			</TestStep>
			<TestStep Name="InitCnt">
				<SetVariable Target="DeviceAndModuleProfileSupported.Cnt">0</SetVariable>
			</TestStep>
			<TestStep Name="GetProfiles">
				<CallTestFunction Name="GetCurrentProfileList">
					<Parameter>DeviceAndModuleProfileSupported.ODType</Parameter>
					<Parameter>"SafeOP"</Parameter>
					<OutParameter>DeviceAndModuleProfileSupported.TmpStringArray</OutParameter>
				</CallTestFunction>
			</TestStep>
			<TestStep>
				<CallTestFunction Name="DeviceAndModuleProfileDefined">
					<Parameter>DeviceAndModuleProfileSupported.TmpStringArray</Parameter>
					<Parameter>DeviceAndModuleProfileSupported.DeviceProfile</Parameter>
					<Parameter>DeviceAndModuleProfileSupported.ModuleProfile</Parameter>
					<OutParameter>DeviceAndModuleProfileSupported.Match</OutParameter>
				</CallTestFunction>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="404" Name="DeviceAndModuleProfileDefined">
			<?MAX_OUTPUT_ID 1?>
			<!--Editor: RH-->
			<Description>
				<Purpose>Check if a specific device and module profile is defined in the provided profile array</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>DeviceAndModuleProfileDefined.Profiles</Name>
				<Type>ArrayOfString</Type>
				<!--Array containing the profile values-->
			</Parameter>
			<Parameter>
				<Name>DeviceAndModuleProfileDefined.DeviceProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<Parameter>
				<Name>DeviceAndModuleProfileDefined.ModuleProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<LocalVariables>
				<Name>DeviceAndModuleProfileDefined.TmpString</Name>
				<Type>String</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceAndModuleProfileDefined.TmpId</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceAndModuleProfileDefined.Length</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DeviceAndModuleProfileDefined.Cnt</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<OutParameter>
				<Name>DeviceAndModuleProfileDefined.Match</Name>
				<Type>Bool</Type>
			</OutParameter>
			<TestStep Name="InitResult">
				<SetVariable Target="DeviceAndModuleProfileDefined.Match">false</SetVariable>
			</TestStep>
			<TestStep Name="InitCnt">
				<SetVariable Target="DeviceAndModuleProfileDefined.Cnt">0</SetVariable>
			</TestStep>
			<TestStep Name="GetListLength">
				<SizeOf UInt32Var="DeviceAndModuleProfileDefined.Length">DeviceAndModuleProfileDefined.Profiles</SizeOf>
			</TestStep>
			<TestStep Name="LoopStart">
				<Compare>
					<GreaterOrEqual>
						<Value1>DeviceAndModuleProfileDefined.Cnt</Value1>
						<Value2>DeviceAndModuleProfileDefined.Length</Value2>
						<Return Id="0"></Return>
					</GreaterOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetNextElement">
				<GetArrayItem SourceArray="DeviceAndModuleProfileDefined.Profiles" Target="DeviceAndModuleProfileDefined.TmpString" Index="DeviceAndModuleProfileDefined.Cnt"></GetArrayItem>
			</TestStep>
			<TestStep Name="GetDeviceProfile">
				<CallTestFunction Name="GetDeviceProfile">
					<Parameter>DeviceAndModuleProfileDefined.TmpString</Parameter>
					<OutParameter>DeviceAndModuleProfileDefined.TmpId</OutParameter>
				</CallTestFunction>
				<Compare>
					<NotEqual>
						<Value1>DeviceAndModuleProfileDefined.TmpId</Value1>
						<Value2>DeviceAndModuleProfileDefined.DeviceProfile</Value2>
						<GotoStep>LoopEnd</GotoStep>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetModuleProfile">
				<CallTestFunction Name="GetModuleProfile">
					<Parameter>DeviceAndModuleProfileDefined.TmpString</Parameter>
					<OutParameter>DeviceAndModuleProfileDefined.TmpId</OutParameter>
				</CallTestFunction>
				<Compare>
					<Equal>
						<Value1>DeviceAndModuleProfileDefined.TmpId</Value1>
						<Value2>DeviceAndModuleProfileDefined.ModuleProfile</Value2>
						<SetVariable Target="DeviceAndModuleProfileDefined.Match">true</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceAndModuleProfileDefined.TmpId</Value1>
						<Value2>DeviceAndModuleProfileDefined.ModuleProfile</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="LoopEnd">
				<SetVariable Target="DeviceAndModuleProfileDefined.Cnt">DeviceAndModuleProfileDefined.Cnt + 1</SetVariable>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>LoopStart</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction FunctionId="501" Name="DuTSupportDeviceAndModuleProfile">
			<?MAX_OUTPUT_ID 0?>
			<!--Editor: RH-->
			<Description>
				<Purpose>Check if a specific Device and Module Profile is supported by the DuT</Purpose>
				<PreCondition></PreCondition>
				<Action></Action>
				<PostCondition></PostCondition>
				<References>
					<Reference Specification="See the corresponding profile specification."></Reference>
				</References>
			</Description>
			<Parameter>
				<Name>DuTSupportDeviceAndModuleProfile.DeviceProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<Parameter>
				<Name>DuTSupportDeviceAndModuleProfile.ModuleProfile</Name>
				<Type>UInt16</Type>
				<!--expected Profile ID-->
			</Parameter>
			<LocalVariables>
				<Name>DuTSupportDeviceAndModuleProfile.TmpStringArray</Name>
				<Type>ArrayOfString</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DuTSupportDeviceAndModuleProfile.TmpString</Name>
				<Type>String</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DuTSupportDeviceAndModuleProfile.TmpId</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DuTSupportDeviceAndModuleProfile.Length</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>DuTSupportDeviceAndModuleProfile.Cnt</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<OutParameter>
				<Name>DuTSupportDeviceAndModuleProfile.Match</Name>
				<Type>Bool</Type>
			</OutParameter>
			<TestStep Name="InitResult">
				<SetVariable Target="DuTSupportDeviceAndModuleProfile.Match">false</SetVariable>
			</TestStep>
			<TestStep Name="TryToGetProfileFromOfflineInfo">
				<CallTestFunction Name="DeviceAndModuleProfileSupported">
					<Parameter>"offline"</Parameter>
					<Parameter>DuTSupportDeviceAndModuleProfile.DeviceProfile</Parameter>
					<Parameter>DuTSupportDeviceAndModuleProfile.ModuleProfile</Parameter>
					<OutParameter>DuTSupportDeviceAndModuleProfile.Match</OutParameter>
				</CallTestFunction>
				<Compare>
					<Equal>
						<Value1>DuTSupportDeviceAndModuleProfile.Match</Value1>
						<Value2>true</Value2>
						<Return Id="0"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="TryToGetProfileFromOnlineInfo">
				<CallTestFunction Name="DeviceAndModuleProfileSupported">
					<Parameter>"online"</Parameter>
					<Parameter>DuTSupportDeviceAndModuleProfile.DeviceProfile</Parameter>
					<Parameter>DuTSupportDeviceAndModuleProfile.ModuleProfile</Parameter>
					<OutParameter>DuTSupportDeviceAndModuleProfile.Match</OutParameter>
				</CallTestFunction>
			</TestStep>
		</TestFunction>
	</TestFunctions>
</EtherCATTest>