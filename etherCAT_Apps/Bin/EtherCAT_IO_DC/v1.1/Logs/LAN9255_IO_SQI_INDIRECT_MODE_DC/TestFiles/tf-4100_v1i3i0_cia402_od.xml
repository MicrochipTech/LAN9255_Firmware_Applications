<?xml version="1.0" encoding="UTF-8" standalone="yes"?><EtherCATTest Name="TF-4100 CiA402 OD" xsi:noNamespaceSchemaLocation="EtherCATTest.xsd" SchemaVersion="1.0.31" TestId="16640" TestVersion="1.3.0" RealeaseState="Released" TestVendorId="1" Url="http://www.ethercat.org/en/conformance.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<Comment>Tests the mandatory and recommended CiA402 objects required for each individual CiA402 Mode of Operation. Tests are based on the CiA402 Implementation Guide ETG.6010 for EtherCAT and IEC61800-7-402
Tests are mandatory for devices which list the CiA402 profile in the ESI file. If no CiA402 profile is listed in the ESI file the tests are skipped.
If the object 0x6502 Supported Drive Modes is supported only those objects for Function Groups (FG) which are supported are checked. Otherwise, all tests are performed.

******************* Limitiations of the Test **************************
Test only checks for first axis but not for following axis.</Comment>
	<History>
		<HistoryEntry Editor="FH" TestVersion="0.9.5" Date="2010-03-16">Check if CiA402 profile is supported by checking ESI element ProfileNo = 402 (either eleement DeviceDescr.Profile[0].ProfileNo or element DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo).  This is only done for axis 1.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.6" Date="2010-03-16">Check if FG supported by means of 0x6502 Supported Drive Modes and only performe test if FG supported. If 0x6502 is not supported performe test anyways. This is only done for axis 1.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.6" Date="2010-03-16">Catch Abort Codes for objects which are only recommended (0x06010000 and 0x06020000)</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.7" Date="2010-03-16">Success messages added</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.7" Date="2010-03-16">Objects 0x6085, 0x605B, 0x605C, 0x605E object category adopted: Up to now they were mandatory, according to WG CiA402 they have become optional. Adopted in all MandObj_CiA402_-_.xml files, version 1i0i0</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.8" Date="2010-03-17">OD file names adopted: e.g. MandObj_CiA402_-_.xml files -&gt; OD-4001_MandObj_CiA402_-_.xml</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.9" Date="2010-03-19">Editing of output when ESI element ProfileNo = 402 AND 0x6502 supported but 0x6502 = 0 (no CS-mode supported) (Funktion CheckIfFgSupported)</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.9" Date="2010-03-19">Make Info Logger Output only if ESI element DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo is available (function CheckIf402Supported)</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.0" Date="2010-04-01" Id="EX_100601_4">Name of object dictionary files in the test file do not correspond with the files installed in folder ObjectDictionaries.

Replace MandObj_CiA402_%%%.xml with OD-4001_MandObj_CiA402_%%%.xml. Files (CiA402_ObjectDictionaries.zip) can be downloaded from the CTT ftp server.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.1" Date="2010-04-12" Id="EX_100412_1">Issue: When DeviceDescr.Profile[0].ProfileNo  is not 402 but any other number the test was not skipped. 
Solution: Now it is skipped.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.2" Date="2010-12-12" Id="EX_100608_1">When Profile = 402, than AddInfo Default value = 0x02. When AddInfo = (!=0x002) (Frequcy converter/Stepper/Modular) then only checking for Mandatory Objects for CiA402 devices</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.3" Date="2011-02-25" Id="EN_110225_2">_Where: Reset function
_Description: When no FMMUs are supported by the ESC (reg 0x04 = 0) the function did still try to reset one FMMU
_Solution: skip resetting FMMUs when FMMU count = 0. </HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.3" Date="2011-02-25" Id="EN_110225_3">_Where: Reset function
_Description: Added 
- Check for register 0x0134
- Check for device emulation
- Check for device emulation
- Reset of 0x0980:0x0981</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.3" Date="2011-03-11" Id="EN_TF-4100_110311_1">_Issue: When AddInfo = 0xFFFF this is not evaluated
_Solution: When AddInfo = 0xFFFF then also the general object tests have to be passed.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.3" Date="2011-03-11" Id="EN_TF-4100_110311_2">_Issue: Added updated OD-4001_V1i0i1_S_MandObj_CiA402_gen.xml according to EN_110309_1</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.4" Date="2011-04-19" Id="EN_TF-4100_110419_1">_Where: TF-4100-4-1 Mandatory Objects Available for FG Torque
_Description: Object dictionary file could not be found due to typo in GetObjectDictionary Action
_Solution: Correct file name</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.5" Date="2011-04-20" Id="EN_TF-4100_110420_1">_Where: Schema assignment
_Description: Schema Version 1.0.3 assigned and copied History element IDs to the ID field</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.6" Date="2011-05-12" Id="EN_TF-4100_110512_1">_Where: Reset function
_ Description: variable dcAvailable was not defined
_Solution: define variable dcAvailable as bool</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.6" Date="2011-05-12" Id="EN_TF-4100_110512_2">_Where:Function CheckIf402Supported
_ Description:Check if ESI element DeviceDescr.Profile[0].AddInfo is present was done with value "null"
_Solution: use "boolean"</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.7" Date="2011-05-31" Id="EN_TF-4100_110531_1">_Where:Function CheckIf402Supported
_ Description:Check if ESI element DeviceDescr.Profile[0].AddInfo is present was done with boolean value "FALSE"
_Solution: use "null"</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.9" Date="2011-09-21" Id="EN_TF-4100_110921_1">_Where:1-1
_ Description: Print CoE Abort Code to logger.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.9" Date="2011-11-04" Id="EN_TF-4100_111104_1">_Where:4-1
_ Description: Wrong reference to OD-file for cst mode: OD-4001_V1i0i0_D_MandObj_CiA402_csp.xml
_Solution: Use reference to cst mode OD: OD-4001_V1i0i0_D_MandObj_CiA402_cst.xml</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.9" Date="2012-03-15" Id="EN_OD-4001_CiA402_csp_120315_1">_Where: object dictionary file OD-4001_V1i0i0_D_MandObj_CiA402_csp.xml 
_ Description: the object 0x60E4 is optional in ETG.6010. However, if it was not supported a warning was generated.
_Solution: delete 0x60E4 from the object dictionary file.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.9" Date="2012-03-15" Id="EN_OD-4001_CiA402_csv_120315_1: ">_Where: object dictionary file OD-4001_V1i0i0_D_MandObj_CiA402_csv.xml 
_ Description: the object 0x60E5 is optional in ETG.6010. However, if it was not supported a warning was generated.
_Solution: delete 0x60E5 from the object dictionary file.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.9" Date="2012-03-15" Id="EN_TF-4001_CiA402_OD_120315_1: ">_ Description:simplification of object dictionary file names: release type (S;D) was removed</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.9" Date="2012-03-15" Id="EN_TF-4001_CiA402_OD_120315_2: ">_Where:1-2,  2-1, 2-2, 3-1, 3-2, 4-1, 4-2
_ Description:Abort codes are printed to the logger if returned</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.9" Date="2012-06-14" Id="EN_TF-4001_CiA402_OD_120614_1: ">_Where: test cases 1-1; 1-2; 2-2, 3-1, 3-2
_ Description:Adoption of object dictionary file name after they were updated</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.0" Date="2012-11-07" Id="TF-4100-121107_1">_Where: All TC which send frames to the DuT: TG1-4
_Description: 
- Added external test function "Reset" with additional check: If slave is offline this test cases are skipped.
- Add Reference to "EcBaseFunctions.xml" (including basic test functions)
- Reset function removed from local testfunction list</HistoryEntry>
		<HistoryEntry Editor="RH" TestVersion="1.1.1" Date="2012-12-04" Id="TF-4100-121204_1">Remove version info within CiA402 reference object file name.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.1" Date="2013-01-18" Id="TF-4100-130118_1">_Where:OD-4001_MandObj_CiA402_gen.xml
_Description: 0x603F, 0x605B, 0x605C, 0x605E, 0x6085
_Following objects are not recommended but optional in ETG.6010, therefore they are not part of this test
_Solution: Delete</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.3" Date="2013-02-26" Id="TF-4100-130228_1">_Where: Test Function "InitMailbox"
_Description:Called local Reset Function which was moved to the external EcBaseFunctions.xml
_Solution: Make call to external Reset Function</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.4" Date="2013-04-24" Id="TF-4100-130424_1">_Where: all TGs
_Description: ESM timeouts were not initialized
_Solution: Add Initialization of all ESM timeouts by adding function SetStateMachTimeouts</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.5" Date="2015-01-28" Id="TF-4100-150128">EN_150128_1/2/3:
_Where: Object 0x60C2 Interplation time index: MinValue/MaxValue were -128 and 63 -&gt; change to hex format</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.6" Date="2015-01-29" Id="TF-4100-150129_1">Added Logger output for ESM timeout values to SetStateMachTimeouts</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.6" Date="2015-01-29" Id="TF-4100-150129_2">Use default ESM timeouts from specification</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.6" Date="2015-01-29" Id="TF-4100-150129_3">TG1: setting ESM timeout values with was skipped for some drive types - set timeout values always at beginning of test</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.7" Date="2015-02-02" Id="TF-4100-150202_1">TG4: Initialization of ESM timeouts missing</HistoryEntry>
		<HistoryEntry Editor="OH" TestVersion="1.1.8" Date="2015-06-12" Id="TF-4100-150612_1">SetBits actions updated to new schema version</HistoryEntry>
		<HistoryEntry Editor="OH" TestVersion="1.1.9" Date="2015-09-02" Id="EN_TF_4100_150902" Type="Enhancement">Test schema version set to 1.0.23</HistoryEntry>
		<HistoryEntry Editor="BL" TestVersion="1.1.10" Date="2016-02-17" Id="EN_TF_4100_160217" Type="Enhancement">Update to Schema version 1.0.24</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.11" Date="2016-07-05">Release version</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.0" Date="2016-09-29" Id="EN_TF_4100_160929_1" Type="Bug">_Where: Function CheckIf402Supported
_Description: Check if DeviceDescr.Profile[0].ProfileNo is available or not was done with compare on "0". Test was skipped even thought ChannelInfo:ProfileNo was set. Also, DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo shall be checked with null.
_Solution: Compare DeviceDescr.Profile[0].ProfileNo with null.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.0" Date="2016-09-29" Id="EN_TF_4100_160929_2" Type="Bug">_Where: Function CheckIf402Supported
_Description: DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo shall not be 0 -&gt; invalid profile number
_Solution: If DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo generate error</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.1" Date="2016-11-15" Type="Bug">_Where: TF-4100-2-1 FG Position objects available in online OD
_Description: The reference OD file for CSV rather than for CSP is loaded
_Solution: Load CSP reference OD</HistoryEntry>
		<HistoryEntry Editor="BL" TestVersion="1.2.2" Date="2018-09-14">Add output IDs and update Schema version to 1.0.31</HistoryEntry>
		<HistoryEntry Editor="OH" TestVersion="1.2.3" Date="2018-10-30">File names of imported object dictionaries are now relative to this test file.</HistoryEntry>
		<HistoryEntry Editor="FL" TestVersion="1.2.4" Date="2018-11-12">TestFunction 101, WriteLine 15 and 25: Changed Param1 to Param0. TestFunction 906, Error 4 and 5: Changed Param2 to Param1.</HistoryEntry>
		<HistoryEntry Date="2019-05-02" Editor="FE" TestVersion="1.2.5" Type="Enhancement">Set version to 1.3.0 for release</HistoryEntry>
	</History>
	<Variables>
		<Variable>
			<Name>dcAvailable</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>fassignActivate</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>dcSyncOutUnit</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>abortCode</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>abortMessage</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>access</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>addInfoHighByte</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>addInfoLowByte</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>anyCsModeSupported</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>assignEeprom</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>assignObjects</Name>
			<Type>ArrayOfUInt16</Type>
		</Variable>
		<Variable>
			<Name>axisNo</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>backInitTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>backSafeOPTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>bitSize</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>boolVar</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>byteSize</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>byteVal</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>byteVal1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>cat</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>clearSMAdo</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>pdiCtrl</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>byteVar</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>cmpIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>cmpListIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>cmpSubIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>controlWord</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>count</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>data</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>defData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>defDataLen</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>escFeatures</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>escRevision</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>escType</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>expectedMode</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>fgSupported</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>fgSupportedByte0</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fgSupportedByte1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fmmuClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>fmmuSync</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>frequencyConverterBit</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>index</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>indexCount</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>int32Val</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>isPdoObject</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>isSMPdoAssignObject</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>listIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>listLen</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>mandatoryDict</Name>
			<Type>ObjectDictionary</Type>
		</Variable>
		<Variable>
			<Name>mappingObjects</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>maxSubIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>mbxReqTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>mbxResTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>multipleDevice</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>name</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>objctCnt</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>objectList</Name>
			<Type>ObjectList</Type>
		</Variable>
		<Variable>
			<Name>objectResponse</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>objectResponseLen</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>offlineDict</Name>
			<Type>ObjectDictionary</Type>
		</Variable>
		<Variable>
			<Name>offset</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>onlineDict</Name>
			<Type>ObjectDictionary</Type>
		</Variable>
		<Variable>
			<Name>optionalDict</Name>
			<Type>ObjectDictionary</Type>
		</Variable>
		<Variable>
			<Name>preOPTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>readInOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>readInPreOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>readInSafeOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>safeOPTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>servo</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>servoBit</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smAdo</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>smClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>specialListIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>specialObject</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>specialobjectList</Name>
			<Type>ObjectList</Type>
		</Variable>
		<Variable>
			<Name>statusWord</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>stepperBit</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>stepperOrFi</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>subIdx</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>subIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>subindex</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>tempListIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>tmpData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>tmpUInt16</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>tmpUInt32</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>type</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>uInt16Val</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt16Val2</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt32Val</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>writeInOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>writeInPreOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>writeInSafeOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>xmlFile</Name>
			<Type>String</Type>
		</Variable>
	</Variables>
	<EcatCmdGrps>
	</EcatCmdGrps>
	<IncludedTestFunctions>
		<FileName>EcBaseFunctions_V1i0i0.xml</FileName>
	</IncludedTestFunctions>
	<TestFunctions>
		<TestFunction Name="CheckIf402Supported" FunctionId="101">
			<?MAX_OUTPUT_ID 32?>
			<!--Description:
Check if ESI element DeviceDescr.Dictionary.Profile.ProfileNo = 402 and if stepper (1), servo (2), or frequency converter (4)

If no 402 Profile test is skippded. Otherwise following values are returned:

Return values:
- stepperOrFi
- servo-->
			<TestStep>
				<!--Check ESI element Profile[0]:ProfileNo for 402:
- if 402 go to check AddInfo
- if no Profile element go to check ChannelInfo
-if unequal 402 or 0 skip test-->
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile.Count</Value1>
						<Value2>0</Value2>
						<SkipCase Id="0">Device does not support the CiA402 drive profile (No profile supported at all in ESI file)</SkipCase>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].ProfileNo</Value1>
						<Value2>null</Value2>
						<GotoStep>CHANNEL</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].ProfileNo</Value1>
						<Value2>402</Value2>
						<WriteLine Id="1" Param0="DeviceDescr.Profile[0].ProfileNo">Device supports the CiA402 drive profile | ESI element DeviceDescr.Profile[0].ProfileNo = {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].ProfileNo</Value1>
						<Value2>402</Value2>
						<GotoStep>ADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SkipCase Id="2" Param0="DeviceDescr.Profile[0].ProfileNo">Device does not support the CiA402 drive profile | ESI element DeviceDescr.Profile[0].ProfileNo = {0}</SkipCase>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ADDINFO">
				<!--Check if element Profile[0]:AddInfo available 
- yes: check low byte
- no: set return value on default (2) and return-->
				<Description Id="3" Level="Verbose" Param0="DeviceDescr.Profile[0].AddInfo">ESI element DeviceDescr.Profile[0].AddInfo = {0}</Description>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].AddInfo</Value1>
						<Value2>null</Value2>
						<GotoStep>SERVOADDINFO</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--Check if Low Byte of AddInfo is 1 (= frequency converter), 2 (=servo), 3 (= stepper) and go to set the corresponding return value.
If AddInfoLowByte = 0xFF check also HighByte.
If another AddInfo value return an error-->
				<GetBits Source="DeviceDescr.Profile[0].AddInfo" Target="addInfoHighByte">
					<Offset>8</Offset>
					<Length>8</Length>
				</GetBits>
			</TestStep>
			<TestStep>
				<GetBits Source="DeviceDescr.Profile[0].AddInfo" Target="addInfoLowByte">
					<Offset>0</Offset>
					<Length>8</Length>
				</GetBits>
				<WriteLine Id="4" Param0="addInfoLowByte" Param1="addInfoHighByte" Level="Verbose">addInfoLowByte = {0}  ||  addInfoHighByte = {1}</WriteLine>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>1</Value2>
						<GotoStep>STEPPERORFIADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>4</Value2>
						<GotoStep>STEPPERORFIADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>#xff</Value2>
						<GotoStep>MULTIPLEDEVICE</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>2</Value2>
						<GotoStep>SERVOADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>#xFF</Value2>
						<SkipCase Id="5" Param0="addInfoLowByte" Param1="DeviceDescr.Profile[0].AddInfo">CiA402 type is 0x{0:x2} (Multiple Device Module) | INFO:  ESI element DeviceDescr.Profile[0].AddInfo = 0x{1:x4}</SkipCase>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<RaiseError Id="6" Param0="DeviceDescr.Profile[0].AddInfo">AddInfo value in ESI file is not specified by IEC61800-7. INFO: DeviceDescr.Profile[0].AddInfo = {0}</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CHANNEL">
				<!--Check ESI element Profile[0]:ChannelInfo:ProfileNo for 402:
- if 402 go to check AddInfo
- if no Profile element go to check ChannelInfo
-if unequal 402 or 0 skip test-->
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].ChannelInfo.Count</Value1>
						<Value2>0</Value2>
						<SkipCase Id="7">Device does not support the CiA402 drive profile (No profile supported at all in ESI file)</SkipCase>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo</Value1>
						<Value2>0</Value2>
						<RaiseError Id="8">ProfileNo = 0 shall not be used.</RaiseError>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo</Value1>
						<Value2>402</Value2>
						<GotoStep>CHANNELADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<SkipCase Id="9" Param0="DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo">Device does not support the CiA402 drive profile | INFO: DeviceDescr.Profile[0].ChannelInfo[0].ProfileNo = {0}</SkipCase>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CHANNELADDINFO">
				<!--Check if element Profile[0].ChannelInfo[0].AddInfo available 
- yes: check low byte
- no: set return value on default (2) and return-->
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Profile[0].ChannelInfo[0].AddInfo</Value1>
						<Value2>null</Value2>
						<GotoStep>SERVOCHANNELADDINFO</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--Check if Low Byte of Profile[0]:ChannelInfo[0]:AddInfo is 1 (= frequency converter), 2 (=servo), 3 (= stepper) and go to set the corresponding return value.
If AddInfoLowByte = 0xFF skip case.
If another AddInfo value return an error-->
				<GetBits Source="DeviceDescr.Profile[0].ChannelInfo[0].AddInfo" Target="addInfoLowByte">
					<Offset>0</Offset>
					<Length>8</Length>
				</GetBits>
			</TestStep>
			<TestStep>
				<GetBits Source="DeviceDescr.Profile[0].ChannelInfo[0].AddInfo" Target="addInfoHighByte">
					<Offset>8</Offset>
					<Length>8</Length>
				</GetBits>
				<WriteLine Id="10" Param0="addInfoLowByte" Param1="addInfoHighByte" Level="Verbose">DeviceDescr.Profile[0].ChannelInfo[0].AddInfo_L = {0}  ||  DeviceDescr.Profile[0].ChannelInfo[0].AddInfo_H = {1}</WriteLine>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>1</Value2>
						<GotoStep>STEPPERORFICHANNELADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>4</Value2>
						<GotoStep>STEPPERORFICHANNELADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>2</Value2>
						<GotoStep>SERVOCHANNELADDINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>#xff</Value2>
						<GotoStep>MULTIPLEDEVICECHANNELINFO</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>addInfoLowByte</Value1>
						<Value2>#xFF</Value2>
						<SkipCase Id="11" Param0="addInfoLowByte" Param1="DeviceDescr.Profile[0].ChannelInfo[0].AddInfo">CiA402 type is 0x{0:x2} (Multiple Device Module) | INFO:  ESI element DeviceDescr.Profile[0].ChannelInfo[0].AddInfo = 0x{1:x4}</SkipCase>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<RaiseError Id="12" Param0="DeviceDescr.Profile[0].ChannelInfo[0].AddInfo">AddInfo value in ESI file is not specified by IEC61800-7. INFO: DeviceDescr.Profile[0].ChannelInfo[0].AddInfo = {0}</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="MULTIPLEDEVICECHANNELINFO">
				<!--Return Value multipleDevice = TRUE and true-->
				<Compare>
					<NotEqual>
						<Value1>addInfoHighByte</Value1>
						<Value2>#xFF</Value2>
						<RaiseError Id="13">If Low Byte of AddInfo is 0xFF than the high byte of AddInfo also has to be 0xFF (Multiple Device)</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="multipleDevice">TRUE</SetVariable>
				<WriteLine Id="14" Level="Verbose" Param0="DeviceDescr.Profile[0].ChannelInfo[0].AddInfo">DeviceDescr.Profile[0].ChannelInfo[0].AddInfo = 0x{0:x4} | Device is a stepper motor (4) or frequency inverter (1) or Multiple Device (0xFFFF)</WriteLine>
				<WriteLine Id="15" Level="Verbose" Param0="multipleDevice">multipleDevice = {0}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="16"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="STEPPERORFICHANNELADDINFO">
				<!--Return Value stepperOrFi = TRUE and true-->
				<SetVariable Target="stepperOrFi">TRUE</SetVariable>
				<WriteLine Id="17" Level="Output" Param0="DeviceDescr.Profile[0].ChannelInfo[0].AddInfo">DeviceDescr.Profile[0].ChannelInfo[0].AddInfo = 0x{0:x2} | Device is a stepper motor (4) or frequency inverter (1)</WriteLine>
				<WriteLine Id="18" Level="Verbose" Param0="stepperOrFi">stepperOrFi = {0}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="19"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SERVOCHANNELADDINFO">
				<!--Return Value servo = TRUE and return-->
				<SetVariable Target="servo">TRUE</SetVariable>
				<WriteLine Id="20" Level="Output" Param0="DeviceDescr.Profile[0].ChannelInfo[0].AddInfo">DeviceDescr.Profile[0].AddInfo =0x[{0:x2}] | Device is a servo drive when 2 or not available because default value is 2</WriteLine>
				<WriteLine Id="21" Level="Verbose" Param0="servo">servo = {0} ("null" means not availabke)</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="22"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="MULTIPLEDEVICE">
				<!--Return Value multipleDevice = TRUE and true-->
				<Compare>
					<NotEqual>
						<Value1>addInfoHighByte</Value1>
						<Value2>#xFF</Value2>
						<RaiseError Id="23">If Low Byte of AddInfo is 0xFF than the high byte of AddInfo also has to be 0xFF (Multiple Device)</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="multipleDevice">TRUE</SetVariable>
				<WriteLine Id="24" Level="Verbose" Param0="DeviceDescr.Profile[0].AddInfo">DeviceDescr.Profile[0].AddInfo = 0x{0:x4} | Device is a stepper motor (4) or frequency inverter (1) or Multiple Device (0xFFFF)</WriteLine>
				<WriteLine Id="25" Level="Verbose" Param0="multipleDevice">multipleDevice = {0}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="26"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="STEPPERORFIADDINFO">
				<!--Return Value stepperOrFi = TRUE and true-->
				<SetVariable Target="stepperOrFi">TRUE</SetVariable>
				<WriteLine Id="27" Level="Verbose" Param0="DeviceDescr.Profile[0].AddInfo">DeviceDescr.Profile[0].AddInfo = 0x{0:x2} | Device is a stepper motor (4) or frequency inverter (1)</WriteLine>
				<WriteLine Id="28" Level="Verbose" Param0="stepperOrFi">stepperOrFi = {0}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="29"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SERVOADDINFO">
				<!--Return Value servo = TRUE and return-->
				<SetVariable Target="servo">TRUE</SetVariable>
				<WriteLine Id="30" Level="Verbose" Param0="DeviceDescr.Profile[0].AddInfo">DeviceDescr.Profile[0].AddInfo = 0x[{0:x2}] | Device is a servo drive when 2 or not available because default value is 2</WriteLine>
				<WriteLine Id="31" Level="Verbose" Param0="servo">servo = {0}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="32"></Return>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckIfFgSupported" FunctionId="102">
			<?MAX_OUTPUT_ID 14?>
			<!--Checks if object 0x6502 Supported Drive Modes is avaialbe. When yes it checks if the FG is supported.

variable:
- expectedMode (csv, csp, cst,gen)-->
			<TestStep>
				<!--Init Mbx-->
				<CallFunction>InitMailbox</CallFunction>
			</TestStep>
			<TestStep>
				<!--> SafeOp-->
				<RunToState Timeout="safeOPTimeout">
					<State>SAFEOP</State>
				</RunToState>
				<RaiseErrorOnFailure Id="0">Failed to go to SafeOP!</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<!--Set index-->
				<SetVariable Target="index">#x6502</SetVariable>
			</TestStep>
			<TestStep>
				<!--Set subIndex-->
				<SetVariable Target="subIdx">0</SetVariable>
			</TestStep>
			<TestStep>
				<!--Get 0x6502Supported Drive Modes from device-->
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>tmpData</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<WriteLine Id="1" Param0="index" Param1="subIdx" Param2="tmpData" Level="Verbose">0x{0:x4}:{1} =  {2}</WriteLine>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06010000</Value2>
						<WriteLine Id="2" Param0="index" Param1="subIdx" Param2="abortMessage">Check if Function Group is supported and test case applies not possible. Object 0x6502 Supported Drive Modes not supported | INFO: Test results of this test case only relevant if this Function Group  is supported.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06020000</Value2>
						<Return Id="3">return 06020000</Return>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06020000</Value2>
						<WriteLine Id="4" Param0="index" Param1="subIdx" Param2="abortMessage">Check if Function Group is supported and test case applies not possible. Object 0x6502 Supported Drive Modes not supported | INFO: Test results of this test case only relevant if this Function Group  is supported.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06010000</Value2>
						<Return Id="5">return 06020000</Return>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>MODE</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<RaiseError Id="6" Param0="index" Param1="subIdx" Param2="abortMessage">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: ({2}) </RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="MODE">
				<!--Check if any CS mode is supported-->
				<GetArrayItem Index="0" SourceArray="tmpData" Target="fgSupportedByte0"></GetArrayItem>
			</TestStep>
			<TestStep>
				<GetBits Source="fgSupportedByte0" Target="fgSupported">
					<Offset>7</Offset>
					<Length>1</Length>
				</GetBits>
				<Compare>
					<Equal>
						<Value1>fgSupported</Value1>
						<Value2>true</Value2>
						<WriteLine Id="7" Level="Verbose">INFO: At least one cyclic synchronous mode is supported!</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>fgSupported</Value1>
						<Value2>true</Value2>
						<GotoStep>MODE1</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<GetArrayItem Index="1" SourceArray="tmpData" Target="fgSupportedByte1"></GetArrayItem>
			</TestStep>
			<TestStep>
				<GetBits Source="fgSupportedByte1" Target="fgSupported">
					<Offset>0</Offset>
					<Length>1</Length>
				</GetBits>
				<Compare>
					<Equal>
						<Value1>fgSupported</Value1>
						<Value2>true</Value2>
						<WriteLine Id="8" Level="Verbose">INFO: At least one cyclic synchronous mode is supported!</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>fgSupported</Value1>
						<Value2>true</Value2>
						<GotoStep>MODE1</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<GetArrayItem Index="1" SourceArray="tmpData" Target="fgSupportedByte1"></GetArrayItem>
			</TestStep>
			<TestStep>
				<GetBits Source="fgSupportedByte1" Target="fgSupported">
					<Offset>1</Offset>
					<Length>1</Length>
				</GetBits>
				<Compare>
					<Equal>
						<Value1>fgSupported</Value1>
						<Value2>true</Value2>
						<WriteLine Id="9" Level="Verbose">INFO: At least one cyclic synchronous mode is supported!</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>fgSupported</Value1>
						<Value2>true</Value2>
						<GotoStep>MODE1</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--Error if no CS mode supported-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<RaiseError Id="10">ESI element "ProfileNo = 402 " indicates that device supports the CIA402 Drive Profile in conjuction with the ETG.6010 CiA402 Implementation Guide, i.e. at least on cyclic synchronouse mode (CSP; CSP; CST) shall be supported. According to the object 0x6502 Supported Drive Modes (uploaded from the slave) non of these modes is supported!</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="MODE1">
				<!--Check if this CS mode is supported-->
				<Compare>
					<Equal>
						<Value1>expectedMode</Value1>
						<Value2>CSP</Value2>
						<GotoStep>CSP</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>expectedMode</Value1>
						<Value2>CSV</Value2>
						<GotoStep>CSV</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>expectedMode</Value1>
						<Value2>CST</Value2>
						<GotoStep>CST</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CSP">
				<GetArrayItem Index="0" SourceArray="tmpData" Target="fgSupportedByte0"></GetArrayItem>
			</TestStep>
			<TestStep>
				<GetBits Source="fgSupportedByte0" Target="fgSupported">
					<Offset>7</Offset>
					<Length>1</Length>
				</GetBits>
				<WriteLine Id="11" Param0="expectedMode" Param1="fgSupported" Param2="fgSupportedByte0" Level="Verbose">FG Postion =   {1} | INFO: Expected Mode = {0} ; fgSupportedByte0 = 0x{2:x}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>CHECKSUPPORTED</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CSV">
				<GetArrayItem Index="1" SourceArray="tmpData" Target="fgSupportedByte1"></GetArrayItem>
			</TestStep>
			<TestStep>
				<GetBits Source="fgSupportedByte1" Target="fgSupported">
					<Offset>0</Offset>
					<Length>1</Length>
				</GetBits>
				<WriteLine Id="12" Param0="expectedMode" Param1="fgSupported" Param2="fgSupportedByte1" Level="Verbose">FG Velocity = {1} | INFO: Expected Mode = {0} ; fgSupportedByte1 = 0x{2:x}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>CHECKSUPPORTED</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CST">
				<GetArrayItem Index="1" SourceArray="tmpData" Target="fgSupportedByte1"></GetArrayItem>
			</TestStep>
			<TestStep>
				<GetBits Source="fgSupportedByte1" Target="fgSupported">
					<Offset>1</Offset>
					<Length>1</Length>
				</GetBits>
				<WriteLine Id="13" Param0="expectedMode" Param1="fgSupported" Param2="fgSupportedByte1" Level="Verbose">FG Torque=   {1} | INFO: Expected Mode = {0} ; fgSupportedByte1 = 0x{2:x}</WriteLine>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<GotoStep>CHECKSUPPORTED</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CHECKSUPPORTED">
				<!--Check if this mode is supported-->
				<Compare>
					<NotEqual>
						<Value1>fgSupported</Value1>
						<Value2>true</Value2>
						<SkipCase Id="14">Device dose not support this Function Group according to object 0x6502 Supported Drive Modes</SkipCase>
					</NotEqual>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWord_SwitchOnTrue" FunctionId="201">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWord_SwitchOnTrue.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>1</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>0</Offset>
					<Length>1</Length>
					<Value>CtrlWord_SwitchOnTrue.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">SwitchOn = TRUE (Bit =, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWordSwitchOnFalse" FunctionId="202">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWordSwitchOnFalse.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>0</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>0</Offset>
					<Length>1</Length>
					<Value>CtrlWordSwitchOnFalse.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">SwitchOn = FALSE (Bit 0, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWordEnableVoltageTrue" FunctionId="203">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWordEnableVoltageTrue.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>1</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>1</Offset>
					<Length>1</Length>
					<Value>CtrlWordEnableVoltageTrue.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">Voltage On = TRUE (Bit 1, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWordEnableVoltageFalse" FunctionId="204">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWordEnableVoltageFalse.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>0</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>1</Offset>
					<Length>1</Length>
					<Value>CtrlWordEnableVoltageFalse.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">Voltage On = FALSE (Bit 1, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWordEnableOperationTrue" FunctionId="205">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWordEnableOperationTrue.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>1</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>3</Offset>
					<Length>1</Length>
					<Value>CtrlWordEnableOperationTrue.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">Enable Operation = TRUE (Bit 3, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWordEnableOperationFalse" FunctionId="206">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWordEnableOperationFalse.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>0</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>3</Offset>
					<Length>1</Length>
					<Value>CtrlWordEnableOperationFalse.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">Enable Operation= FALSE (Bit 3, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWordFaultResetTrue" FunctionId="207">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWordFaultResetTrue.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>1</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>7</Offset>
					<Length>1</Length>
					<Value>CtrlWordFaultResetTrue.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">Fault Reset = TRUE (Bit 7, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CtrlWordFaultResetFalse" FunctionId="208">
			<?MAX_OUTPUT_ID 0?>
			<LocalVariables>
				<Name>CtrlWordFaultResetFalse.BitValue</Name>
				<Type>Int32</Type>
				<DefaultValue>0</DefaultValue>
			</LocalVariables>
			<TestStep>
				<SetBits Target="controlWord">
					<Offset>7</Offset>
					<Length>1</Length>
					<Value>CtrlWordFaultResetFalse.BitValue</Value>
				</SetBits>
				<WriteLine Id="0" Param0="controlWord">Fault Reset = FALSE (Bit 7, Control Word = {0:b})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadyToSwitchOnTrue" FunctionId="301">
			<?MAX_OUTPUT_ID 0?>
			<TestStep>
				<GetBits Target="readyToSwitchOn" Source="statusWord">
					<Offset>0</Offset>
					<Length>1</Length>
				</GetBits>
				<Compare>
					<NotEqual>
						<Value1>readyToSwitchOn</Value1>
						<Value2>TRUE</Value2>
						<RaiseError Id="0">Drive not yet switched on!</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckConfigurablePdoAssignObject" FunctionId="401">
			<?MAX_OUTPUT_ID 12?>
			<TestStep>
				<GetObjectList SourceDict="onlineDict" Target="specialobjectList">
					<Index>index</Index>
				</GetObjectList>
			</TestStep>
			<TestStep>
				<SetVariable Target="tempListIndex">0</SetVariable>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="listLen">specialobjectList</SizeOf>
			</TestStep>
			<TestStep Name="NextObject1">
				<GetObjectDescriptionFromList Source="specialobjectList" ListIndex="tempListIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>subIdx</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt16Val</DataVar>
					<BitLen>16</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="1" Param0="index" Param1="subIdx">Failed to upload CoE object 0x{x:4}:{1}</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<WriteLine Id="2" Param0="index" Param1="subIdx">Try to download object 0x{0:x4}:{1:d}. This should cause an abort</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="tmpUInt16">#x1000</SetVariable>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>tmpUInt16</DataVar>
				</DownloadCoEObject>
				<WarningOnSuccess Id="3" Param0="index" Param1="subIdx" Param2="tmpUInt16">Download data 0x{2:x4} to 0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 00 before</WarningOnSuccess>
			</TestStep>
			<TestStep>
				<CallFunction>WriteObjectUInt16Value</CallFunction>
			</TestStep>
			<TestStep Name="IncrementTempListIndex">
				<SetVariable Target="tempListIndex">tempListIndex+1</SetVariable>
				<Compare>
					<Lower>
						<Value1>tempListIndex</Value1>
						<Value2>listLen</Value2>
						<GotoStep>NextObject1</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="4">Object access was tested.</WriteLine>
			</TestStep>
			<TestStep>
				<CallFunction>ReadSMPDOMappingObjects</CallFunction>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<Return Id="5"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<Data>00</Data>
				</DownloadCoEObject>
				<WarningOnFailure Id="6" Param0="index">Failed to write Sync Manager PDO Assign Object {0:x4}:0 to 00 </WarningOnFailure>
				<WriteLine Id="7" Param0="index">Download object 0x{0:x4}:0 data: 00</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="int32Val">1</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal">1</SetVariable>
			</TestStep>
			<TestStep Name="NextObject2">
				<GetArrayItem Index="int32Val" SourceArray="assignObjects" Target="uInt16Val"></GetArrayItem>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>byteVal</SubIndex>
					<DataVar>uInt16Val</DataVar>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<WarningOnFailure Id="8" Param0="index" Param1="subIdx" Param2="uInt16Val" Param3="abortMessage">Failed to write Sync Manager PDO Assign Object {0:x4}:{1} to {2} ({3}) </WarningOnFailure>
				<WriteLine Id="9" Param0="index" Param1="byteVal" Param2="uInt16Val">Download object 0x{0:x4}:{1} data: {2:x4}</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="int32Val">int32Val+1</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal">byteVal+1</SetVariable>
				<Compare>
					<LowerOrEqual>
						<Value1>byteVal</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>NextObject2</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
				</DownloadCoEObject>
				<WarningOnFailure Id="10" Param0="index" Param1="maxSubIndex">Failed to write Sync Manager PDO Assign Object {0:x4}:0 to {1} </WarningOnFailure>
				<WriteLine Id="11" Param0="index" Param1="maxSubIndex" Param2="subIndex">Download object 0x{0:x4}:{2} max subindex: {1}</WriteLine>
			</TestStep>
			<TestStep>
				<WriteLine Id="12">Object access was tested successfully.</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckConfigurablePdoMappingObject" FunctionId="402">
			<?MAX_OUTPUT_ID 10?>
			<TestStep>
				<GetObjectList SourceDict="onlineDict" Target="specialobjectList">
					<Index>index</Index>
				</GetObjectList>
			</TestStep>
			<TestStep>
				<SetVariable Target="tempListIndex">0</SetVariable>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="listLen">specialobjectList</SizeOf>
			</TestStep>
			<TestStep Name="NextObject1">
				<GetObjectDescriptionFromList Source="specialobjectList" ListIndex="tempListIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>subIdx</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<BitLen>32</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="1" Param0="index" Param1="subIdx">Failed to upload CoE object 0x{x:4}:{1}</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<SetVariable Target="tmpUInt32">#x10000000</SetVariable>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>tmpUInt32</DataVar>
				</DownloadCoEObject>
				<WarningOnSuccess Id="2" Param0="index" Param1="subIdx" Param2="tmpUInt32">Download data 0x{2:x8}  to 0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 00 before</WarningOnSuccess>
				<WriteLine Id="3" Param0="index" Param1="subIdx">Try to download object 0x{0:x4}:{1:d}. This should cause an abort</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="abortMessage"></SetVariable>
			</TestStep>
			<TestStep>
				<CallFunction>WriteObjectUInt32Value</CallFunction>
			</TestStep>
			<TestStep Name="IncrementTempListIndex">
				<SetVariable Target="tempListIndex">tempListIndex+1</SetVariable>
				<Compare>
					<Lower>
						<Value1>tempListIndex</Value1>
						<Value2>listLen</Value2>
						<GotoStep>NextObject1</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>ReadPDOMappingObjects</CallFunction>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<Return Id="4"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<Data>00</Data>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<WarningOnFailure Id="5" Param0="index" Param1="abortMessage">Failed to download object 0x{0:x4}:0 data: 00  ({1})</WarningOnFailure>
				<WriteLine Id="6" Param0="index">Download object 0x{0:x4}:0 data: 00</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="abortMessage"></SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="int32Val">0</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal1">1</SetVariable>
			</TestStep>
			<TestStep Name="NextObject2">
				<GetArrayItem Index="int32Val*4" Target="uInt32Val" SourceArray="mappingObjects"></GetArrayItem>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>byteVal1</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<WarningOnFailure Id="7" Param0="index" Param1="abortMessage" Param2="byteVal1" Param3="uInt32Val">Failed to download object 0x{0:x4}:{1} data: 0x{1:x4}  ({1})</WarningOnFailure>
				<WriteLine Id="8" Param0="index" Param1="byteVal1" Param2="uInt32Val">Download object 0x{0:x4}:{1} data: {2:x8}</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="int32Val">int32Val+1</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal1">byteVal1+1</SetVariable>
				<Compare>
					<LowerOrEqual>
						<Value1>byteVal1</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>NextObject2</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<WarningOnFailure Id="9" Param0="index" Param1="abortMessage" Param2="maxSubIndex">Failed to download object 0x{0:x4}:0 data: {2:d2}  ({1})</WarningOnFailure>
				<WriteLine Id="10" Param0="index" Param1="maxSubIndex">Download object 0x{0:x4}:0 max subindex: {1}</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckIsPdoObject" FunctionId="403">
			<?MAX_OUTPUT_ID 3?>
			<TestStep>
				<Compare>
					<Lower>
						<Value1>index</Value1>
						<Value2>#x1600</Value2>
						<GotoStep>7</GotoStep>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>index</Value1>
						<Value2>#x17ff</Value2>
						<GotoStep>4</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="0" Param0="index" Param1="subIdx">Due to its index (0x{0:x4}) this object is used as RXPDO and is subject to special access rights</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="isPdoObject">true</SetVariable>
				<Compare>
					<Equal>
						<Value1>1</Value1>
						<Value2>1</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<Compare>
					<Lower>
						<Value1>index</Value1>
						<Value2>#x1a00</Value2>
						<GotoStep>7</GotoStep>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>index</Value1>
						<Value2>#x1bff</Value2>
						<GotoStep>7</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="2" Param0="index" Param1="subIdx">Due to its index (0x{0:x4}) this object is used as TXPDO and is subject to special access rights</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="isPdoObject">true</SetVariable>
				<Compare>
					<Equal>
						<Value1>1</Value1>
						<Value2>1</Value2>
						<Return Id="3"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="isPdoObject">False</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckIsSMPdoAssignObject" FunctionId="404">
			<?MAX_OUTPUT_ID 1?>
			<TestStep>
				<Compare>
					<Lower>
						<Value1>index</Value1>
						<Value2>#x1C10</Value2>
						<GotoStep>4</GotoStep>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>index</Value1>
						<Value2>#x1C2F</Value2>
						<GotoStep>4</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="0" Param0="index" Param1="subIdx">Due to its index (0x{0:x4}) this object is used as PDO assign object and is subject to special access rights</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="isSMPdoAssignObject">true</SetVariable>
				<Compare>
					<Equal>
						<Value1>1</Value1>
						<Value2>1</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="isSMPdoAssignObject">False</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckListForIndex" FunctionId="405">
			<TestStep>
				<SetVariable Target="indexCount">0</SetVariable>
			</TestStep>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="cmpListIndex">
					<Index>cmpIndex</Index>
				</GetObjectDescriptionFromList>
			</TestStep>
			<TestStep>
				<CallFunction>CompareIndexes</CallFunction>
			</TestStep>
			<TestStep>
				<SetVariable Target="cmpListIndex">cmpListIndex+1</SetVariable>
			</TestStep>
			<TestStep>
				<Compare>
					<Lower>
						<Value1>cmpListIndex</Value1>
						<Value2>count</Value2>
						<GotoStep>2</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="cmpListIndex">0</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckNotConfigurablePdoAssignObject" FunctionId="406">
			<?MAX_OUTPUT_ID 4?>
			<TestStep>
				<GetObjectList SourceDict="onlineDict" Target="specialobjectList">
					<Index>index</Index>
				</GetObjectList>
			</TestStep>
			<TestStep>
				<SetVariable Target="tempListIndex">0</SetVariable>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="listLen">specialobjectList</SizeOf>
			</TestStep>
			<TestStep Name="NextObject">
				<GetObjectDescriptionFromList Source="specialobjectList" ListIndex="tempListIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>subIdx</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt16Val</DataVar>
					<BitLen>16</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="1" Param0="index" Param1="subIdx">Failed to upload CoE object 0x{x:4}:{1}</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<WriteLine Id="2" Param0="index" Param1="subIdx">Try to download object 0x{0:x4}:{1:d}. This should cause an abort</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="tmpUInt16">#x1000</SetVariable>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>tmpUInt16</DataVar>
				</DownloadCoEObject>
				<WarningOnSuccess Id="3" Param0="index" Param1="subIdx">Download object  0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 00 before</WarningOnSuccess>
			</TestStep>
			<TestStep>
				<CallFunction>WriteObjectUInt16Value</CallFunction>
			</TestStep>
			<TestStep Name="IncrementTempListIndex">
				<SetVariable Target="tempListIndex">tempListIndex+1</SetVariable>
				<Compare>
					<Lower>
						<Value1>tempListIndex</Value1>
						<Value2>listLen</Value2>
						<GotoStep>NextObject</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="4">Object access was tested.</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckNotConfigurablePdoMappingObject" FunctionId="407">
			<?MAX_OUTPUT_ID 3?>
			<TestStep>
				<GetObjectList SourceDict="onlineDict" Target="specialobjectList">
					<Index>index</Index>
				</GetObjectList>
			</TestStep>
			<TestStep>
				<SetVariable Target="tempListIndex">0</SetVariable>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="listLen">specialobjectList</SizeOf>
			</TestStep>
			<TestStep Name="NextObject">
				<GetObjectDescriptionFromList Source="specialobjectList" ListIndex="tempListIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>subIdx</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>IncrementTempListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<BitLen>32</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="1" Param0="index" Param1="subIdx">Failed to upload CoE object 0x{x:4}:{1}</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<SetVariable Target="tmpUInt32">#x10000000</SetVariable>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>tmpUInt32</DataVar>
				</DownloadCoEObject>
				<WarningOnSuccess Id="2" Param0="index" Param1="subIdx">Download object  0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 00 before</WarningOnSuccess>
				<WriteLine Id="3" Param0="index" Param1="subIdx">Try to download object 0x{0:x4}:{1:d}. This should cause an abort</WriteLine>
			</TestStep>
			<TestStep>
				<CallFunction>WriteObjectUInt32Value</CallFunction>
			</TestStep>
			<TestStep Name="IncrementTempListIndex">
				<SetVariable Target="tempListIndex">tempListIndex+1</SetVariable>
				<Compare>
					<Lower>
						<Value1>tempListIndex</Value1>
						<Value2>listLen</Value2>
						<GotoStep>NextObject</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CompareIndexes" FunctionId="501">
			<?MAX_OUTPUT_ID 0?>
			<TestStep>
				<Compare>
					<NotEqual>
						<Value1>index</Value1>
						<Value2>cmpIndex</Value2>
						<Return Id="0"></Return>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="indexCount">indexCount+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="InitMailbox" FunctionId="601">
			<?MAX_OUTPUT_ID 1?>
			<TestStep>
				<CallTestFunction Name="Reset"></CallTestFunction>
				<RaiseErrorOnFailure Id="0">Failed to reset device</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<CallFunction>SetMbxTimeouts</CallFunction>
				<WriteLine Id="1" Param0="mbxResTimeout" Param1="mbxReqTimeout">MbxResponseTimeout:{0}   MbxRequestTimeout:{1}</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadPDOMappingObjects" FunctionId="701">
			<?MAX_OUTPUT_ID 6?>
			<TestStep>
				<SetVariable Target="mappingObjects"></SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
					<BitLen>8</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="0" Param0="index">Failed to read PDO Mapping Object 0x{0:x4}:0</RaiseErrorOnFailure>
				<WriteLine Id="1" Param0="maxSubIndex">Max SubIndex: {0}</WriteLine>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<Return Id="2"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal1">1</SetVariable>
				<WriteLine Id="3" Param0="index" Param1="subIdx" Param2="bitSize" Param3="byteSize">Object Index: 0x{0:x4} SubIndex: {1:d} BitSize:{2:d} ByteSize: {3:d}</WriteLine>
			</TestStep>
			<TestStep Name="Next">
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>byteVal1</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<BitLen>32</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="4" Param0="index" Param1="byteVal1">Failed to read data of PDO Mapping Object 0x{0:x4}:{1:d}</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<AddArrayItem TargetArray="mappingObjects">uInt32Val</AddArrayItem>
				<WriteLine Id="5" Param0="uInt32Val">Data (hex): {0:x8}</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal1">byteVal1+1</SetVariable>
				<Compare>
					<LowerOrEqual>
						<Value1>byteVal1</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>Next</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="6" Param0="mappingObjects">Mapping objects: {0:x}</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadROorRWObject" FunctionId="702">
			<?MAX_OUTPUT_ID 5?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsPdoObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isPdoObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isSMPdoAssignObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
				<WriteLine Id="1" Param0="index" Param1="subIdx" Param2="bitSize" Param3="byteSize">Try to read Object 0x{0:x4}:{1:d} BitSize:{2:d} ByteSize: {3:d}</WriteLine>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>objectResponse</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="2" Param0="index" Param1="subIdx">Failed to upload CoE object 0x{0:x4}:{1}</RaiseErrorOnFailure>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<WriteLine Id="3" Param0="index" Param1="subIdx" Param2="abortMessage">Subindex 0x{0:x4}:{1} {2}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="4" Param0="index" Param1="subIdx" Param2="abortMessage">Failed to upload 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="objectResponseLen">objectResponse</SizeOf>
				<Compare>
					<NotEqual>
						<Value1>objectResponseLen</Value1>
						<Value2>byteSize</Value2>
						<RaiseError Id="5" Param0="index" Param1="subIdx" Param2="byteSize" Param3="objectResponseLen">Invalid size of returned object 0x{0:X}, subindex {1:d}, Expected: {2:d}, Returned(bytes) : {3:d}</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="End">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadSMPDOMappingObjects" FunctionId="703">
			<?MAX_OUTPUT_ID 6?>
			<TestStep>
				<SetVariable Target="assignObjects"></SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
					<BitLen>8</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="0" Param0="index">Failed to read PDO Assign Object 0x{0:x4}:0</RaiseErrorOnFailure>
				<WriteLine Id="1" Param0="maxSubIndex">Max SubIndex: {0}</WriteLine>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<Return Id="2"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal1">1</SetVariable>
				<WriteLine Id="3" Param0="index" Param1="subIdx" Param2="bitSize" Param3="byteSize">Object Index: 0x{0:x4} SubIndex: {1:d} BitSize:{2:d} ByteSize: {3:d}</WriteLine>
			</TestStep>
			<TestStep Name="NextObject">
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>byteVal1</SubIndex>
					<DataVar>uInt16Val</DataVar>
					<BitLen>16</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="4" Param0="index" Param1="byteVal1">Failed to read data of PDO Assign Object 0x{0:x4}:{1:d}</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<AddArrayItem TargetArray="assignObjects">uInt16Val</AddArrayItem>
				<WriteLine Id="5" Param0="uInt16Val">Data: {0:x4}</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteVal1">byteVal1+1</SetVariable>
				<Compare>
					<LowerOrEqual>
						<Value1>byteVal1</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>NextObject</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="6" Param0="mappingObjects">SM PDO Assign objects: {0}</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadWOObject" FunctionId="704">
			<?MAX_OUTPUT_ID 2?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>data</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<RaiseErrorOnSuccess Id="1">Because of access rights, upload CoE object has to be aborted</RaiseErrorOnSuccess>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>#x06010001</Value2>
						<RaiseWarning Id="2" Param0="abortCode" Param1="abortMessage">unexpected SDO AbortCode: 0x{0:X}, ({1}), expected code: 0x06010001 (Attempt to read Write only object) </RaiseWarning>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="End">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="SetMbxTimeouts" FunctionId="801">
			<?MAX_OUTPUT_ID 1?>
			<TestStep>
				<SetVariable Target="mbxResTimeout">3000</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="mbxReqTimeout">1000</SetVariable>
			</TestStep>
			<TestStep>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info</Value1>
						<Value2>False</Value2>
						<Return Id="0" Param0="DeviceDescr.Info">Device:Info {0}. The default timeouts will be used</Return>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info.Mailbox</Value1>
						<Value2>False</Value2>
						<Return Id="1" Param0="DeviceDescr.Info.Mailbox">Device:Info:Mailbox {0}. The default timeouts will be used</Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="mbxResTimeout">DeviceDescr.Info.Mailbox.ResponseTimeout</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="mbxReqTimeout">DeviceDescr.Info.Mailbox.RequestTimeout</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="SetStateMachTimeouts" FunctionId="802">
			<?MAX_OUTPUT_ID 3?>
			<TestStep>
				<SetVariable Target="preOPTimeout">3000</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="safeOPTimeout">10000</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="backSafeOPTimeout">200</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="backInitTimeout">5000</SetVariable>
			</TestStep>
			<TestStep>
				<WriteLine Id="0" Level="Verbose" Param0="preOPTimeout" Param1="safeOPTimeout" Param2="backSafeOPTimeout" Param3="backInitTimeout">Default ESM timeout values | preOpTimeout = {0}ms | safeOPTimeout = {1}ms | backSafeOPTimeout = {2}ms | backInitTimeout = {3}ms</WriteLine>
			</TestStep>
			<TestStep>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info</Value1>
						<Value2>False</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info.StateMachine.Timeout</Value1>
						<Value2>False</Value2>
						<Return Id="2"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="preOPTimeout">DeviceDescr.Info.StateMachine.Timeout.PreopTimeout</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="safeOPTimeout">DeviceDescr.Info.StateMachine.Timeout.SafeopOpTimeout</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="backSafeOPTimeout">DeviceDescr.Info.StateMachine.Timeout.BackToSafeopTimeout </SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="backInitTimeout">DeviceDescr.Info.StateMachine.Timeout.BackToInitTimeout </SetVariable>
			</TestStep>
			<TestStep>
				<WriteLine Id="3" Level="Verbose" Param0="preOPTimeout" Param1="safeOPTimeout" Param2="backSafeOPTimeout" Param3="backInitTimeout">ESI ESM timeout values | preOpTimeout = {0}ms | safeOPTimeout = {1}ms | backSafeOPTimeout = {2}ms | backInitTimeout = {3}ms</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteObjectDescription" FunctionId="901">
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Name>name</Name>
					<BitSize>bitSize</BitSize>
					<Flags>
						<Access>access</Access>
					</Flags>
				</GetObjectDescriptionFromList>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteObjectUInt16Value" FunctionId="902">
			<?MAX_OUTPUT_ID 0?>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt16Val</DataVar>
				</DownloadCoEObject>
				<ReturnOnFailure Id="0"></ReturnOnFailure>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteObjectUInt32Value" FunctionId="903">
			<?MAX_OUTPUT_ID 0?>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt32Val</DataVar>
				</DownloadCoEObject>
				<ReturnOnFailure Id="0"></ReturnOnFailure>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteROObject" FunctionId="904">
			<?MAX_OUTPUT_ID 6?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsPdoObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isPdoObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isSMPdoAssignObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>data</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<WriteLine Id="1" Param0="index" Param1="subIdx">Read object 0x{0:x4}:{1}</WriteLine>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<WriteLine Id="2" Param0="index" Param1="subIdx" Param2="abortMessage">Subindex 0x{0:x4}:{1} {2}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="3" Param0="index" Param1="subIdx" Param2="abortMessage">Failed to upload 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>data</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<RaiseErrorOnSuccess Id="4">Because of access rights, download CoE object has to be aborted</RaiseErrorOnSuccess>
				<WriteLine Id="5" Param0="index" Param1="subIdx" Param2=" byteSize" Param3="bitSize">Try to write Object 0x{0:x4}:{1:d} ByteSize: {2:d} BitSize: {3:d}</WriteLine>
			</TestStep>
			<TestStep>
				<Compare>
					<!--Da ein Object in einem anderen State schreibbar sein kann, muss zuerst auf diesen Fehler getestet werden.-->
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000022</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090030</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>#x06010002</Value2>
						<RaiseError Id="6" Param0="abortCode" Param1="abortMessage">unexpected SDO AbortCode: 0x{0:X}, ({1}), expected code: 0x06010002 (Attempt to write read only object) </RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="End">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteRWObject" FunctionId="905">
			<?MAX_OUTPUT_ID 7?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
					<DefaultData>defData</DefaultData>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>index</Value1>
						<Value2>#x1010</Value2>
						<RaiseWarning Id="0">Object 0x1010 will be skipped.</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>index</Value1>
						<Value2>#x1011</Value2>
						<WriteLine Id="1">Object 0x1011 will be skipped.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>index</Value1>
						<Value2>#x1003</Value2>
						<WriteLine Id="2">Object 0x1003 will be skipped.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>index</Value1>
						<Value2>#x1003</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>index</Value1>
						<Value2>#x1010</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>index</Value1>
						<Value2>#x1011</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsPdoObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isPdoObject</Value1>
						<Value2>true</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isSMPdoAssignObject</Value1>
						<Value2>true</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>WriteObjectDescription</CallFunction>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="defDataLen">defData</SizeOf>
				<Compare>
					<NotEqual>
						<Value1>defDataLen</Value1>
						<Value2>0</Value2>
						<GotoStep>WriteDefaultData</GotoStep>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>defData</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<WriteLine Id="3" Param0="index" Param1="subIdx">Read object 0x{0:x4}:{1}</WriteLine>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<WriteLine Id="4" Param0="index" Param1="subIdx" Param2="abortMessage">Subindex 0x{0:x4}:{1} {2}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="5" Param0="index" Param1="subIdx" Param2="abortMessage">Failed to upload 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="WriteDefaultData">
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>defData</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<RaiseErrorOnFailure Id="6" Param0="abortCode" Param1="abortMessage" Param2="index" Param3="subIdx">Failed to download CoE object 0x{2:x4}:{3}. ({1}) </RaiseErrorOnFailure>
				<WriteLine Id="7" Param0="index" Param1="subIdx">Write object 0x{0:x4}:{1}</WriteLine>
			</TestStep>
			<TestStep Name="IncrementListIndex">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteWOObject" FunctionId="906">
			<?MAX_OUTPUT_ID 5?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<DefaultData>defData</DefaultData>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>EmptyString</Value2>
						<WriteLine Id="0" Param0="type">DataType {0}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>DT0000</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="defDataLen">defData</SizeOf>
				<Compare>
					<Equal>
						<Value1>defDataLen</Value1>
						<Value2>0</Value2>
						<Return Id="1" Param0="index" Param1="subIdx">Can not test the access of object 0x{0:x4}:{1}, because no default data is defined.</Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>defData</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<RaiseErrorOnFailure Id="2" Param0="abortCode" Param1="abortMessage" Param2="index" Param3="subIdx">Failed to download CoE object 0x{2:x4}:{3}. ({1}) </RaiseErrorOnFailure>
				<WriteLine Id="3" Param0="index" Param1="subIdx">Write object 0x{0:x4}:{1}</WriteLine>
				<Compare>
					<NotEqual>
						<Value1>index</Value1>
						<Value2>cmpIndex</Value2>
						<RaiseError Id="4" Param0="index" Param1="cmpIndex">Failed to write WO object. Received index: 0x{1:X} expected response 0x{0:X}</RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>index</Value1>
						<Value2>cmpIndex</Value2>
						<RaiseError Id="5" Param0="subIdx" Param1="cmpSubIndex">Failed to write WO object. Received SubIndex: 0x{1:X} expected response 0x{0:X}</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="End">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
	</TestFunctions>
	<TestGroups>
		<TestGroup Name="General Objects available in online OD" GroupId="1">
			<Comment>Checks if mandatory and recommended objects are available.
Test Group applies for CiA402 stepper, servo, and frequency inverter devices</Comment>
			<TestCase Name="General mandatory Objects Available" CaseId="1">
				<?MAX_OUTPUT_ID 13?>
				<Comment>Info: Try to read all general mandatory CiA402 objects which shall always be supported\nError: If one of the mandatory objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each mandatory CiA402 Object from the online OD</Action>
					<PostCondition>Error if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_gen.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--CheckIf402Supported and if servo or stepper/Fi-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<Equal>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<GotoStep>PERFORM</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>stepperOrFi</Value1>
							<Value2>TRUE</Value2>
							<GotoStep>PERFORM</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>multipleDevice</Value1>
							<Value2>FALSE</Value2>
							<SkipCase Id="1"></SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="PERFORM">
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Get list of all general objects from file-->
					<GetObjectDictionary Target="mandatoryDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of mandatory objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="mandatoryDict">
						<SubIdx>-1</SubIdx>
						<Flags>
							<Category>m</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no mandatory objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of general mandatory objects: {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<RaiseErrorOnFailure Id="10" Param0="index" Param1="subIdx">Failed: CoE Service | Info: CoE Upload Service of object 0x{0:x4}:{1}</RaiseErrorOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<RaiseError Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</RaiseError>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Success-->
					<WriteLine Id="13" Level="Success" Param0="axisNo">SUCCESSFULL | All objects for the object group are supported by axis {0}!</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="General recommended Objects Available" CaseId="2">
				<?MAX_OUTPUT_ID 12?>
				<Comment>Info: Try to read all general optional CiA402 objects which may be supported\nWarning: If one of the recommended objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each recommended CiA402 Object from the online OD.</Action>
					<PostCondition>Info if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_gen.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--CheckIf402Supported if and servo or stepper/Fi-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<Equal>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<GotoStep>PERFORM</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>stepperOrFi</Value1>
							<Value2>TRUE</Value2>
							<GotoStep>PERFORM</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>multipleDevice</Value1>
							<Value2>FALSE</Value2>
							<SkipCase Id="1"></SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="PERFORM">
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Get list of all general objects from file-->
					<GetObjectDictionary Target="optionalDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of optional objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="optionalDict">
						<SubIdx>-1</SubIdx>
						<Flags>
							<Category>o</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no recommende objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of recommended objects: {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
						<Flags>
							<Category>cat</Category>
						</Flags>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<ReturnOnFailure Id="10" Param0="index" Param1="subIdx">Failed to upload recommended CoE object 0x{0:x4}:{1}</ReturnOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<RaiseWarning Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</RaiseWarning>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="FG Position objects available in online OD" GroupId="2">
			<Comment>Checks if mandatory and recommended objects for FG Position are available.
Test Group applies for CiA402 servo drives.</Comment>
			<TestCase Name="Mandatory Objects Available for FG Position" CaseId="1">
				<?MAX_OUTPUT_ID 13?>
				<Comment>Info: Try to read all mandatory CiA402 objects which are mandatory when FG Position is supported\nError: If one of the mandatory objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each CiA402 object mandatory when FG Postion is supported from the online OD.</Action>
					<PostCondition>Error if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--CheckIf402Supported and if servo or not-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<NotEqual>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<SkipCase Id="1"></SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_csp.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Expected Mode = CSP-->
					<SetVariable Target="expectedMode">CSP</SetVariable>
				</TestStep>
				<TestStep>
					<!--CheckIfFgSupported-->
					<CallFunction>CheckIfFgSupported</CallFunction>
				</TestStep>
				<TestStep>
					<!--Get list of all FG Pos objects from file-->
					<GetObjectDictionary Target="mandatoryDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of mandatory objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="mandatoryDict">
						<SubIdx>-1</SubIdx>
						<Flags>
							<Category>m</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no mandatory objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of mandatory objects: {0:d}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<RaiseErrorOnFailure Id="10" Param0="index" Param1="subIdx">Failed to upload mandatory CoE object 0x{0:x4}:{1}</RaiseErrorOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<RaiseError Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</RaiseError>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Success-->
					<WriteLine Id="13" Level="Success" Param0="axisNo">SUCCESSFULL | All objects for the object group are supported by axis {0}!</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Recommended Objects Available for FG Position" CaseId="2">
				<?MAX_OUTPUT_ID 12?>
				<Comment>Info: Try to read all optional CiA402 objects which are optional when FG Position is supported\nWarning: If one of the optional objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each CiA402 object recommended when FG Postion is supported from the online OD.</Action>
					<PostCondition>Info if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--CheckIf402Supported and if servo or not-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<NotEqual>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<SkipCase Id="1"></SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_csp.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Expected Mode = CSP-->
					<SetVariable Target="expectedMode">CSP</SetVariable>
				</TestStep>
				<TestStep>
					<!--CheckIfFgSupported-->
					<CallFunction>CheckIfFgSupported</CallFunction>
				</TestStep>
				<TestStep>
					<!--Get list of all FG Pos objects from file-->
					<GetObjectDictionary Target="optionalDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of optional objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="optionalDict">
						<SubIdx>-1</SubIdx>
						<Flags>
							<Category>o</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no recommende objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of recommended objects: {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<ReturnOnFailure Id="10" Param0="index" Param1="subIdx">Failed to upload recommended CoE object 0x{0:x4}:{1}</ReturnOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<RaiseWarning Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</RaiseWarning>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="FG Velocity available available in online OD" GroupId="3">
			<Comment>Checks if mandatory and recommended objects for FG Velocity are available.
Test Group applies for CiA402 servo drives.</Comment>
			<TestCase Name="Mandatory Objects Available for FG Velocity" CaseId="1">
				<?MAX_OUTPUT_ID 13?>
				<Comment>Info: Try to read all mandatory CiA402 objects which are mandatory when FG Velocity is supported\nError: If one of the mandatory objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each CiA402 object mandatory when FG Velocity is supported from the online OD.</Action>
					<PostCondition>Error if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--CheckIf402Supported and if servo or not-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<NotEqual>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<SkipCase Id="1"></SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_csv.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Expected Mode = CSV-->
					<SetVariable Target="expectedMode">CSV</SetVariable>
				</TestStep>
				<TestStep>
					<!--CheckIfFgSupported-->
					<CallFunction>CheckIfFgSupported</CallFunction>
				</TestStep>
				<TestStep>
					<!--Get list of all FG Vel objects from file-->
					<GetObjectDictionary Target="mandatoryDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of mandatory objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="mandatoryDict">
						<SubIdx>-1</SubIdx>
						<Flags>
							<Category>m</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no mandatory objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of mandatory objects: {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<RaiseErrorOnFailure Id="10" Param0="index" Param1="subIdx">Failed to upload mandatory CoE object 0x{0:x4}:{1}</RaiseErrorOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<RaiseError Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</RaiseError>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Success-->
					<WriteLine Id="13" Level="Success" Param0="axisNo">SUCCESSFULL | All objects for the object group are supported by axis {0}!</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Recommended Objects Available for FG Velocity" CaseId="2">
				<?MAX_OUTPUT_ID 12?>
				<Comment>Info: Try to read all optional CiA402 objects which are optional when FG Velocity is supported\nWarning: If one of the mandatory objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each CiA402 object recommended when FG Velocity is supported from the online OD.</Action>
					<PostCondition>Info if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--CheckIf402Supported and if servo or not-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<NotEqual>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<SkipCase Id="1"></SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_csv.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Expected Mode = CSV-->
					<SetVariable Target="expectedMode">CSV</SetVariable>
				</TestStep>
				<TestStep>
					<!--CheckIfFgSupported-->
					<CallFunction>CheckIfFgSupported</CallFunction>
				</TestStep>
				<TestStep>
					<!--Get list of all FG Vel objects from file-->
					<GetObjectDictionary Target="optionalDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of mandatory objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="optionalDict">
						<SubIdx>-1</SubIdx>
						<Flags>
							<Category>o</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no recommende objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of recommended objects: {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<ReturnOnFailure Id="10" Param0="index" Param1="subIdx">Failed to upload recommended CoE object 0x{0:x4}:{1}</ReturnOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<RaiseWarning Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</RaiseWarning>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="FG Torque objects available in online OD" GroupId="4">
			<Comment>Checks if mandatory and recommended objects for FG Torque are available.
Test Group applies for CiA402 servo drives.</Comment>
			<TestCase Name="Mandatory Objects Available for FG Torque" CaseId="1">
				<?MAX_OUTPUT_ID 13?>
				<Comment>Info: Try to read all mandatory CiA402 objects which are mandatory when FG Torque is supported\nError: If one of the mandatory objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each CiA402 object mandatory when FG Torque is supported from the online OD.</Action>
					<PostCondition>Error if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--CheckIf402Supported and if servo or not-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<NotEqual>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<SkipCase Id="1"></SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_cst.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Expected Mode = CST-->
					<SetVariable Target="expectedMode">CST</SetVariable>
				</TestStep>
				<TestStep>
					<!--CheckIfFgSupported-->
					<CallFunction>CheckIfFgSupported</CallFunction>
				</TestStep>
				<TestStep>
					<!--Get list of FG Torque objects from file-->
					<GetObjectDictionary Target="mandatoryDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of mandatory objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="mandatoryDict">
						<SubIdx>-1</SubIdx>
						<Flags>
							<Category>m</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no mandatory objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of mandatory objects: {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<RaiseErrorOnFailure Id="10" Param0="index" Param1="subIdx">Failed to upload mandatory CoE object 0x{0:x4}:{1}</RaiseErrorOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<RaiseError Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</RaiseError>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Success-->
					<WriteLine Id="13" Level="Success" Param0="axisNo">SUCCESSFULL | All objects for the object group are supported by axis {0}!</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Recommended Objects Available for FG Torque" CaseId="2">
				<?MAX_OUTPUT_ID 12?>
				<Comment>Info: Try to read all optional CiA402 objects which are optional when FG Torque is supported\nWarning: If one of the mandatory objects is missing</Comment>
				<Description>
					<PreCondition>Device in PreOp</PreCondition>
					<Action>Try to read each CiA402 object recommended when FG Torque is supported from the online OD.</Action>
					<PostCondition>Info if one oject is not available</PostCondition>
					<ProposalForSolution>Support the missing object</ProposalForSolution>
					<TestsToPassBefore>
						<ID></ID>
					</TestsToPassBefore>
					<References>
						<Reference Specification="- IEC61800-7 - ETG.6010 CiA402 Implementation Guide"></Reference>
					</References>
					<Mandatory>false</Mandatory>
				</Description>
				<TestStep>
					<!--CheckIf402Supported and if servo or not-->
					<Description Id="0" Level="Output">Evaluate Profile Information of ESI file</Description>
					<CallFunction>CheckIf402Supported</CallFunction>
					<Compare>
						<NotEqual>
							<Value1>servo</Value1>
							<Value2>TRUE</Value2>
							<SkipCase Id="1"></SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init ESM Timouts-->
					<CallFunction>SetStateMachTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="2" Level="Verbose">Reset DuT. Skip test case if DuT is not connected to CTT.</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CoE Mbx Communcation supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>False</Value2>
							<SkipCase Id="3">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>False</Value2>
							<SkipCase Id="4">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init axisNo-->
					<SetVariable Target="axisNo">1</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init object dictionary file-->
					<SetVariable Target="xmlFile">ObjectDictionaries\OD-4001_MandObj_CiA402_cst.xml</SetVariable>
				</TestStep>
				<TestStep>
					<!--Expected Mode = CST-->
					<SetVariable Target="expectedMode">CST</SetVariable>
				</TestStep>
				<TestStep>
					<!--CheckIfFgSupported-->
					<CallFunction>CheckIfFgSupported</CallFunction>
				</TestStep>
				<TestStep>
					<!--Get list of FG Torque objects from file-->
					<GetObjectDictionary Target="optionalDict">
						<FromXmlFile>xmlFile</FromXmlFile>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline offlineDictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Get list of mandatory objects from file-->
					<GetObjectList Target="objectList" Count="count" SourceDict="optionalDict">
						<Index>1</Index>
						<Flags>
							<Category>o</Category>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="6">For this object group no recommended objects are specified -&gt; skip test</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="7" Param0="count">Number of recommended objects: {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init Mbx-->
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init Index-->
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<!--Get Object from List for comparison-->
					<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<BitSize>bitSize</BitSize>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep>
					<!--ACTION-->
					<WriteLine Id="9" Param0="index" Param1="subIdx" Level="Output">ACTION: Try to read next object 0x{0:x}:{1}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Get Object from online OD and compare-->
					<UploadCoEObject>
						<Index>index</Index>
						<SubIndex>subIdx</SubIndex>
						<DataVar>tmpData</DataVar>
						<BitLen>bitSize</BitLen>
						<AbortCode>abortCode</AbortCode>
						<AbortMessage>abortMessage</AbortMessage>
					</UploadCoEObject>
					<ReturnOnFailure Id="10" Param0="index" Param1="subIdx">Failed to upload recommended CoE object 0x{0:x4}:{1}</ReturnOnFailure>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<WriteLine Id="11" Param0="index" Param1="subIdx" Param2="abortMessage" Param3="abortCode">Failed to upload 0x{0:x4}:{1:d} | CoE Abort Msg: {2} | Abort Code =  {3:x4}</WriteLine>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Ouput result-->
					<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="tmpData" Level="Success">Successful: Upload of 0x{0:x4}:{1} | Data = {2}</WriteLine>
				</TestStep>
				<TestStep Name="IncrementIndex">
					<!--go for next object-->
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
		</TestGroup>
	</TestGroups>
</EtherCATTest>