<?xml version="1.0" encoding="UTF-8" standalone="yes"?><EtherCATTest Name="TF-1201 ESM - Explicit Device Identification" xsi:noNamespaceSchemaLocation="EtherCATTest.xsd" SchemaVersion="1.0.31" TestId="4609" TestVersion="1.3.0" RealeaseState="Released" TestVendorId="1" Url="http://www.ethercat.org/en/conformance.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<Comment>****** ID value = 0x0005 ******
For test performance the ExplicitDeviceId has to be set to the hexadecimal value 0x0005. Therefore also slaves with only 4 Bit value range of the Explicit Device ID value can be tested. The ID value shall be loaded from the DIP switch with each ID Request.


****** Tests the Request ID mechanism specified by the Explicit Device Identifcation ******
For all state requests (i.e. a state change is requested by the master) the Explicite Device Identifcation Value is requested by setting the ID Request Bit (0x120:05) to 1. If the state request is possible without error (i.e. 0x0130.4 = 0) then the Explicit Device Identifcation Value shall be loaded to the register AL Status Code (0x0134:0x0135) and the ID Flag shall be set to 1 (register 0x0130.5)
If the state request results in an Error (i.e. register 0x0130.4 = 1) the Explicit Identifcation Value shall not be loaded and the ID Flag shall not be set. Then the ErrofFlag (0x130.4) shall be set to 1 and the AL Status Code shall be written to the AL Status Code register (0x0134).

The Requesting ID mechanism is specified in ETG.1000-6, clause 6 AL State machine. ETG.1020, clause "Explcit Device Identification" described the mechanism for better understanding.
This test file is based on the TF-1200_ESM test file. In addition to the state requests made in TF-1200 it sets the IdReq flag.

****** Abbreviations used in the test description ******
ID Value = Excplicit Identification ID value (value latched from e.g. a ID dip switch and copied to register 0x0134)
idReq = ID Request (register bit 0x0120:05)
IdFlag = ID Loaded (register bit 0x0130.05)</Comment>
	<History>
		<HistoryEntry Editor="FH" TestVersion="0.9.3" Id="" Date="2012-02-09">Initial Release: a) TF-1200 ESM Tests enhanced with ID Requesting b) Test for use of different Explicit Device ID mechanisms</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="0.9.3" Id="TF-1201_120221_1" Date="2012-02-21">_Where: #22.2A
_Description: If the DuT confirms a state request with 0x02 from Al State 0x14 the test returns an error. This is to strict according to TAB.
_Solution: Return warning.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.0" Id="" Date="2012-05-31">Initial release</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.1" Id="TF-1201-121031_1" Date="2012-10-31">_Where: #25.1
_Description: Check if DeviceEmulation = TRUE missing
_Solution: Check if DeviceEmulation = 1 then skip test</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.1" Id="TF-1201-121031_2" Date="2012-10-31">_Where: All TC which send frames to the DuT: TG1-4; TC 5-1
_Description: 
- Added external test function "Reset" with additional check: If slave is offline this test cases is skipped.
- Add Reference to "EcBaseFunctions.xml" (including basic test functions)
- Reset function removed from local testfunction list</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.0.1" Id="EX-1201-121113_1" Date="2012-11-13">_Where: Test Case 1-2 (#1.2A)
_Description: register 0x0120 is written with 32 bit width. According to ETG.1000 it is 16 bit.
_Solution: Correct write access width to 16bit</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.2" Id="TF-1201-130322" Date="2013-03-22">_Where: #2-8, #4-4
_Description: Slave was not reset before starting test
_Solution: Reset DuT before starting test</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.2" Id="TF-1201-130325" Date="2013-03-25">_Where: #2-8, #4-4
_Description: Slave was not reset before  starting second part of test
_Solution: Reset DuT before second part of test</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.3" Id="TF-1201-130325" Date="2013-06-14">_Where: #5, TG-1-10
_Description: During state change to Boot with Request 0x23 the ID Request shall be ignored. However, the test expected the ID Flag set in register 0x130.
_Solution: Expect AL Status = 0x03</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.4" Id="TF-1201-131108" Date="2013-11-08">_Where: #5, TG-1-10
_Description: Variable "StateValue" in RequestState-Action has invalid type of UINT16.
_Solution: make INT32</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.5" Id="TF-1201_140611_1" Date="2014-06-11">Replace SetStateMachTimeouts  with SetEsmTimeouts (same as in TF-1200). No functional change</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.5" Id="TF-1201_140611_2" Date="2014-06-11">Add TestSettingsVarbiables and included test controller for test settings</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.5" Id="TF-1201_140611_3" Date="2014-06-11">Replace locacl Reset function with global Reset function (which includes checking if device is offline)</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.5" Id="TF-1201_140611_3" Date="2014-06-11">Replaced local logic by global function "SkipTestIfDeviceEmulationActive"</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.5" Id="TF-1201_140611_3" Date="2014-06-11">Replaced local logic by global function "SkipTestIfDeviceEmulationActive"</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.5" Id="TF-1201_140611_3" Date="2014-06-11">Replaced local logic by global function "SkipTestIfDcOnly"</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.1.5" Id="TF-1201_141128_1" Date="2014-11-28"> Test Group Op to Any: Replaced "SkipTestIfDcOnly" with SkipTestIfCurrentConfigRequiresDcAndNoCu</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.1.5" Id="TF-1201_141128_2" Date="2014-11-28">Remove SkipTestIfDcOnly from #1.1</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.1.6" Date="2015-03-13">Alighn with TF-1200</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.1.7" Date="2015-03-13">_Where: TG5
_Description: Replace CheckIfDeviceEmulation activate with external function</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.8" Date="2015-03-19" Type="Enhancement">_Where: #5,#6,#7
_Description: fix check for Bootstrap supported</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.9" Date="2015-03-24" Type="Enhancement">Align with TF-1200 V1.1.45</HistoryEntry>
		<HistoryEntry Editor="FE" TestVersion="1.1.9" Date="2015-09-01" Type="Enhancement">Update to Schema Version 1.0.23</HistoryEntry>
		<HistoryEntry Editor="FE" TestVersion="1.1.11" Date="2015-11-03" Type="Enhancement">Several typos fixed</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.12" Date="2016-01-22" Type="Enhancement">Align with TF-1200 V1.1.50</HistoryEntry>
		<HistoryEntry Editor="BL" TestVersion="1.1.13" Date="2016-02-17" Id="EN_TF_1201_160217" Type="Enhancement">Update to Schema version 1.0.24</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.14" Date="2016-05-24" Type="Enhancement">Align with TF-1200 V1.1.52</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.15" Date="2016-07-05" Type="Enhancement">Align with TF-1200 V1.1.54</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.1.16" Date="2016-07-05">Release version</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.2" Date="2016-11-15" Type="Bug">_Where: TF-1201-5-1
_Description: DuT was set to PREOP even though test should be performed in INIT
_Solution: Remove PREOP-Request</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.2" Date="2017-12-15" Type="Enhancement">Align with TF-1200 V1.2.6 (also see comments for updates)</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.3" Date="2017-12-19" Type="Bug">ConfiguredStationAlias value: use correct parameter in ReturnErrorIfCurrentConfigRequiresDcAndNoCu after changing function</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.3" Date="2017-12-19" Type="Bug">ConfiguredStationAlias value: AssignPdiAccessTo ECAT</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.4" Date="2018-01-22" Type="Bug">Align with updates in TF-1200 V1.2.10</HistoryEntry>
		<HistoryEntry Editor="DO" TestVersion="1.2.6" Date="2018-09-07" Type="Enhancement">Changed Settings user control path to components name</HistoryEntry>
		<HistoryEntry Editor="BL" TestVersion="1.2.7" Date="2018-09-14">Add output IDs and update Schema version to 1.0.31</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.8" Date="2018-09-19" Type="Enhancement">Align with updates in TF-1200 V1.2.14</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.8" Date="2018-11-09" Type="Enhancement">Align with updates in TF-1200 V1.2.15</HistoryEntry>
		<HistoryEntry TestVersion="1.2.9" Date="2018-11-12" Editor="F.L." Type="Enhancement">TestGroup 4, TestCase 8, WriteLine 14: Changed Param2 to Param0. TestGroup 4, TestCase 9, WriteLine 12: Changed Param2 to Param0.</HistoryEntry>
		<HistoryEntry Editor="FH" TestVersion="1.2.10" Date="2019-01-23" Type="Enhancement">Align with updates in TF-1200 V1.2.18 (unknown SyncManager types in #17 and #45 (skipped in TF-1201)</HistoryEntry>
		<HistoryEntry Date="2019-05-02" Editor="FE" TestVersion="1.2.11" Type="Enhancement">Set version to 1.3.0 for release</HistoryEntry>
	</History>
	<TestVariables>
		<TestVariable>
			<Name>t_preopTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>3000</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>Settings.bAll_debugMsg</Name>
			<Type>Bool</Type>
			<DefaultValue>false</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>Settings.b04_10_WarningAccepted</Name>
			<Type>Bool</Type>
			<DefaultValue>false</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>Settings.bAll_esm_overwriteTimeouts</Name>
			<Type>Bool</Type>
			<DefaultValue>false</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>Settings.int32_all_esm_preOPTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>3000</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>Settings.int32_all_esm_safeOPTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>10000</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>Settings.int32_all_esm_backSafeOPTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>200</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>Settings.int32_all_esm_backInitTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>5000</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>bool_tf1201</Name>
			<Type>Bool</Type>
			<DefaultValue>true</DefaultValue>
		</TestVariable>
		<TestVariable>
			<Name>uint32_idValue</Name>
			<Type>UInt32</Type>
			<DefaultValue>5</DefaultValue>
		</TestVariable>
	</TestVariables>
	<Variables>
		<Variable>
			<Name>byteAssignToEcat</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>bSkipPartOfTest</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>bAssignToPdi</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>uint16ArrayExpectedAlStatusCodes</Name>
			<Type>ArrayOfUInt16</Type>
		</Variable>
		<Variable>
			<Name>bMakeWdTestFail</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>uint32_lengthOfList</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_sizeOfAllPdSm</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint64_wdPdTime</Name>
			<Type>Int64</Type>
		</Variable>
		<Variable>
			<Name>uint64_wdPdInclJitter.settings</Name>
			<Type>Int64</Type>
		</Variable>
		<Variable>
			<Name>uint64_wdPdPlusBackToSafeopTimeout</Name>
			<Type>Int64</Type>
		</Variable>
		<Variable>
			<Name>int32_backToSafeopTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>a</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>b</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>c</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>lastPdSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>AckFlag</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>aInputData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>alControl</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>alEventRequestReg</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>alEventRequestReg.SmActChg</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>allEnabledInputSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allEnabledOutputSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allEnabledPdSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allEnabledSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allInputSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allOutputSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allPdSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allSm</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>allSmRegisters</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>alStatus</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>alStatus.Code</Name>
			<Type>ArrayOfUInt16</Type>
		</Variable>
		<Variable>
			<Name>alStatusCode</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>alStatusCode1</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>alStatusCode2</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>assignActivate</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>assignToEcat</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>assignToPdi</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>backInitTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>backSafeOPTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>bool</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>boolVar</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>byte</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>byte_opModeNo</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>byteVar</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>byteVar1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>bWarning</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>dcActivation</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>dcAvailable</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>dcSyncOut</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>dcSyncOutUnit</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>defaultPdLength</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>defaultPdoLength</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>devEm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>enabledInputSmCount</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>enabledOutputSmCount</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>enabledPdSmCount</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>enabledSmCount</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>errAck</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>escFeatures</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>escRevision</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>escType</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>expectedAlStatusCode</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>expectedAlStatusCode2</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>expectedAlStatusCode3</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>faInputData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>falControl</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>falControlErrorFlag</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>falStatus</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>falStatusCode</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>farraySize</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fassignActivate</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>fbyteVar</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fescFeatureReg</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fexpectedAlStatusCode2</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>fexpectedAlStatusCode3</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>ffirstDcOpMode</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>ffirstDcOpModeNo</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>firstInputSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>firstOutputSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fmmuClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>fmmuSync</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>fopModeCounter</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fpdiCntrlSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fpdiCntrlSmActivation</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>fpdiControlSm0</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fpdiControlSm1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fpdiControlSm2</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fpdiControlSm3</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fsm0Deactivated</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>fsm1Deactivated</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>fsm2Deactivated</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>fsm3Deactivated</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>fuInt32Var</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>index</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>index32</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>index8</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>initArray</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>inputSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>inputSmCount</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>inputSmEnable</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>inputSyncMan</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>inputSyncManDisabled</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>int32</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>mbxProtocolSupported</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>mbxSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>noEnabledInputSm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noEnabledOutputSm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noEnabledPdSm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noEnabledSm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noInputs</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noInputSm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noOutputs</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noOutputSm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>noPdSm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>nullByte</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>nullWord</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>offset</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>otherSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>outputSmCount</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>outputSmEnable</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>outputSyncMan</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>pdiCntrlSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>pdiCntrlSmActivation</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>pdiCtrl</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>pdSm</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>pdSmCount</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>preOPTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>safeOPTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>skipTestCase</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>SM0Length</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>SM0StartAddress</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>SM1Length</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>SM1StartAddress</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>sm2Control</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>sm2Deactivate</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>sm3Control</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>sm3Deactivate</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smActivate</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smActivateInt</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smAdo</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>smClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>smControl</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smControlType</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smCount</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>smDeactivate</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smDirection</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smDirection2Bit</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smDisabled</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smEnable</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smNo</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smNumber</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smOperationMode2Bit</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smSettings</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>smStartAddress</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>smStartAddressWrong</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>smText</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>smType</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>smVirtual</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>stateValue</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>stateValueNext</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt16</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uint16_dcActivation</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uint16_dcLatchCfg</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uint16_wdDiv</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uint16_wdPd</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt16Val</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt16Var</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt32</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_dcStartTimeHigh</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_dcStartTimeLow</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_dcSync0CycleTime</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_dcSync1CycleTime</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_dcSysTimeDelay</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_dcSysTimeHigh</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint32_dcSysTimeLow</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uInt32Val</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uInt32Var</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>uint64_dcStartTime</Name>
			<Type>UInt64</Type>
		</Variable>
		<Variable>
			<Name>uint64_dcSysTime</Name>
			<Type>UInt64</Type>
		</Variable>
		<Variable>
			<Name>uint64_dcSysTimeDiff</Name>
			<Type>UInt64</Type>
		</Variable>
		<Variable>
			<Name>uint64_dcSysTimeHigh</Name>
			<Type>UInt64</Type>
		</Variable>
		<Variable>
			<Name>uint64_dcSysTimeLow</Name>
			<Type>UInt64</Type>
		</Variable>
		<Variable>
			<Name>uint64_dcSysTimeOffset</Name>
			<Type>UInt64</Type>
		</Variable>
		<Variable>
			<Name>uint64_wdPdInclJitter</Name>
			<Type>UInt64</Type>
		</Variable>
		<Variable>
			<Name>uint16_stationAlias</Name>
			<Type>UInt16</Type>
		</Variable>
	</Variables>
	<TestUserControl>CttTestUserControl.TF12xx_Settings.TestSettingsUserControl</TestUserControl>
	<IncludedTestFunctions>
		<FileName>EcBaseFunctions_V1i0i0.xml</FileName>
		<FileName>BF-12xx_V1i0i0_EsmBaseFunctions.xml</FileName>
	</IncludedTestFunctions>
	<TestFunctions>
		<TestFunction Name="SetEsmTimeouts" FunctionId="101">
			<?MAX_OUTPUT_ID 2?>
			<TestStep Name="SetPreOpTimeout">
				<CallTestFunction Name="SetPreOpTimeout">
					<Parameter>Settings.bAll_debugMsg</Parameter>
					<OutParameter>preOPTimeout</OutParameter>
				</CallTestFunction>
			</TestStep>
			<TestStep Name="SetSafeOpTimeout">
				<CallTestFunction Name="SetSafeOpTimeout">
					<Parameter>Settings.bAll_debugMsg</Parameter>
					<OutParameter>safeOPTimeout</OutParameter>
				</CallTestFunction>
			</TestStep>
			<TestStep Name="SetBackSafeOpTimeout">
				<CallTestFunction Name="SetBackSafeOpTimeout">
					<Parameter>Settings.bAll_debugMsg</Parameter>
					<OutParameter>backSafeOPTimeout</OutParameter>
				</CallTestFunction>
			</TestStep>
			<TestStep Name="SetBackInitTimeout">
				<CallTestFunction Name="SetBackInitTimeout">
					<Parameter>Settings.bAll_debugMsg</Parameter>
					<OutParameter>backInitTimeout</OutParameter>
				</CallTestFunction>
			</TestStep>
			<TestStep Name="WriteTimeoutsToLogger">
				<WriteLine Id="0" Level="Verbose" Param0="preOPTimeout" Param1="safeOPTimeout" Param2="backSafeOPTimeout" Param3="backInitTimeout">ESM timeouts in [ms] | preOPTimeout = {0} | safeOPTimeout = {1} | backSafeOPTimeout = {2} | backInitTimeout = {3}</WriteLine>
			</TestStep>
			<TestStep Name="CHECK_IF_TIMEOUTS_OVERWRITTEN_BY_SETTINS">
				<Compare>
					<Equal>
						<Value1>Settings.bAll_esm_overwriteTimeouts</Value1>
						<Value2>false</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="overwrite_preOPTimeout">
				<!--Set ESI timeout values

Init-> PreOp
Boot->Init-->
				<SetVariable Target="preOPTimeout">Settings.int32_all_esm_preOPTimeout</SetVariable>
			</TestStep>
			<TestStep Name="overwrite_safeOPTimeout">
				<!--SafeOp -> Op
PreOp -> SafeOp-->
				<SetVariable Target="safeOPTimeout">Settings.int32_all_esm_safeOPTimeout</SetVariable>
			</TestStep>
			<TestStep Name="overwrite_backSafeOPTimeout">
				<!--Op -> Safeop-->
				<SetVariable Target="backSafeOPTimeout">Settings.int32_all_esm_backSafeOPTimeout</SetVariable>
			</TestStep>
			<TestStep Name="overwrite_backInitTimeout">
				<!--Op/SafeOp->Init
SafeOp->Preop-->
				<SetVariable Target="backInitTimeout">Settings.int32_all_esm_backInitTimeout</SetVariable>
				<Compare>
					<Equal>
						<Value1>Settings.bAll_debugMsg</Value1>
						<Value2>true</Value2>
						<WriteLine Id="2" Param0="Settings.int32_all_esm_preOPTimeout" Param1="Settings.int32_all_esm_safeOPTimeout" Param2="Settings.int32_all_esm_backSafeOPTimeout" Param3="Settings.int32_all_esm_backInitTimeout">ESM Timeouts (partly) overwritten by settings dialog value | preOPTimeout = {0} | safeOPTimeout  (S&gt;O, P &gt; S) = {1} | backSafeOPTimeout ( O &gt; S) = {2} | backInitTimeout = {3}</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="IdInfo" FunctionId="201">
			<?MAX_OUTPUT_ID 13?>
			<!--

If IdRequest AND IdSupported then
           ID Flag := 1
            AL Status Code := ID
Else
            ID Flag := 0
            AL Status Code := 0
End_if
-->
			<TestStep>
				<!--Only check if SmChannelDisabled when at least one enabled process data SyncManager available-->
				<Description Id="0" Level="Verbose">Only check if SmChannelDisabled when at least one enabled process data SyncManager available</Description>
				<CallFunction>GetAllEnabledPdSm</CallFunction>
				<Compare>
					<Equal>
						<Value1>noEnabledPdSm</Value1>
						<Value2>true</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--Get PDI SM Control register values for SM2-->
				<SetVariable Target="smAdo">#x817</SetVariable>
			</TestStep>
			<TestStep>
				<ReadEscData Target="sm2Control">
					<Address>smAdo</Address>
				</ReadEscData>
				<RaiseErrorOnFailure Id="2" Param0="smAdo">Failed to read Syncmanager PDI Control Register 0x{0:x4}!</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<GetBits Source="sm2Control" Target="sm2Deactivate">
					<Offset>0</Offset>
					<Length>1</Length>
				</GetBits>
				<WriteLine Id="3" Level="Verbose" Param0="smAdo" Param1="sm2Control" Param2="sm2Deactivate">Read PDI Control Register from register 0x{0:x4} = 0x{1:x4} | Bit 0 (Deactivate SyncManager by PDI) = {2}</WriteLine>
			</TestStep>
			<TestStep>
				<!--Get PDI SM Control register values for SM3-->
				<SetVariable Target="smAdo">#x81F</SetVariable>
			</TestStep>
			<TestStep>
				<ReadEscData Target="sm3Control">
					<Address>smAdo</Address>
				</ReadEscData>
				<RaiseErrorOnFailure Id="4" Param0="smAdo">Failed to read Syncmanager PDI Control Register 0x{0:x4}!</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<GetBits Source="sm3Control" Target="sm3Deactivate">
					<Offset>0</Offset>
					<Length>1</Length>
				</GetBits>
				<WriteLine Id="5" Level="Verbose" Param0="smAdo" Param1="sm3Control" Param2="sm3Deactivate">Read PDI Control Register from register 0x{0:x4} = 0x{1:x4} | Bit 0 (Deactivate SyncManager by PDI) = {2}</WriteLine>
			</TestStep>
			<TestStep Name="START">
				<SetVariable Target="smNumber">2</SetVariable>
			</TestStep>
			<TestStep>
				<!--SM2 enabled ?
yes: Check if SM2 deactivated
no: Check if SM3 deactivated-->
				<CallFunction>CheckIfSmEnabled</CallFunction>
				<Compare>
					<Equal>
						<Value1>smDisabled</Value1>
						<Value2>true</Value2>
						<GotoStep>SM3DEACTIVATED2</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--SM2 deactivated ? 
yes: check if SM3 activated-->
				<Compare>
					<Equal>
						<Value1>sm2Deactivate</Value1>
						<Value2>true</Value2>
						<GotoStep>SM3ACTIVATED</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--SM2 activated  ?
yes: check if SM3 deactivated-->
				<Compare>
					<Equal>
						<Value1>sm2Deactivate</Value1>
						<Value2>false</Value2>
						<GotoStep>SM3DEACTIVATED1</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SM3DEACTIVATED1">
				<SetVariable Target="smNumber">3</SetVariable>
			</TestStep>
			<TestStep>
				<!--Check if SM3 is enabled
yes: check if deactivated
no: error-->
				<CallFunction>CheckIfSmEnabled</CallFunction>
				<Compare>
					<Equal>
						<Value1>smDisabled</Value1>
						<Value2>true</Value2>
						<RaiseError Id="6" Param0="" Param1="" Param2="" Param3="">One SyncManager has to be deactivated. Since SyncManager3 is not enabled / not deactivated SyncManager2 shall be deactivated by PDI side.</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--SM3 is deactivated ?
yes: Return
no: Error-->
				<Compare>
					<Equal>
						<Value1>sm3Deactivate</Value1>
						<Value2>true</Value2>
						<RaiseError Id="7">One SyncManager has to be deactivated. Since SyncManager 2 is not enabled/ not deactivated SyncManager3 shall be disabled by PDI side.</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--Return-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="8"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SM3DEACTIVATED2">
				<SetVariable Target="smNumber">3</SetVariable>
			</TestStep>
			<TestStep>
				<!--SM3 enabled ?
yes: check if deactivated
no: return-->
				<CallFunction>CheckIfSmEnabled</CallFunction>
				<Compare>
					<Equal>
						<Value1>smDisabled</Value1>
						<Value2>true</Value2>
						<Return Id="9"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--SM3 is deactivated ?
yes: Return
no: error-->
				<Compare>
					<NotEqual>
						<Value1>sm3Deactivate</Value1>
						<Value2>true</Value2>
						<RaiseError Id="10">One SyncManager has to be deactivated. Since SyncManager 2 is not enabled/ not deactivated SyncManager3 shall be disabled by PDI side.</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<!--Return-->
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<Return Id="11"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SM3ACTIVATED">
				<SetVariable Target="smNumber">3</SetVariable>
			</TestStep>
			<TestStep>
				<!--SM 3 enabled ?
yes: Check if activated
no: return-->
				<CallFunction>CheckIfSmEnabled</CallFunction>
				<Compare>
					<Equal>
						<Value1>smDisabled</Value1>
						<Value2>true</Value2>
						<Return Id="12"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<!--SM3 activated ?
yes: ok
no: error-->
				<Compare>
					<Equal>
						<Value1>sm3Deactivate</Value1>
						<Value2>true</Value2>
						<RaiseError Id="13">Only one SyncManager shall be deactivated. Since SyncManager2 is deactivated SyncManager3 shall remain enabled.</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
	</TestFunctions>
	<TestGroups>
		<TestGroup Name="Test Cases from Init to Any" GroupId="1">
			<Comment>All test cases starting at Init State</Comment>
			<TestCase Name="#1.1 Init &gt; Init, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x01" CaseId="1">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT confirms state request from ErrorInit to Init with AL Control = 0x01
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- ESM state, SyncManager, FMMU, DC registers are reset
- State Machine Timeouts are set to values specified in ESI, otherwise to deafault values
- DuT in ErrorInit (Error Flag = 1)</PreCondition>
					<Action>IF TF-1200: State request to Init with AL Control = 0x01 (AckFlag = 0)
IF TF-1201: State request to PreOp with AL Control = 0x22 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT goes to Init
- Acknowledge error by setting Error Flag = 0
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- The acknowledgement of an error without setting the AckFlag to 1 is exclusively possible for a state request to Init.</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #1.1"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset DuT (if offline test will skipped)-->
					<Description Id="0" Level="Output">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x01-->
					<SetVariable Target="stateValue">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x01-->
					<SetVariable Target="stateValueNext">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">0</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x21
- stateValueNext = 0x21
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="3">Set to ErrorInit (AL Status = 0x11)</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrInit > stateValue-->
					<Description Id="5">Request Init (AL Control = 0x01)</Description>
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8">Check AL Status (0x013) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#1.2A Init &gt; Init, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x02" CaseId="2">
				<?MAX_OUTPUT_ID 12?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorInit to PreOp with AckFlag = 0 (i.e.  AL Control = 0x02)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- ESM state, SyncManager, FMMU, DC registers are reset
- State Machine Timeouts are set to values specified in ESI, otherwise to deafault values
- DuT in ErrorInit (Error Flag = 1)
- Read current AL Status Code. This code shall not be changed after the state request to PreOp
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to PreOp with AL Control = 0x02 (AckFlag = 0)
IF TF-1201: State request to PreOp with AL Control = 0x22 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorInit
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #1.2"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init assignToPdi-->
					<SetVariable Target="assignToPdi">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x02-->
					<SetVariable Target="stateValue">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--TF-1201: 
- stateValue = 0x22-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="3">Set DuT to ErrorInit (AL Status = 0x11)</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="5" Level="Verbose">Read AL Status Code from DuT regiser 0x0134)</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="6">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="7" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="8">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrInit > stateValue-->
					<Description Id="9" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</Description>
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="10" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x.{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="11">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="12" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#1.2B Init &gt; Init, ErrFlag = 1, AckFlag = 0, AlCtrl= 0x03" CaseId="3">
				<?MAX_OUTPUT_ID 12?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorInit to Boot with AckFlag = 0 (i.e.  AL Control = 0x03)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorInit (Error Flag = 1)
- Assign EEPROM access to PDI</PreCondition>
					<Action> TF-1200: State request to Boot with AL Control = 0x03 (AckFlag = 0)
 TF-1201: State request to Boot with AL Control = 0x23 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorInit
- ErrFlag remains 1 (no acknowlegement of error)
- IdFlag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #1.2"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init assignToPdi-->
					<SetVariable Target="assignToPdi">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="3" Level="Output">Set DuT to ErrorInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="5" Level="Verbose">Read AL Status Code from DuT (0x0134)</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="6">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="7" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="8">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrInit > stateValue-->
					<Description Id="9" Level="Verbose" Param0="errAck">Request Init with ErrAck = {0}</Description>
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="10" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="11" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="12" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#1.2C Init &gt; Init, ErrFlag = 1, AckFlag = 0, AlCtrl= 0x04" CaseId="4">
				<?MAX_OUTPUT_ID 10?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorInit to SafeOp with AckFlag = 0 (i.e.  AL Control = 0x04)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorInit (Error Flag = 1)
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to SafeOp with AL Control = 0x4 (AckFlag = 0)
IF TF-1201: State request to SafeOp with AL Control = 0x4 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorInit
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #1.2"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x04-->
					<SetVariable Target="stateValue">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--TF-1201: 
- stateValue = 0x24-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x24</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="3" Level="Output">Set DuT to ErrorInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="5" Level="Verbose">Read AL Status Code from DuT (0x0134)</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="6">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrInit > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="7" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="8" Param0="stateValue" Param1="errAck" Level="Verbose">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="9" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#1.2D Init &gt; Init, ErrFlag = 1, AckFlag = 0, AlCtrl= 0x08" CaseId="5">
				<?MAX_OUTPUT_ID 10?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorInit to Op with AckFlag = 0 (i.e.  AL Control = 0x08)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorInit (Error Flag = 1)
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to Op with AL Control = 0x08 (AckFlag = 0)
IF TF-1201: State request to Op with AL Control = 0x08 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorInit
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #1.2"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x08-->
					<SetVariable Target="stateValue">#x08</SetVariable>
				</TestStep>
				<TestStep>
					<!--TF-1201: 
- stateValue = 0x26-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="3" Level="Output">Set DuT to ErrorInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode ?-->
					<Description Id="5" Level="Verbose">Read AL Status Code from DuT (0x0134)</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="6">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrInit > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="7" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="8" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="9" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#1.2E Init &gt; Init, ErrFlag = 1, AckFlag = 0, AlCtrl= unknown" CaseId="6">
				<?MAX_OUTPUT_ID 10?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorInit to unknown state with AckFlag = 0 (i.e.  AL Control = 0x06)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorInit (Error Flag = 1)
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF1200: State request to unknown state with AL Control = 0x6 (AckFlag = 0)
IF TF-1201: State request to unknown state with AL Control = 0x06 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorInit
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #1.2"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = unknwon-->
					<SetVariable Target="stateValue">#x06</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--TF-1201: 
- stateValue = 0x26-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="3" Level="Verbose">Set DuT to ErrorInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode ?-->
					<Description Id="5" Level="Verbose">Read AL Status Code from DuT (0x0134)</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="6">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrInit > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="7" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="8" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="9" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#2 Init &gt; Init, ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x01" CaseId="7">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check that DuT confirms state request from Init to Init state with AckFlag = 0 (i.e.  AL Control = 0x01) and from ErrorInit to Init with AckFlag = 1 (i.e. AL Control = 0x11)
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in Init
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to Init with either Ack Flag 0 or 1
IF Tf-1201: State request to Init with either Ack Flag 0 or 1, IdRequest = 1</Action>
					<PostCondition>- DuT goes to Init
- Acknowledge error by setting Error Flag = 0
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #2"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x01-->
					<SetVariable Target="stateValue">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x01-->
					<SetVariable Target="stateValueNext">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x21
- stateValueNext = 0x21
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="3">Reset DuT before actual test starts (with AckFlag = 0)</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="4" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="5" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="6" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="7" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset DuT before actual test starts (with AckFlag = 1)</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!-->ErrInit-->
					<Description Id="9" Level="Verbose">Set DuT to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="10">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="11" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="12" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="13" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="14" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#3 Init &gt; PreOp, ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x02, SmSett01 match" CaseId="8">
				<?MAX_OUTPUT_ID 21?>
				<Description>
					<Purpose>Check that DuT confirms state request from Init to PreOp state with AckFlag = 0 (i.e.  AL Control = 0x01) and from ErrorInit to PreOp with AckFlag = 1 (i.e. AL Control = 0x11)
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in Init
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)
- Mailbox SyncManager settings (SyncManager 0 and SyncManager 1) match the ESI description
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to PreOp with either Ack Flag 0 or 1
IF Tf-1201: State request to PreOp with either Ack Flag 0 or 1, IdRequest = 1</Action>
					<PostCondition>- DuT goes to PreOp
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- Mailbox Handler is started, i.e. the "Deactivate SyncManger" bit of Register "PDI Control SyncManager" (+0x07.0) has to be false for SM0 (0x0807.0) and SM1 (0x0807.0). This is only tested when Mailbox-SyncManagers have a length of 0 or are disabled</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #3"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="Reset">
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="SkipTestIfDeviceEmulationActive">
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep Name="SetEsmTimeouts">
					<Description Id="2" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep Name="InitAssignToPdi">
					<SetVariable Target="assignToPdi">#x01</SetVariable>
				</TestStep>
				<TestStep Name="InitAssignToEcat">
					<SetVariable Target="assignToEcat">#x00</SetVariable>
				</TestStep>
				<TestStep Name="StateValue_eq_0x02">
					<SetVariable Target="stateValue">#x02</SetVariable>
				</TestStep>
				<TestStep Name="StateValueNext_eq_0x02">
					<SetVariable Target="stateValueNext">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x22
- stateValueNext = 0x22
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="ExpectedAlStatsuCode_eq_0x00">
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep Name="ACK_eq_0">
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep Name="SetMailboxSyncManSettings">
					<Description Id="3" Level="Verbose">Set Mailbox SyncManagers</Description>
					<CallTestFunction Name="SetMailboxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep Name="assigneEepromToPdi">
					<Description Id="4" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="5">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="Init_to_StateValue">
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="EVENT0">
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep Name="VerifyAlStatusCode">
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfMbxHandlerStarted">
					<Description Id="9" Level="Verbose">Check if Mailbox handler was started |  i.e. the "Deactivate SyncManger" bit of Register PDI Control SyncManager (+0x07.0) has to be false for SM0 and SM1</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStarted">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="Successful">
					<WriteLine Id="10" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep Name="ACK_eq_1">
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep Name="ACK1_Reset">
					<Description Id="11">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="ACK1_ErrInit">
					<Description Id="12" Level="Verbose">Set device to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="13">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ACK1_SetMailboxSyncManSettings">
					<Description Id="14" Level="Verbose">Set Mailbox SyncManagers</Description>
					<CallTestFunction Name="SetMailboxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep Name="ACK1_assigneEepromToPdi">
					<Description Id="15" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="16">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ErrInit_to_StateValue">
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="17" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="EVENT1">
					<WriteLine Id="18" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep Name="ACK1_VerifyAlStatusCode">
					<Description Id="19" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="ACK1_MbxHandlerStarted">
					<Description Id="20" Level="Verbose">Check if Mailbox handler was started |  i.e. the "Deactivate SyncManger" bit of Register PDI Control SyncManager (+0x07.0) has to be false for SM0 and SM1</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStarted">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="ACK1_Successful">
					<WriteLine Id="21" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#4 Init &gt; Init,  ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x02, SmSett0 or SmSett1 not match" CaseId="9">
				<?MAX_OUTPUT_ID 24?>
				<Description>
					<Purpose>Check that DuT reject state request with invalid mailbox SyncManager settings from Init to PreOp state with AckFlag = 0 (i.e.  AL Control = 0x01) and from ErrorInit to PreOp with AckFlag = 1 (i.e. AL Control = 0x11)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Init
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)
- Mailbox SyncManager supported
- Mailbox SyncManager settings for SyncManager 0 or SyncManager 1 does not match the ESI description
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to PreOp with either Ack Flag 0 or 1
IF Tf-1201: State request to PreOp with either Ack Flag 0 or 1, ID Request = 1</Action>
					<PostCondition>- DuT goes to Error Init, i.e. Error Flag = 1
- ID Flag = 0
- Set AL Status Code to 0x16</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #4"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfComplexDevButNoMbxSyncManagers-->
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>MBoxOut</Value2>
							<SkipCase Id="2">SKIP | No MailboxOut SyncManager configured in ESI file, i .e. device does not support mailboxes</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<Description Id="3" Level="Verbose">Set ESM Timeout values</Description>
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init assignToPdi-->
					<SetVariable Target="assignToPdi">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init assignToEcat-->
					<SetVariable Target="assignToEcat">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x02-->
					<SetVariable Target="stateValue">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x16-->
					<SetVariable Target="expectedAlStatusCode">#x16</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x22-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init smNo-->
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="4" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="5">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetMailboxSyncManSettings-->
					<Description Id="6" Level="Verbose">Set Mailbox SyncManagers</Description>
					<CallTestFunction Name="SetMailboxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="7" Param0="smNo" Level="Verbose">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="8" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="9" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="10" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="11" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x4}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="12">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!-->ErrInit-->
					<Description Id="13" Level="Verbose">Set device to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="14">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="15" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="16">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetMailboxSyncManSettings-->
					<Description Id="17" Level="Verbose">Set Mailbox SyncManagers</Description>
					<CallTestFunction Name="SetMailboxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="18" Param0="smNo" Level="Verbose">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="19" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="20" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="21" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Part successful-->
					<WriteLine Id="22" Param0="alStatus" Param1="alStatusCode" Param2="smNo" Level="Success">SUCCESSFUL for Sm{2}: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<SetVariable Target="smNo">smNo+1</SetVariable>
					<Compare>
						<GreaterOrEqual>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<Return Id="23"></Return>
						</GreaterOrEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="24">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#5 Init &gt; Boot, ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x03, Boot supported, SmSett01 match" CaseId="10">
				<?MAX_OUTPUT_ID 24?>
				<Description>
					<Purpose>Check that DuT confirms state request from Init to Boot state with AckFlag = 0 (i.e.  AL Control = 0x03) and from ErrorInit to Boot with AckFlag = 1 (i.e. AL Control = 0x13)
IF- Tf-1201: IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Init
- Check if DuT supports Bootstarp Mode (i.e. ESI element DuT:Eeprom:Bootstrap available), otherwise skip test
- Either Error Flag is 0 t(hen AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)
- Mailbox SyncManager settings (SyncManager 0 and SyncManager 1) match the ESI description element DuT:Eeprom:Bootstrap
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to Boot with either Ack Flag 0 ( AL Control = 0x03) or 1 (AL Control = 0x13)
IF TF-1201: State request to Boot with either Ack Flag 0 (AL Control = 0x23) or 1 (AL Control = 0x33) , ID Request = 1</Action>
					<PostCondition>- DuT goes to Boot state
- Error Flag = 0
- AL Status Code should be 0
- ID Flag = 0 (ID request shall be ignored)
- Mailbox Handler is started, i.e. the "Deactivate SyncManger" bit of Register "PDI Control SyncManager" (+0x07.0) has to be false for SM0 (0x0807.0) and SM1 (0x080F.0)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #5"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Boot supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Eeprom</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Bootstrap not supported (no ESI entry Eeprom) | Skip test </SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Boot supported ?-->
					<Description Id="3" Level="Verbose">Skip test if bootstrap (ESI element Eeprom:Boostrap) not supported</Description>
					<SizeOf UInt32Var="uInt32Val">DeviceDescr.Eeprom.BootStrap</SizeOf>
					<Compare>
						<NotEqual>
							<Value1>uInt32Val</Value1>
							<Value2>0</Value2>
							<WriteLine Id="4" Level="Verbose">Bootstrap supported</WriteLine>
						</NotEqual>
					</Compare>
					<Compare>
						<Equal>
							<Value1>uInt32Val</Value1>
							<Value2>0</Value2>
							<SkipCase Id="5">Bootstrap not supported (no ESI entry Bootsrap) | Skip test </SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init assignToPdi-->
					<SetVariable Target="assignToPdi">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init assignToEcat-->
					<SetVariable Target="assignToEcat">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x03-->
					<SetVariable Target="stateValueNext">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--SetBootstrapMbxSyncManSettings-->
					<Description Id="6" Level="Verbose">Set Mailbox SyncManagers for Bootstrap</Description>
					<CallTestFunction Name="SetBootstrapMbxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="7" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="8">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="9" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="10" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="11" Level="Output">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfMbxHandlerStarted">
					<Description Id="12" Level="Verbose">Check if Mailbox handler was started |  i.e. the "Deactivate SyncManger" bit of Register PDI Control SyncManager (+0x07.0) has to be false for SM0 and SM1</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStarted">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="13" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="14">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!-->ErrInit-->
					<Description Id="15" Level="Verbose">Set DuT to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="16">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetBootstrapMbxSyncManSettings-->
					<Description Id="17" Level="Verbose">Set Mailbox SyncManagers for Bootstrap</Description>
					<CallTestFunction Name="SetBootstrapMbxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="18" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="19">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="20" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="21" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="22" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="ACK1_CheckIfMbxHandlerStarted">
					<Description Id="23" Level="Verbose">Check if Mailbox handler was started |  i.e. the "Deactivate SyncManger" bit of Register PDI Control SyncManager (+0x07.0) has to be false for SM0 and SM1</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStarted">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="24" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#6 Init &gt; Init, ErrFlag = 0 or Ack Flag = 1, AlCtrl = 0x03, Boot supported, SmSett0 or SmSett1 not match" CaseId="11">
				<?MAX_OUTPUT_ID 25?>
				<Description>
					<Purpose>Check that DuT rejects state request with invalid mailbox SyncManager settings from Init to Boot state with AckFlag = 0 (i.e.  AL Control = 0x03) and from ErrorInit to PreOp with AckFlag = 1 (i.e. AL Control = 0x13)
IF- Tf-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Init
- Check if DuT supports Bootstrap Mode (i.e. ESI element DuT:Eeprom:Bootstrap available), otherwise skip test
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)
- Mailbox SyncManager settings for SyncManager0 or SyncManager1 match the ESI description element DuT:Eeprom:Bootstrap
- Mailbox SyncManager settings for SyncManager0 (then SyncManagerSetting 1 match) or SyncManager1  (then SyncManagerSetting 0 match) do not match the ESI description element DuT:Eeprom:Bootstrap
- Assign EEPROM access to PDI</PreCondition>
					<Action>IF TF-1200: State request to Bootstrap with either Ack Flag 0 or 1
IF TF-1201: State request to Bootstrap with either Ack Flag 0 or 1, ID Request = 1</Action>
					<PostCondition>- DuT goes to Error Init, i.e. Error Flag = 1
- ID Flag = 0
- Set AL Status Code to 0x15</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #6"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Boot supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Eeprom</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Bootstrap not supported (no ESI entry Eeprom) | Skip test </SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Boot supported ?-->
					<Description Id="3" Level="Verbose">Skip test if bootstrap (ESI element Eeprom:Boostrap) not supported</Description>
					<SizeOf UInt32Var="uInt32Val">DeviceDescr.Eeprom.BootStrap</SizeOf>
					<Compare>
						<NotEqual>
							<Value1>uInt32Val</Value1>
							<Value2>0</Value2>
							<WriteLine Id="4" Level="Verbose">Bootstrap supported</WriteLine>
						</NotEqual>
					</Compare>
					<Compare>
						<Equal>
							<Value1>uInt32Val</Value1>
							<Value2>0</Value2>
							<SkipCase Id="5">Bootstrap not supported (no ESI entry Bootsrap) | Skip test </SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init assignToPdi-->
					<SetVariable Target="assignToPdi">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init assignToEcat-->
					<SetVariable Target="assignToEcat">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x15-->
					<SetVariable Target="expectedAlStatusCode">#x15</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init smNo-->
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="6" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="7">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetBootstrapMbxSyncManSettings-->
					<Description Id="8" Level="Verbose">Set Mailbox SyncManagers for Bootstrap</Description>
					<CallTestFunction Name="SetBootstrapMbxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="9" Param0="smNo" Level="Verbose">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="10" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="11" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="12" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="13" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x4}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="14">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!-->ErrInit-->
					<Description Id="15" Level="Verbose">Set device to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<ReturnOnFailure Id="16">Failed to run to ErrInit!</ReturnOnFailure>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="17" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="18">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetBootstrapMbxSyncManSettings-->
					<Description Id="19" Level="Verbose">Set Mailbox SyncManagers for Bootstrap</Description>
					<CallTestFunction Name="SetBootstrapMbxSyncManSettings"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="20" Param0="smNo" Level="Verbose">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="21" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<Description Id="22" Level="Verbose">Take back EEPROM access to ECAT.</Description>
					<WriteLine Id="23" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="24" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Part successful-->
					<WriteLine Id="25" Param0="alStatus" Param1="alStatusCode" Param2="smNo" Level="Success">SUCCESSFUL for Sm{2}: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<SetVariable Target="smNo">smNo+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="# 7 Init &gt; Init, ErrFlag = 0 or AckFlag = 1, AlCtrl  = 0x03, Boot not supported " CaseId="12">
				<?MAX_OUTPUT_ID 15?>
				<Description>
					<Purpose>Check that DuT rejects state request Init to Boot state when Boot is not supported with AckFlag = 0 (i.e.  AL Control = 0x03) and from ErrorInit to Boot with AckFlag = 1 (i.e. AL Control = 0x13)
IF- Tf-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Init
- Check if DuT does not support Bootstarp mode (i.e. ESI element DuT:Eeprom:Bootstrap available), otherwise skip test
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>IF TF-1200: State request to  Bootstrap (AL Control = 0x03) with either Ack Flag 0 or 1
IF TF-1201: State request to  Bootstrap (AL Control = 0x03) with either Ack Flag 0 or 1, ID Request = 1</Action>
					<PostCondition>- DuT goes to Error Init, i.e. Error Flag = 1
- ID Flag = 0
- Set AL Status Code to 0x13</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #7"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Boot supported ?-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Eeprom</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Bootstrap not supported (ESI element Eeprom not available) | Skip test</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Boot supported ?-->
					<SizeOf UInt32Var="uInt32Val">DeviceDescr.Eeprom.BootStrap</SizeOf>
					<Compare>
						<Equal>
							<Value1>uInt32Val</Value1>
							<Value2>0</Value2>
							<WriteLine Id="3" Level="Verbose">Bootstrap no supported (ESI element Eeprom:BootStrap not available)</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>uInt32Val</Value1>
							<Value2>0</Value2>
							<SkipCase Id="4">Bootstrap supported (ESI entry Eeprom:BootStrap present) | Skip test </SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="BOOTSUPP">
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x13-->
					<SetVariable Target="expectedAlStatusCode">#x13</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="5" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="6" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="7" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="8" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="9">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!-->ErrInit-->
					<Description Id="10" Level="Verbose">Set device to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="11">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="12" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="13" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="14" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="15" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="# 8 Init &gt; Init, ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x04 or 0x08 " CaseId="13">
				<?MAX_OUTPUT_ID 24?>
				<Description>
					<Purpose>Check that DuT rejects state request Init to SafeOp or Op state with AckFlag = 0 (i.e.  AL Control = 0x04 or 08) and from ErrorInit to SafeOp or Op with AckFlag = 1 (i.e. AL Control = 0x14 or 18)
IF- Tf-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Init
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>a) State request to SafeOp with either AckFlag 0 or 1
b) State request to Op with either AckFlag 0 or 1
IF TF-1200: ID Request = 0
IF TF-1201: ID Request = 1</Action>
					<PostCondition>- DuT goes to Error Init, i.e. Error Flag = 1
- ID Flag = 0
- Set AL Status Code to 0x11</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #8"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x04-->
					<SetVariable Target="stateValue">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x11-->
					<SetVariable Target="expectedAlStatusCode">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x24-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x24</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="2" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="3" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="4" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="5" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="6">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="7" Level="Verbose">Set device to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="9" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="10" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="11" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="12" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x08-->
					<SetVariable Target="stateValue">#x08</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x28-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x28</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="13">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="14" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="15" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="16" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="17" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="18">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrInit-->
					<Description Id="19" Level="Verbose">Set device to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="20">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="21" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="22" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="23" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="24" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="# 9 Init &gt; Init, ErrFlag = 0 or AckFlag = 1, AlCtrl = unknown" CaseId="14">
				<?MAX_OUTPUT_ID 12?>
				<Description>
					<Purpose>Check that DuT rejects state request Init to unknown state with AckFlag = 0 (i.e.  AL Control = 0x06) and from ErrorInit to unknown with AckFlag = 1 (i.e. AL Control = 0x16)
IF- Tf-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Init
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>IF TF-1200: State request to unknown state with either AckFlag 0 (AL Control = 0x06) or 1 (Al Control = 0x16)
IF TF-1201: State request to unknown state with either AckFlag 0 (AL Control 0x26) or 1 (AL Control = 0x36), IdRequest = 1</Action>
					<PostCondition>- DuT goes to Error Init, i.e. Error Flag = 1
- ID Flag = 0
- Set AL Status Code to 0x12</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #9"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue =Unknown (0x06)-->
					<SetVariable Target="stateValue">6</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x12-->
					<SetVariable Target="expectedAlStatusCode">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x26-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="2" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="3" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="4" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="5" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="6">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!-->ErrInit-->
					<Description Id="7" Level="Verbose">Set device to ErrInit</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_INIT</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="9" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="10" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="11" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="12" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#10 Init &gt; Init, Sm_Change ignored" CaseId="15">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check that DuT ignores a change of any SyncManager while DuT is in Init state. 
(No TF-1201 Explcit Device ID specific testing)</Purpose>
					<PreCondition>- DuT in Init
- Mailbox SyncManager supported</PreCondition>
					<Action>- For each available SyncManager wrong SyncManager settings are set and enable SyncManager so that a SyncManager Change Event is indicated from the ESC to the host controller</Action>
					<PostCondition>- The pending SyncManager Change event is ignored (i.e. AL Status and AL Status Code shall be unchaged after the event) by the host controller</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #10"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--SkipTestIfComplexDevButNoMbxSyncManagers-->
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>MBoxOut</Value2>
							<SkipCase Id="1">SKIP | No MailboxOut SyncManager configured in ESI file, i .e. device does not support mailboxes</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="2">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="3" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init smNo-->
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--stateValueNext ?-->
					<ReadEscData Target="stateValueNext">
						<Address>#x130</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="4">Failed to read register 0x0130!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode ?-->
					<Description Id="5" Level="Verbose">Read AL Status Code from ESC</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="6">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="7" Param0="smNo" Level="Verbose">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="8" Level="Output">EVENT: SM_Chg (wait for 3000ms until expected behaviour is checked)</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="9" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Part Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="alStatusCode2" Param2="smNo" Level="Success">SUCCESSFUL for SM{2}: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep Name="NEXTSM">
					<Description Id="11">NEXTSM</Description>
					<SetVariable Target="smNo">smNo+1</SetVariable>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<Compare>
						<GreaterOrEqual>
							<Value1>smNo</Value1>
							<Value2>DeviceDescr.SM.Count</Value2>
							<Return Id="12"></Return>
						</GreaterOrEqual>
					</Compare>
				</TestStep>
				<TestStep Name="SkipIfVirtual">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>null</Value2>
							<GotoStep>RESET</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>true</Value2>
							<WriteLine Id="13" Level="Verbose" Param0="smNo">Skip test for Sm{0} since Flag "Sm@Virtual = True" in ESI</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>true</Value2>
							<GotoStep>NEXTSM</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="RESET">
					<Description Id="14">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>DeviceDescr.SM.Count</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="Device:Eeprom:AssignToPdi" CaseId="16">
				<?MAX_OUTPUT_ID 15?>
				<Description>
					<Purpose>- If ESI attribute Device:Eeprom:AssignToPdi is true the slave should return an AL Status Code when the master does not assign the access to the PDI
- (No TF-1201 Explcit Device ID specific testing)</Purpose>
					<PreCondition>
- Device:Eeprom:AssignToPdi = TRUE</PreCondition>
					<Action>Set DuT to PREOP without granting EEPROM access</Action>
					<PostCondition>Slave may go to ERR-INIT and return AL Status Code = 0x0050. If slave does not do this a Warning is generated</PostCondition>
					<References>
						<Reference Specification="ETG.2000" Chapter=""></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CHECK_IF_SUPPORTED">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Eeprom</Value1>
							<Value2>False</Value2>
							<SkipCase Id="1">SKIP | Slave does not have the element Eeprom</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Eeprom.AssignToPdi</Value1>
							<Value2>null</Value2>
							<SkipCase Id="2">SKIP | Slave does not use the attribute AssignToPdi</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Eeprom.AssignToPdi</Value1>
							<Value2>false</Value2>
							<SkipCase Id="3" Param0="DeviceDescr.Eeprom.AssignToPdi">SKIP | Attribute Eeprom@AssignToPdi = {0:b}</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset DuT (if offline test will skipped)-->
					<Description Id="4" Level="Output">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="SET_MBX_SM_IF_AVAILABLE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM.Count</Value1>
							<Value2>0</Value2>
							<GotoStep>INIT_ASSIGN_TO_ECAT</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>null</Value2>
							<RaiseError Id="5">INFO: No Sm:Text element defined in ESI for SyncManager0</RaiseError>
						</Equal>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>MBoxOut</Value2>
							<GotoStep>MBXIN</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--SM_SM_0-->
					<Description Id="6" Level="Verbose">Set SyncManager 0 settings according to ESI</Description>
					<SetSyncManagerSettings>
						<Number>0</Number>
						<Start>DeviceDescr.SM[0].StartAddress</Start>
						<Length>DeviceDescr.SM[0].DefaultSize</Length>
						<ControlByte>DeviceDescr.SM[0].ControlByte</ControlByte>
						<Enable>DeviceDescr.SM[0].Enable</Enable>
					</SetSyncManagerSettings>
					<RaiseErrorOnFailure Id="7">Failed to set SyncManager settings of SyncManager 0</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="MBXIN">
					<!--SM = MbxInput ?-->
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[1]</Value1>
							<Value2>MBoxIn</Value2>
							<GotoStep>INIT_ASSIGN_TO_ECAT</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--SET_SM_1-->
					<Description Id="8" Level="Verbose">Set SyncManager 1 settings according to ESI</Description>
					<SetSyncManagerSettings>
						<Number>1</Number>
						<Start>DeviceDescr.SM[1].StartAddress</Start>
						<Length>DeviceDescr.SM[1].DefaultSize</Length>
						<ControlByte>DeviceDescr.SM[1].ControlByte</ControlByte>
						<Enable>DeviceDescr.SM[1].Enable</Enable>
					</SetSyncManagerSettings>
					<RaiseErrorOnFailure Id="9">Failed to set SyncManager settings of SyncManager 1</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="INIT_DONT_ASSIGN_TO_ECAT">
					<SetVariable Target="byteAssignToEcat">#x00</SetVariable>
				</TestStep>
				<TestStep Name="DONT_ASSIGN_PDI_TO_ECAT">
					<WriteEscData Source="byteAssignToEcat">
						<Address>#x500</Address>
					</WriteEscData>
				</TestStep>
				<TestStep Name="RETURN_ERROR_IF_ESC_REGISTER_FAILED">
					<RaiseErrorOnFailure Id="10">Failed to write register 0x0500 (assign EEPROM access to ECAT)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SET_ESM_PREOP_TIMEOUT">
					<CallTestFunction Name="GetPreOpTimeout">
						<OutParameter>t_preopTimeout</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="REQUEST_PREOP">
					<Description Id="11" Level="Output">EVENT | Request PREOP with EEPROM ACCESS not assigned to PDI</Description>
					<RequestState ErrorAck="false">
						<State>PREOP</State>
						<CheckState>
							<Timeout>t_preopTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<WarningOnSuccess Id="12" Param0="alStatus" Param1="alStatusCode">WARNING | EEPROM access was not assigned to PDI but DuT did confirm state change to PREOP. | INFO: AL Status = 0x{0:x4} , AL Status Code = 0x{1:x4}</WarningOnSuccess>
				</TestStep>
				<TestStep Name="CHECK_STATE_REQUEST_RESULT">
					<Compare>
						<NotEqual>
							<Value1>alStatus</Value1>
							<Value2>#x0011</Value2>
							<RaiseError Id="13" Param0="alStatus" Param1="alStatusCode">Invalid AL Status | Expected = 0x0011, read = 0x{0:x4} | INFO: AL Status Code = 0x{1:x4}</RaiseError>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>alStatusCode</Value1>
							<Value2>#x0050</Value2>
							<RaiseError Id="14" Param0="alStatusCode" Param1="alStatus">Invalid AL Status Code | Expected = 0x0050, read = 0x{0:x4} | INFO: AL Status = 0x{1:x4}</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="SUCCESS">
					<WriteLine Id="15" Param0="alStatus" Param1="alStatusCode" Level="Success">AL Status = 0x{0:x4}, AL Status Code = 0x{1:x4}</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="Test Cases from PreOp to Any" GroupId="2">
			<Comment>All test cases starting at PreOp State</Comment>
			<TestCase Name="#11.1 PreOp &gt; Init, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x01" CaseId="1">
				<?MAX_OUTPUT_ID 10?>
				<Description>
					<Purpose>Check that DuT confirms state request from ErrorPreOp to Init with AL Control = 0x01
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in ErrorPreOp (Error Flag = 1)
- Send start-up commands for state change PreOp to Init</PreCondition>
					<Action>IF TF-1200: State request to Init with AL Control = 0x01 (AckFlag = 0)
IF TF-1201: State request to PreOp with AL Control = 0x21 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT goes to Init
- Acknowledge error by setting Error Flag = 0
- AL Status Code:
   IF TF-1200: should be 0
   IF TF-1201: AL Status Code shall be the ID Value ; Set ID Flag = 1
- Mailbox Handler is stopped
- The acknowledgement of an error without setting the AckFlag to 1 is exclusively possible for a state request to Init.</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #11.1"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x01-->
					<SetVariable Target="stateValue">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x01-->
					<SetVariable Target="stateValueNext">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x21
- stateValueNext = 0x21
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="2" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand PI-->
					<Description Id="4" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>PI</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="5">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrPreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="9" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#11.2A PreOp &gt; PreOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x02" CaseId="2">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorPreOp to PreOp with AckFlag = 0 (i.e.  AL Control = 0x02)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorPreOp (Error Flag = 1)</PreCondition>
					<Action>IF TF-1200: State request to Init with AL Control = 0x02 (AckFlag = 0)
IF TF-1201: State request to PreOp with AL Control = 0x22 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorPreOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #11.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x02-->
					<SetVariable Target="stateValue">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x22-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="2" Level="Verbose">Set to ErrorPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from ESC</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrPreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#11.2B PreOp &gt; PreOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x03" CaseId="3">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorPreOp to Boot with AckFlag = 0 (i.e.  AL Control = 0x03)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorPreOp (Error Flag = 1)</PreCondition>
					<Action>IF TF-1200: State request to Init with AL Control = 0x03 (AckFlag = 0)
IF TF-1201: State request to PreOp with AL Control = 0x23 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorPreOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #11.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="2" Level="Verbose">Set to ErrorPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="backInitTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from ESC</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrPreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#11.2C PreOp &gt; PreOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x04" CaseId="4">
				<?MAX_OUTPUT_ID 12?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorPreOp to SafeOp with AckFlag = 0 (i.e.  AL Control = 0x04)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorPreOp (Error Flag = 1)
- Skip test if PreOp to SafeOp start-up commands required ("PS")</PreCondition>
					<Action>IF TF-1200: State request to SafeOp with AL Control = 0x4 (AckFlag = 0)
IF TF-1201: State request to SafeOp with AL Control = 0x4 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorPreOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #11.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfPreOpSafeOpStartUpCmdsRequired-->
					<CallTestFunction Name="SkipTestIfPreOpSafeOpStartUpCmdsRequired"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x04-->
					<SetVariable Target="stateValue">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x24-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x24</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="2" Level="Verbose">Set to ErrorPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from ESC</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommands PS-->
					<Description Id="6" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>PS</StateTransition>
					</SendStartupCommands>
					<WarningOnFailure Id="7">Failed to send start-up commands!</WarningOnFailure>
				</TestStep>
				<TestStep>
					<!--SetSyncManSettingsAccToPdoLength-->
					<Description Id="8" Level="Verbose">Set process data SyncManager settings according to PDO length</Description>
					<CallTestFunction Name="SetSyncManSettingsAccToPdoLength">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ErrPreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="9" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="10" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="11" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="12" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#11.2D PreOp &gt; PreOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x08" CaseId="5">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorPreOp to Op with AckFlag = 0 (i.e.  AL Control = 0x08)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorPreOp (Error Flag = 1)</PreCondition>
					<Action>IF TF-1200: State request to Op with AL Control = 0x08 (AckFlag = 0)
IF TF-1201: State request to Op with AL Control = 0x08 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorPreOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #11.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x08-->
					<SetVariable Target="stateValue">#x08</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x28-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x28</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="2" Level="Verbose">Set to ErrorPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from ESC</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrPreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#11.2E PreOp &gt; PreOp, ErrFlag = 1, AckFlag = 0, AlCtrl = unknown" CaseId="6">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorPreOp to unknown state with AckFlag = 0 (i.e.  AL Control = 0x06)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorPreOp (Error Flag = 1)</PreCondition>
					<Action>IF TF1200: State request to unknown state with AL Control = 0x6 (AckFlag = 0)
IF TF-1201: State request to unknown state with AL Control = 0x06 (AckFlag = 0, IdRequest = 1)</Action>
					<PostCondition>- DuT remains in ErrorPreOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #11.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = unknwon (0x06)-->
					<SetVariable Target="stateValue">#x06</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x26-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="2" Level="Verbose">Set to ErrorPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrInit!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode ?-->
					<Description Id="4" Level="Verbose">Read AL Status Code from ESC</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrInit > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#12 PreOp &gt; Init, ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x01" CaseId="7">
				<?MAX_OUTPUT_ID 20?>
				<Description>
					<Purpose>Check that DuT confirms state request from PreOp to Init state with AckFlag = 0 (i.e.  AL Control = 0x01) and from ErrorInit to Init with AckFlag = 1 (i.e. AL Control = 0x11)
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in PreOp
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Erro Flag is 1 (then AckFlag is 1 in Action)
- Send Start Up commands for state change PreOp to Init</PreCondition>
					<Action>- State request to Init with either Ack Flag 0 or 1
IF TF-1200: State request to Init with either Ack Flag 0 (AL Control = 0x01) or 1(AL Control = 0x11) 
IF Tf-1201: State request to Init with either Ack Flag 0 ((AL Control = 0x21) or 1 (AL Control = 0x31) , IdRequest = 1</Action>
					<PostCondition>- DuT goes to Init
- Acknowledge error by setting Error Flag = 0
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- Mailbox Handler is stopped (Deactivate SyncManager Bits in 0x0807.0 and 0x080F.0 are True)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #12"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x01-->
					<SetVariable Target="stateValue">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x01-->
					<SetVariable Target="stateValueNext">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x21
- stateValueNext = 0x21
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> PreOp-->
					<Description Id="2" Level="Verbose">Set to PreOp (AL Status = 0x02)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand PI-->
					<Description Id="4" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>PI</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="5">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--PreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="9" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="11">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="12" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="13">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand PI-->
					<Description Id="14" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>PI</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="15">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrPreOp > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="16" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="17" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="18" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="19" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="20" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#13 PreOp &gt; PreOp, ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x02" CaseId="8">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check that DuT confirms state request from PreOp to PreOp state with AckFlag = 0 (i.e.  AL Control = 0x01) and from ErrorPreOp to PreOp with AckFlag = 1 (i.e. AL Control = 0x11)
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in PreOp
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Errof Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>IF TF-1200: State request to PreOp with either Ack Flag 0 or 1
IF Tf-1201: State request to PreOp with either Ack Flag 0 or 1, IdRequest = 1</Action>
					<PostCondition>- DuT goes to PreOp
- Acknowledge error by setting Error Flag = 0
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #13"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x02-->
					<SetVariable Target="stateValue">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x02-->
					<SetVariable Target="stateValueNext">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x22
- stateValueNext = 0x22
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> PreOp-->
					<Description Id="2" Level="Verbose">Set to PreOp (AL Status = 0x02)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--PreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="4" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="5" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="6" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="7" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="9" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="10">Failed to run to ErrPreOp!!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--PreOp > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="11" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="12" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="13" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="14" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#17  PreOp &gt; PreOp, ErrFlag = 0 or ErrAck = 1, AlCtrl = 0x04, SmSett_2_To_n not match" CaseId="9">
				<?MAX_OUTPUT_ID 38?>
				<Description>
					<Purpose>Check that DuT reject state request with invalid process data SyncManager settings from PreOp to SafeOp state with AckFlag = 0 (i.e.  AL Control = 0x04) and from ErrorPreOp to SafeOp with AckFlag = 1 (i.e. AL Control = 0x14)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in PreOp
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Erro Flag is 1 (then AckFlag is 1 in Action)
- For each available process data SyncManager: Settings for this SyncManager do not match while all others match. The wrong SyncManager settings are generated according to this logic: 
	- if SM is enabled --&gt; disable
	- if SM is disabled --&gt; Write start address and length of other enabled SM
- Send PreOp-SafeOp ("PS") start-up commands if ErrFlag = 0</PreCondition>
					<Action>IF TF-1200: State request to SafeOp with either Ack Flag 0 (AL Control = 0x04) or 1 (AL Control = 0x14) 
IF TF-1201: State request to SafeOp with either Ack Flag 0 (AL Control = 0x24) or 1 (AL Control = 0x34) and ID Request = 1</Action>
					<PostCondition>- DuT goes to Error PreOp, i.e. AL Status = 0x12
- ID Flag remains 0
- Set AL Status Code: 
	When Output SyncManager Settings do not match: 0x1D
	When Input SyncManager Settings do not match: 0x1E
	AL Status Code 0x17 should not be use since it is inaccurate	</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #17"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--InitPdSmIndex-->
					<SetVariable Target="index">0</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x04-->
					<SetVariable Target="stateValue">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x24-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x24</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="GetListOfAllPdSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
					<WriteLine Id="39" Param0="allPdSm" Level="Verbose">allPdSm = {0}</WriteLine>
				</TestStep>
				<TestStep Name="ReturnIfNoPdSmSupported">
					<SizeOf UInt32Var="pdSmCount">allPdSm</SizeOf>
					<Compare>
						<Equal>
							<Value1>pdSmCount</Value1>
							<Value2>0</Value2>
							<Return Id="2">No Process Data SyncManagers supported by this device | Test skipped!</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitSmNoWithFirstPdSm">
					<GetArrayItem Index="index" SourceArray="allPdSm" Target="smNo"></GetArrayItem>
				</TestStep>
				<TestStep Name="InitLastPdSmOfList">
					<GetArrayItem Index="pdSmCount-1" SourceArray="allPdSm" Target="lastPdSm"></GetArrayItem>
					<Compare>
						<Equal>
							<Value1>Settings.bAll_debugMsg</Value1>
							<Value2>true</Value2>
							<WriteLine Id="3" Param0="lastPdSm" Level="Verbose">  highest process data SyncManager = {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--expectedAlStatusCode2 = 0x17-->
					<SetVariable Target="expectedAlStatusCode2">#x17</SetVariable>
				</TestStep>
				<TestStep>
					<!--Get smControlType-->
					<GetBits Source="DeviceDescr.SM[smNo].ControlByte" Target="smControlType">
						<Offset>2</Offset>
						<Length>2</Length>
					</GetBits>
					<WriteLine Id="4" Param1="smNo" Param0="smControlType" Level="Verbose">Next tested: SyncManager{0}, Type (ESI element Sm:ControlByte) = {1} | Info: 0 =  Input , 1 = Output</WriteLine>
					<Compare>
						<Equal>
							<Value1>smControlType</Value1>
							<Value2>0</Value2>
							<GotoStep>INPUTALCODE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="OUTPUTALCODE">
					<!--expectedAlStatusCode = 0x1D (Outputs)-->
					<SetVariable Target="expectedAlStatusCode">#x1D</SetVariable>
					<WriteLine Id="5" Param0="expectedAlStatusCode" Level="Verbose">Expected AL Status Code according to SyncManager Type = 0x{0:x2}</WriteLine>
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<GotoStep>START</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="INPUTALCODE">
					<!--expectedAlStatusCode = 0x1E (Inputs)-->
					<SetVariable Target="expectedAlStatusCode">#x1E</SetVariable>
					<WriteLine Id="6" Param0="expectedAlStatusCode" Level="Verbose">Expected AL Status Code according to SyncManager Type = 0x{0:x2}</WriteLine>
				</TestStep>
				<TestStep Name="START">
					<!--ACK = 0-->
					<SetVariable Target="errAck">FALSE</SetVariable>
				</TestStep>
				<TestStep>
					<!--> PreOp-->
					<Description Id="7" Level="Verbose">Set to PreOp (AL Status = 0x02)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommands PS-->
					<Description Id="9" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>PS</StateTransition>
					</SendStartupCommands>
					<WarningOnFailure Id="10">Failed to send start-up commands!</WarningOnFailure>
				</TestStep>
				<TestStep>
					<!--SetSyncManSettingsAccToPdoLength-->
					<Description Id="13" Level="Verbose">Set process data SyncManager settings according to PDO length</Description>
					<CallTestFunction Name="SetSyncManSettingsAccToPdoLength">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="16" Level="Verbose" Param0="smNo">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--PreOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="17" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="18" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="19" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>expectedAlStatusCode2<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="20" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--CheckIfPreOpSafeOpStartUpCmdsRequired-->
					<CallTestFunction Name="CheckIfPreOpSafeOpStartUpCmdsRequired">
						<OutParameter>bSkipPartOfTest</OutParameter>
					</CallTestFunction>
					<Compare>
						<Equal>
							<Value1>bSkipPartOfTest</Value1>
							<Value2>True</Value2>
							<WriteLine Id="21" Level="Output">PreOp-SafeOp start-up commands required. Skip ErrPreOp to SafeOp part of this test case.</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bSkipPartOfTest</Value1>
							<Value2>True</Value2>
							<GotoStep>NEXT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode2 = 0x17-->
					<SetVariable Target="expectedAlStatusCode2">#x17</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="22">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="23" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="24">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommands PS-->
					<Description Id="25" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>PS</StateTransition>
					</SendStartupCommands>
					<WarningOnFailure Id="26">Failed to send start-up commands!</WarningOnFailure>
				</TestStep>
				<TestStep>
					<!--SetSyncManSettingsAccToPdoLength-->
					<Description Id="29" Level="Verbose">Send device specific start up commands</Description>
					<CallTestFunction Name="SetSyncManSettingsAccToPdoLength">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="32" Level="Verbose" Param0="smNo">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--PreOp > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="33" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="34" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="35" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>expectedAlStatusCode2<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="36" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep Name="NEXT">
					<!--All Sms tested ?-->
					<SetVariable Target="index">index+1</SetVariable>
					<Compare>
						<Greater>
							<Value1>index</Value1>
							<Value2>uint32_sizeOfAllPdSm</Value2>
							<Return Id="37"></Return>
						</Greater>
					</Compare>
				</TestStep>
				<TestStep Name="GetNextPdSm">
					<GetArrayItem Index="index" SourceArray="allPdSm" Target="smNo"></GetArrayItem>
				</TestStep>
				<TestStep>
					<!--Reset device -->
					<Description Id="38">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="# 18 PreOp &gt; PreOp,  ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x03 or 0x08" CaseId="10">
				<?MAX_OUTPUT_ID 28?>
				<Description>
					<Purpose>Check that DuT rejects state request from PreOp to Boot or Op state with AckFlag = 0 (i.e.  AL Control = 0x03 or 0x08) and from ErrorPreOp to Boot or Op with AckFlag = 1 (i.e. AL Control = 0x13 or 0x18)
IF- Tf-1201: IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in PreOp
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>IF TF-1200 (ID Request = 0)
a) State request to Bootstrap with either AckFlag 0 (AL Control = 0x03)  or 1 (AL Control = 0x13)
b) State request to Op with either AckFlag 0 (AL Control = 0x08) or 1 (AL Control = 0x18)

IF TF-1201 (ID Request = 1):
a) State request to Bootstrap with either AckFlag 0 (AL Control = 0x23) or 1(AL Control = 0x33) 
b) State request to Op with either AckFlag 0 (AL Control = 0x28) or 1 (AL Control = 0x38)</Action>
					<PostCondition>- DuT goes to Error PreOp, i.e. Error Flag = 1
- ID Flag remains 0
- Set AL Status Code to 0x11</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #18"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x11-->
					<SetVariable Target="expectedAlStatusCode">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> PreOp-->
					<Description Id="2" Level="Verbose">Set to PreOp (AL Status = 0x02)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="4" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="5" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="6" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="7" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} |AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="9" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="10">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="11" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="12" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="13" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="14" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} |AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x08-->
					<SetVariable Target="stateValue">#x08</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x28-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x28</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="15">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> PreOp-->
					<Description Id="16" Level="Verbose">Set to PreOp (AL Status = 0x02)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="17">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="18" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="19" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="20" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="21" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} |AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="22">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="23" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="24">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="25" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="26" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="27" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="28" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} |AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="# 19 PreOp &gt; PreOp,  ErrFlag = 0 or AckFlag = 1, AlCtrl = unknown" CaseId="11">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check that DuT rejects state request PreOp to unknown state with AckFlag = 0 (i.e.  AL Control = 0x06) and from ErrorPreOp to unknown with AckFlag = 1 (i.e. AL Control = 0x16)
IF- Tf-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in PreOp
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Error Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>IF TF-1200: State request to unknown state with either AckFlag 0 (AL Control = 0x06) or 1 (AL Control = 0x16)
IF TF-1201: State request to unknown state with either AckFlag 0 (AL Control = 0x26) or 1 (AL Control = 0x36), ID Request = 1</Action>
					<PostCondition>- DuT goes to Error PreOp, i.e. Error Flag = 1
- ID Flag = 0
- Set AL Status Code to 0x12</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #19"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = Unknown (0x06)-->
					<SetVariable Target="stateValue">6</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x12-->
					<SetVariable Target="expectedAlStatusCode">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x26-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> PreOp-->
					<Description Id="2" Level="Verbose">Set to PreOp (AL Status = 0x02)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="4" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="5" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--alStatus.Code ?-->
					<Description Id="6" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="7" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACk = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrPreOp-->
					<Description Id="9" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="10">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="11" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="12" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--alStatus.Code ?-->
					<Description Id="13" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="14" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="# 20.1  PreOp &gt; PreOp, Sm_Chg, ErrFlag = 0, SmSett01 match" CaseId="12">
				<?MAX_OUTPUT_ID 1?>
				<Description>
					<Purpose>No test logic executed. Test case documents ESM transition for completeness.</Purpose>
					<PreCondition>- DuT uses SyncManger Change event (0x0204.04 = TRUE)
- DuT is set to PreOp 
- ErrorFlag = 0</PreCondition>
					<Action>SM Change event is issued (this can only be done by changing the SyncManager Activation Register (+0x06.1). So this is not possible. Hence, the test is only theoretical</Action>
					<PostCondition>- AL Event shall be acknowledged</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #20.1"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Info-->
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">INFO | Test Case only theoretical and cannot be tested in real environment.</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="# 20.2  PreOp &gt; PreOp, Sm_Chg, ErrFlag = 1 " CaseId="13">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check that SyncManager change event is ignored when slave is already in PreOpError.
Skipped in TF-1201</Purpose>
					<PreCondition>- DuT in PreOp Error (ErrFlag = 1)
- Settings for all available SyncManagers match</PreCondition>
					<Action>SyncManager Change event is generated by setting invalid SyncManager settings for one SyncManager at a time</Action>
					<PostCondition>SyncManager Change Event shall be ignored, i.e. DuT shall remain in ErrPreOp with unchanged AL Status Code</PostCondition>
					<ProposalForSolution>Do not change the AL Status (0x130) and AL Status Code (0x134) due to the SyncManager change event</ProposalForSolution>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #20.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init smNo-->
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--> ErrPreOp-->
					<Description Id="3" Level="Verbose">Set to ErrPreOp (AL Status = 0x12)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>ERROR_PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrPreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--stateValueNext ?-->
					<ReadEscData Target="stateValueNext">
						<Address>#x130</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0130!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode ?-->
					<Description Id="6" Level="Verbose">Read AL Status Code from ESC (0x0134)</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="7">Failed to read register 0x0134</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="8" Param0="smNo" Level="Verbose">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="9" Param0="backInitTimeout" Level="Output">EVENT: SM_Chg | Wait for {0}ms until expected behaviour is checked.</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="10" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Part Successful-->
					<WriteLine Id="11" Param0="smNo" Level="Success">SUCCESSFUL for Sm{0}</WriteLine>
				</TestStep>
				<TestStep Name="NEXTSM">
					<SetVariable Target="smNo">smNo+1</SetVariable>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<Compare>
						<GreaterOrEqual>
							<Value1>smNo</Value1>
							<Value2>DeviceDescr.SM.Count</Value2>
							<Return Id="12"></Return>
						</GreaterOrEqual>
					</Compare>
				</TestStep>
				<TestStep Name="SkipIfVirtual">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>null</Value2>
							<GotoStep>RESET</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>true</Value2>
							<WriteLine Id="13" Level="Verbose" Param0="smNo">Skip test for Sm{0} since Flag "Sm@Virtual = True" in ESI</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>true</Value2>
							<GotoStep>NEXTSM</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="RESET">
					<Description Id="14">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>DeviceDescr.SM.Count</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="# 21 PreOp &gt; Init, Sm_Chg, ErrFlag = 0, SmSett0 or SmSett1 not match" CaseId="14">
				<?MAX_OUTPUT_ID 15?>
				<Description>
					<Purpose>Check if slave goes from PreOp to ErrorInit if mailbox SyncManagers are set to invalid settings.
Skipped in TF-1201</Purpose>
					<PreCondition>- DuT is set to PreOp (AL Status = 0x02)
- Mailbox SyncManager settings match
- DuT supports Mailbox SyncManagers (ESI element Sm = MBoxOut)</PreCondition>
					<Action>SyncManager Change event is generated by setting invalid SyncManager0 or SyncManger1 settings</Action>
					<PostCondition>- AL Status Code = 0x16
- AL Status = 0x11
- Mailbox Handler is stopped (Deactivate SyncManager Bits in 0x0807.0 and 0x080F.0 are True)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #21"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfComplexDevButNoMbxSyncManagers-->
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>MBoxOut</Value2>
							<SkipCase Id="3">SKIP | No MailboxOut SyncManager configured in ESI file, i .e. device does not support mailboxes</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--No MBox-SyncManager in ESI -> Skip Test-->
					<Description Id="4" Level="Verbose">Check if device supports Mailbox SyncManager according to ESI file and skip test if not</Description>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM.Count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="5">Device does not have any SyncManager according to ESI file.</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>MBoxOut</Value2>
							<SkipCase Id="6">Device does not have an  Output Mailbox SyncManager on SM0, i.e. device does not support Mailbox SyncManagers according to its ESI file.</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode ?-->
					<SetVariable Target="expectedAlStatusCode">#x16</SetVariable>
				</TestStep>
				<TestStep>
					<!--Init smNo-->
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--> PreOp-->
					<Description Id="7" Level="Verbose">Set to PreOp (AL Status = 0x02)</Description>
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="8">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="9" Param0="smNo" Level="Verbose">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="10" Param0="backInitTimeout" Level="Output">EVENT: SM_Chg | Wait for {0}ms until expected behaviour is checked!</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="11" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="12" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Part successful-->
					<WriteLine Id="13" Param0="smNo" Level="Success">SUCCESSFUL for Sm{0}</WriteLine>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<SetVariable Target="smNo">smNo+1</SetVariable>
					<Compare>
						<GreaterOrEqual>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<Return Id="14"></Return>
						</GreaterOrEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="15">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="Test Cases from SafeOp to Any" GroupId="3">
			<Comment>All test cases starting at SafeOp State</Comment>
			<TestCase Name="#22.1 SafeOp &gt; Init, ErrFlag  = 1, AckFlag = 0, AlCtrl = 0x01" CaseId="1">
				<?MAX_OUTPUT_ID 11?>
				<Description>
					<Purpose>Check that DuT confirms state request from ErrorSafeOp to Init with AL Control = 0x01
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in ErrorSafeOp (AL Status = 0x14)
- Send start-up commands for state change PreOp to Init</PreCondition>
					<Action>IF TF-1200: State request to Init state with AckFlag 0 (AL Control = 0x01)
IF TF-1201: State request to Init state with AckFlag 0 and ID Request = 1 (AL Control = 0x21) </Action>
					<PostCondition>- DuT goes to Init
- Acknowledge error by setting Error Flag = 0
- AL Status Code:
   IF TF-1200: should be 0
   IF TF-1201: AL Status Code shall be the ID Value ; Set ID Flag = 1
- The acknowledgement of an error without setting the AckFlag to 1 is exclusively possible for a state request to Init.
- Mailbox Handler is stopped (Deactivate SyncManager Bits in 0x0807.0 and 0x080F.0 are True)
- Input and Output Handler is stopped (Deactivate SyncManager Bit in +0x07.0)
- Local Outputs are in safe state (e.g. not driven high any more)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #22.1"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x01-->
					<SetVariable Target="stateValue">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x01-->
					<SetVariable Target="stateValueNext">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x21
- stateValueNext = 0x21
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="2" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="ReturnIfNoPdSmSupported">
					<SizeOf UInt32Var="pdSmCount">allPdSm</SizeOf>
					<Compare>
						<Equal>
							<Value1>pdSmCount</Value1>
							<Value2>0</Value2>
							<Return Id="4">No Process Data SyncManagers supported by this device | Test skipped!</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitSmNoWithFirstPdSm">
					<GetArrayItem Index="0" SourceArray="allPdSm" Target="smNo"></GetArrayItem>
				</TestStep>
				<TestStep Name="InitLastPdSmOfList">
					<GetArrayItem Index="pdSmCount-1" SourceArray="allPdSm" Target="lastPdSm"></GetArrayItem>
					<Compare>
						<Equal>
							<Value1>Settings.bAll_debugMsg</Value1>
							<Value2>true</Value2>
							<WriteLine Id="5" Param0="lastPdSm" Level="Verbose">  highest process data SyncManager = {0}</WriteLine>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="9" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped">
					<Description Id="10" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="END">
					<!--Successful-->
					<WriteLine Id="11" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#22.2A SafeOp &gt; SafeOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x02" CaseId="2">
				<?MAX_OUTPUT_ID 12?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorSafeOp to PreOp with AckFlag = 0 (i.e.  AL Control = 0x02)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorSafeOp (AL Status = 0x14)
- Send start-up commands for state change SafeOp to PreOp</PreCondition>
					<Action>IF TF-1200: State request to PreOp state with AckFlag 0 (AL Control = 0x02)
IF TF-1201: State request to PreOp state with AckFlag 0 and ID Request = 1 (AL Control = 0x22) </Action>
					<PostCondition>- DuT remains in ErrorSafeOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #22.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x02-->
					<SetVariable Target="stateValue">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x22-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="2" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from 0x0134</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
					<WriteLine Id="6" Param0="expectedAlStatusCode" Level="Verbose">Read AL Status Code (0x0134) = 0x{0:x4}</WriteLine>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand SP-->
					<Description Id="7" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>SP</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="8">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!-- ErrSafeOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<WarningOnSuccess Id="9" Param0="stateValueNext" Param1="alStatus" Param2="expectedAlStatusCode" Param3="alStatusCode">Device should not confirm a state request from ErrSafeOp to PreOp without ErrAck = TRUE. | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: Expected AL Status Code = 0x{2:x4} | Read = 0x{3:x4}</WarningOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="10" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>alStatus</Value1>
							<Value2>#x02</Value2>
							<GotoStep>SUCCESS</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="11" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SUCCESS">
					<!--Successful-->
					<WriteLine Id="12" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#22.2B SafeOp &gt; SafeOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x03" CaseId="3">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorSafeOp to Boot with AckFlag = 0 (i.e.  AL Control = 0x03)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorSafeOp (AL Status = 0x14)</PreCondition>
					<Action>IF TF-1200: State request to Boot state with AckFlag 0 (AL Control = 0x03)
IF TF-1201: State request to Boot  state with AckFlag 0 and ID Request = 1 (AL Control = 0x23) </Action>
					<PostCondition>- DuT remains in ErrorSafeOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #22.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">#x03</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="2" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from 0x0134</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!-- ErrSafeOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#22.2C SafeOp &gt; SafeOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x04" CaseId="4">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorSafeOp to SafeOp with AckFlag = 0 (i.e.  AL Control = 0x04)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorSafeOp (AL Status = 0x14)</PreCondition>
					<Action>IF TF-1200: State request to SafeOp state with AckFlag 0 (AL Control = 0x04)
IF TF-1201: State request to SafeOp state with AckFlag 0 and ID Request = 1 (AL Control = 0x24) </Action>
					<PostCondition>- DuT remains in ErrorSafeOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #22.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x04-->
					<SetVariable Target="stateValue">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x24-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x24</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafOp-->
					<Description Id="2" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from 0x0134</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!-- ErrSafeOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#22.2D SafeOp &gt; SafeOp, ErrFlag = 1, AckFlag = 0, AlCtrl = 0x08" CaseId="5">
				<?MAX_OUTPUT_ID 11?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorSafeOp to Op with AckFlag = 0 (i.e.  AL Control = 0x08)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorPreOp (AL Status = 0x14)
- Send start-up commands for state change SafeOp to Op</PreCondition>
					<Action>IF TF-1200: State request to Op state with AckFlag 0 (AL Control = 0x08)
IF TF-1201: State request to Op state with AckFlag 0 and ID Request = 1 (AL Control = 0x28) </Action>
					<PostCondition>- DuT remains in Error SafeOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #22.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x08-->
					<SetVariable Target="stateValue">#x08</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x28-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x28</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="2" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from 0x0134</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand SO-->
					<Description Id="6" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>SO</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="7">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!-- ErrSafeOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="8" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="9" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="10" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="11" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#22.2E SafeOp &gt; SafeOp, ErrFlag = 1, AckFlag = 0, AlCtrl = unknown" CaseId="6">
				<?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>Check that DuT rejects state request from ErrorSafeOp to unknown with AckFlag = 0 (i.e.  AL Control = 0x06)
IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in ErrorSafeOp (AL Status = 0x14)</PreCondition>
					<Action>IF TF-1200: State request to unknown state with AckFlag 0 (AL Control = 0x06)
IF TF-1201: State request to unknown state with AckFlag 0 and ID Request = 1 (AL Control = 0x26) </Action>
					<PostCondition>- DuT remains in ErrorSafeOp
- ErrFlag remains 1 (no acknowlegement of error)
- ID Flag remains 0
- AL Status Code remains unchanged (same es before action)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #22.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = unknown (0x26)-->
					<SetVariable Target="stateValue">#x06</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x26-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="2" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode-->
					<Description Id="4" Level="Verbose">Read AL Status Code from 0x0134</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0134!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!-- ErrSafeOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="alStatusCode" Param2="expectedAlStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2} || Info: AL Status Code before event = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#23 SafeOp &gt; Init, ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x01" CaseId="7">
				<?MAX_OUTPUT_ID 18?>
				<Description>
					<Purpose>Check that DuT confirms state request from SafeOp to Init state with AckFlag = 0 (i.e.  AL Control = 0x01) and from ErrorSafeOp to Init with AckFlag = 1 (i.e. AL Control = 0x11)
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in SafeOp
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Errof Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>- State request to Init with either Ack Flag 0 or 1
IF TF-1200: State request to Init with either Ack Flag 0 (AL Control = 0x01) or 1(AL Control = 0x11) 
IF Tf-1201: State request to Init with either Ack Flag 0 ((AL Control = 0x21) or 1 (AL Control = 0x31) , IdRequest = 1</Action>
					<PostCondition>- DuT goes to Init
- Acknowledge error by setting Error Flag = 0
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- Mailbox Handler is stopped (Deactivate SyncManager Bits in 0x0807.0 and 0x080F.0 are True)
- Input and Output Handler is stopped (Deactivate SyncManager Bit in +0x07.0)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #23"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x01-->
					<SetVariable Target="stateValue">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x01-->
					<SetVariable Target="stateValueNext">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x21
- stateValueNext = 0x21
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<Description Id="2" Level="Verbose">Set to SafeOp (AL Status = 0x04)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to SafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSmAckFalse">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="4" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="5" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="6" Level="Verbose">Read AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="7" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStoppedAckFalse">
					<Description Id="8" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SUCCESS0">
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="10">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp-->
					<Description Id="11" Level="Verbose">Set to SafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="12">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSmAckTrue">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="13" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="14" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="15" Level="Verbose">Read AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="16" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStoppedAckTrue">
					<Description Id="17" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SUCCESS1">
					<!--Successful-->
					<WriteLine Id="18" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#24 SafeOp &gt; PreOp, ErrFlag = 0 or ErrAck = 1,  AlCtrl = 0x02" CaseId="8">
				<?MAX_OUTPUT_ID 20?>
				<Description>
					<Purpose>Check that DuT confirms state request from SafeOp to PreOp state with AckFlag = 0 (i.e.  AL Control = 0x01) and from ErrorSafeOp to PreOp with AckFlag = 1 (i.e. AL Control = 0x11)
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in SafeOp
- Either Error Flag is 0 (then AckFlag is 0 in Action) or Erro Flag is 1 (then AckFlag is 1 in Action)
- Send start-up commands for state change SafeOp to PreOp</PreCondition>
					<Action>IF TF-1200: State request to PreOp with either Ack Flag 0 or 1
IF Tf-1201: State request to PreOp with either Ack Flag 0 or 1, IdRequest = 1</Action>
					<PostCondition>- DuT goes to PreOp
- Acknowledge error by setting Error Flag = 0
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- Input and Output Handler are stopped (Deactivate SyncManager Bit in +0x07.0)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #24"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x02-->
					<SetVariable Target="stateValue">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x02-->
					<SetVariable Target="stateValueNext">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x22
- stateValueNext = 0x22
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="2" Level="Verbose">Set to SafeOp (AL Status = 0x04)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to SafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand SP-->
					<Description Id="4" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>SP</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="5">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="6" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="7" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="8" Level="Verbose">Check AL Status Code</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_AckFalse">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allEnabledPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped_AckFalse">
					<Description Id="9" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allEnabledPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SUCCESS">
					<!--Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="11">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="12" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="13">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand SP-->
					<Description Id="14" Level="Verbose">Send device specific start up commands</Description>
					<SendStartupCommands>
						<StateTransition>SP</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="15">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="16" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="17" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="18" Level="Verbose">Check AL Status Code</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_AckTrue">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allEnabledPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped_AckTrue">
					<Description Id="19" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allEnabledPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="20" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#25.1 SafeOp &gt; SafeOp, ErrFlag = 1, localErrFlag = 0, AckFlag = 1, AlCtrl = 0x04" CaseId="9">
				<?MAX_OUTPUT_ID 8?>
				<Description>
					<Purpose>Check that DuT confirms state request from ErrorSafeOp to SafeOp with AckFlag = 1 (i.e. AL Control = 0x14)
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in Error SafeOp (AL Status = 0x14)
- no local error on DuT</PreCondition>
					<Action>IF TF-1200: State request to SafeOp with Ack Flag 1 (AL Control = 0x14)
IF TF-1201: State request to SafeOp with Ack Flag 1 (AL Control = 0x34) and ID Request = 1</Action>
					<PostCondition>- DuT goes to SafeOp
- Acknowledge error by setting Error Flag = 0
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- EnableSmChannel (all SyncManager shall be enabled)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #25.1"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x04-->
					<SetVariable Target="stateValue">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x04-->
					<SetVariable Target="stateValueNext">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x24
- stateValueNext = 0x24
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x24</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x24</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp-->
					<Description Id="2" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="4" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="5" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="6" Level="Verbose">Check AL Status Code</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--VerifyInOutputHandlerStarted-->
					<Description Id="7" Level="Verbose">Checks if all process data SyncManagers are activated from PDI side (Bit +0x07.0 of the SyncManager register shall be 0).

Before checking the PDI SM Activation bit the test checks if the process data SyncManager has to be enabled at all (i.e. PDO length unequal zero).
If +6.0 = True than +7.0 shall be true</Description>
					<CallTestFunction Name="VerifyInOutputHandlerStarted">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="8" Param0="alStatus" Param1="alStatusCode" Level="Success">SUCCESSFUL: || AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#25.2 SafeOp &gt; SafeOp, ErrFlag = 0 or (localErrorFlag = true,  AckFlag = 1), AlCtrl = 0x04" CaseId="10">
				<?MAX_OUTPUT_ID 1?>
				<Description>
					<Purpose>Test documented only for completeness. No test logic performed.</Purpose>
					<PreCondition>- DuT in SafeOp
a) ErrFlag = 0 (AL Status = 0x04)
b) no local error and ErrorFlag = 1 (AL Status = 0x14)</PreCondition>
					<Action>- State request to SafeOp
a) AL Control = 0x04 (ErrAck = false)
b) AL Control = 0x14 (ErrAck = true)</Action>
					<PostCondition>- DuT goes to SafeOp (0x04)
- Acknowledge error by setting Error Flag = 0
- AL Status Code should be 0</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #25.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">INFO | Test Case only theoretical and cannot be tested in real environment.</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#29 SafeOp &gt; SafeOp, AL ErrFlag = 0 or AckFlag = 1, AlCtrl = 0x03" CaseId="11">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check that DuT rejects state request from SafeOP to Boot state with AckFlag = 0 (i.e.  AL Control = 0x03) and from ErrorSafeOp to Boot with AckFlag = 1 (i.e. AL Control = 0x13)
IF- Tf-1201: IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in SafeOp
Either Error Flag is 0 (then AckFlag is 0 in Action) or Errof Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action> TF-1200: State request to Boot with Ack Flag = 0 (AL Control = 0x03) or Ack Flag = 1 (AL Control = 0x13)
 TF-1201: State request to Boot with Ack Flag = 0 (AL Control = 0x23) or Ack Flag = 1 (AL Control = 0x33) and ID Flag = 1</Action>
					<PostCondition>- DuT goes to Error PreOp (0x12), i.e. Error Flag = 1
- Set AL Status Code to 0x11
- ID Flag remains 0</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #29"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x03-->
					<SetVariable Target="stateValue">3</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x11-->
					<SetVariable Target="expectedAlStatusCode">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--errAck = False-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> SafeOp -->
					<Description Id="2" Level="Verbose">Set to SafeOp (AL Status = 0x04)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to SafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SafeOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="4" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="5" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="6" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusAndAlStatusCode">
						<Parameter>alStatus</Parameter>
						<Parameter>alStatusCode</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="7" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--errAck = True-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp -->
					<Description Id="9" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="10">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SafeOp > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="11" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="12" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="13" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusAndAlStatusCode">
						<Parameter>alStatus</Parameter>
						<Parameter>alStatusCode</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="14" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#30 SafeOp &gt; SafeOp, ErrFlag = 0 or AckFlag = 1, AlCtrl = unknown" CaseId="12">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check that DuT rejects state request SafeOp to unknown state with AckFlag = 0 (i.e.  AL Control = 0x06) and from ErrorSafeOp to unknown with AckFlag = 1 (i.e. AL Control = 0x16)
IF- Tf-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in SafeOp
Either Error Flag is 0 (then AckFlag is 0 in Action) or Errof Flag is 1 (then AckFlag is 1 in Action)</PreCondition>
					<Action>IF TF-1200: State request to unknown state with either AckFlag 0 (AL Control = 0x06) or 1 (AL Control = 0x16)
IF TF-1201: State request to unknown state with either AckFlag 0 (AL Control = 0x26) or 1 (AL Control = 0x36), ID Request = 1</Action>
					<PostCondition>- DuT goes to Error SafeOp (0x12), i.e. Error Flag = 1
- ID Flag = 0
- Set AL Status Code to 0x12</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #30"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="1" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x06-->
					<SetVariable Target="stateValue">6</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x12-->
					<SetVariable Target="expectedAlStatusCode">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x216-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--errAck = False-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> SafeOp -->
					<Description Id="2" Level="Verbose">Set to SafeOp (AL Status = 0x04)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to SafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SafeOp > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="4" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="5" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="6" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusAndAlStatusCode">
						<Parameter>alStatus</Parameter>
						<Parameter>alStatusCode</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="7" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--errAck = True-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--> ErrSafeOp -->
					<Description Id="9" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="10">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--ErrSafeOp > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="11" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="12" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusAndAlStatusCode-->
					<Description Id="13" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusAndAlStatusCode">
						<Parameter>alStatus</Parameter>
						<Parameter>alStatusCode</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="14" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#31.1 SafeOp &gt; SafeOp, Sm_Chg, ErrFlag = 0, SmSett0123 match" CaseId="13">
				<?MAX_OUTPUT_ID 1?>
				<Description>
					<Purpose>Test documented only for completeness. No test logic performed.</Purpose>
					<PreCondition>- DuT uses SyncManger Change event (0x0204.04 = TRUE)
- DuT is set to SafeOp
- ErrorFlag = 0</PreCondition>
					<Action>SM Change event is issued (this can only be done by changing the SyncManager Activation Register (+0x06.1). So this is not possible. Hence, the test is only theoretical</Action>
					<PostCondition>- AL Event (= SyncManager Change Event) is acknowledged</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #31.1"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Info-->
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">INFO | Test Case only theoretical and cannot be tested in real environment.</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#31.2 SafeOp &gt; SafeOp, ErrFlag = 1, Sm_Chg" CaseId="14">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check if DuT ignores SyncManager change event in ErrorSafeOp
If TF-1201: Test is skipped.</Purpose>
					<PreCondition>- DuT in SafeOp Error (ErrFlag = 1)
- Settings for all available SyncManagers match</PreCondition>
					<Action>SyncManager Change event is generated by setting invalid SyncManager settings for one SyncManager at a time</Action>
					<PostCondition>SyncManager Change Event shall be ignored, i.e. 
DuT shall remain in ErrSafeOp with unchanged AL Status Code</PostCondition>
					<ProposalForSolution>Do not change the AL Status (0x130) and AL Status Code (0x134) due to the SyncManager change event</ProposalForSolution>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #31.2"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init smNo-->
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--> ErrSafeOp-->
					<Description Id="3" Level="Verbose">Set to ErrSafeOp (AL Status = 0x14)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>ERROR_SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to ErrSafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--stateValueNext ?-->
					<ReadEscData Target="stateValueNext">
						<Address>#x130</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="5">Failed to read register 0x0130!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode ?-->
					<Description Id="6" Level="Verbose">Read AL Status Code (0x0134)</Description>
					<ReadEscData Target="expectedAlStatusCode">
						<Address>#x134</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="7">Failed to read register 0x0134</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="8" Level="Verbose" Param0="smNo">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Delay="backSafeOPTimeout">
					<!--Event-->
					<WriteLine Id="9" Param0="backInitTimeout" Level="Output">EVENT: SM_Chg | Wait for {0}ms until expected behaviour is checked.</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="10" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Part Successful-->
					<WriteLine Id="11" Param0="smNo" Level="Success">Test successful for Sm{0}</WriteLine>
				</TestStep>
				<TestStep Name="NEXTSM">
					<SetVariable Target="smNo">smNo+1</SetVariable>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<Compare>
						<GreaterOrEqual>
							<Value1>smNo</Value1>
							<Value2>DeviceDescr.SM.Count</Value2>
							<Return Id="12"></Return>
						</GreaterOrEqual>
					</Compare>
				</TestStep>
				<TestStep Name="SkipIfVirtual">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>null</Value2>
							<GotoStep>RESET</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>true</Value2>
							<WriteLine Id="13" Level="Verbose" Param0="smNo">Skip test for Sm{0} since Flag "Sm@Virtual = True" in ESI</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.SM[smNo].Virtual</Value1>
							<Value2>true</Value2>
							<GotoStep>NEXTSM</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="RESET">
					<!--Reset device-->
					<Description Id="14">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>DeviceDescr.SM.Count</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#32 SafeOp &gt; PreOp Sm_Chg, ErrFlag = 0, SmSett01 match, SmSett 23 not match" CaseId="15">
				<?MAX_OUTPUT_ID 15?>
				<Description>
					<Purpose>Check if DuT goes to ErrorPreOp if process data SyncManagers are set to invalid settings.
If TF-1201: Test is skipped.</Purpose>
					<PreCondition>- DuT in SafeOp (AL Status = 0x04)
- Settings for all available SyncManagers match</PreCondition>
					<Action>SyncManager Change event is generated by setting invalid SyncManager settings for one process data SyncManager at a time</Action>
					<PostCondition>- DuT goes to Error PreOp, i.e. AL Status = 0x12
- Set AL Status Code: 
	When Output SyncManager Settings do not match: 0x1D
	When Input SyncManager Settings do not match: 0x1E
	AL Status Code 0x17 should not be use since it is inaccurate
- Input and Output Handler are stopped (Deactivate SyncManager Bit in +0x07.0)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #32"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep Name="InitPdIndex">
					<SetVariable Target="index32">0</SetVariable>
				</TestStep>
				<TestStep Name="InitAlStatusCodeArray">
					<InitArray TargetArray="alStatus.Code" Length="3"></InitArray>
				</TestStep>
				<TestStep Name="GetListOfAllPdSm">
					<CallTestFunction Name="GetListOfAllPdSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> PreOp -->
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--GetListOfAllEnabledSm-->
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SkipTestIfNoPdSm">
					<SizeOf UInt32Var="pdSmCount">allPdSm</SizeOf>
					<Compare>
						<Equal>
							<Value1>pdSmCount</Value1>
							<Value2>0</Value2>
							<Return Id="4">No enabled Process Data SyncManagers supported by this device | Test skipped!</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--Init smNo with first PdSm-->
					<GetArrayItem Index="index32" SourceArray="allPdSm" Target="smNo"></GetArrayItem>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode2 = 0x17-->
					<SetVariable Target="expectedAlStatusCode2">#x17</SetVariable>
				</TestStep>
				<TestStep>
					<!--Get smControlType-->
					<GetBits Source="DeviceDescr.SM[smNo].ControlByte" Target="smControlType">
						<Offset>2</Offset>
						<Length>2</Length>
					</GetBits>
					<WriteLine Id="5" Param0="smControlType" Level="Verbose">Type of next tested SyncManager = {0} | Info: 0 =  Input , 1 = Output</WriteLine>
					<Compare>
						<Equal>
							<Value1>smControlType</Value1>
							<Value2>0</Value2>
							<GotoStep>INPUTALCODE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="OUTPUTALCODE">
					<!--expectedAlStatusCode = 0x1D (Outputs)-->
					<SetVariable Target="expectedAlStatusCode">#x1D</SetVariable>
					<WriteLine Id="6" Param0="expectedAlStatusCode" Level="Verbose">expected AL Status Code according to SyncManager Type = 0x{0:x2}</WriteLine>
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<GotoStep>START</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="INPUTALCODE">
					<!--expectedAlStatusCode = 0x1E (Inputs)-->
					<SetVariable Target="expectedAlStatusCode">#x1E</SetVariable>
					<WriteLine Id="7" Param0="expectedAlStatusCode" Level="Verbose">expected AL Status Code according to SyncManager Type = 0x{0:x2}</WriteLine>
				</TestStep>
				<TestStep Name="START">
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> SafeOp -->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="9">Failed to run to SafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--GetListOfAllEnabledSm-->
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="10" Level="Verbose" Param0="smNo">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="11" Param0="backInitTimeout" Level="Output">Event: SM_Chg | Wait for {0}ms before expected behaviour is checked!</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="12" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>expectedAlStatusCode2<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped">
					<Description Id="13" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="ReadAlStatusAndStatusCodeFromEsc">
					<ReadEscData Target="alStatus.Code">
						<Address>#x130</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="14">Failed to read register 0x0135:0x0130</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ExtractAlStatus">
					<GetArrayItem SourceArray="alStatus.Code" Index="0" Target="alStatus"></GetArrayItem>
				</TestStep>
				<TestStep Name="ExtractAlStatusCode">
					<GetArrayItem SourceArray="alStatus.Code" Index="2" Target="alStatusCode"></GetArrayItem>
				</TestStep>
				<TestStep Name="END">
					<WriteLine Id="15" Param0="alStatus" Param1="alStatusCode" Param2="smNo" Level="Success">Test successful for Sm{2}: | AL Status = 0x{0:x2} | AL Status Code = 0x{1:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<SetVariable Target="index32">index32+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>index32</Value1>
							<Value2>pdSmCount</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#33 SafeOp &gt; Init, ErrFlag = 0, SmSett0 or SmSett1 not match" CaseId="16">
				<?MAX_OUTPUT_ID 14?>
				<Description>
					<Purpose>Check if DuT goes to ErrorPreOp if mailbox SyncManagers are set to invalid settings.
If TF-1201: Test is skipped.</Purpose>
					<PreCondition>- DuT is set to SafeOp (AL Status = 0x04)
- all SyncManager settings match</PreCondition>
					<Action>SyncManager Change event is generated by setting invalid SyncManager0 or SyncManager1 settings</Action>
					<PostCondition>- AL Status Code = 0x16
- AL Status = 0x11
- Mailbox Handler is stopped (Deactivate SyncManager Bits in 0x0807.0 and 0x080F.0 are True)
- Input and Output Handler is stopped (Deactivate SyncManager Bit in +0x07.0)</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #33"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfComplexDevButNoMbxSyncManagers-->
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>MBoxOut</Value2>
							<SkipCase Id="3">SKIP | No MailboxOut SyncManager configured in ESI file, i .e. device does not support mailboxes</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x11-->
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x16-->
					<SetVariable Target="expectedAlStatusCode">#x16</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode2 = 0x1D-->
					<SetVariable Target="expectedAlStatusCode2">#x1D</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode3 = 0x1E-->
					<SetVariable Target="expectedAlStatusCode3">#x1E</SetVariable>
				</TestStep>
				<TestStep>
					<!--> PreOp-->
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_InPreOP">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Init smNo-->
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="5">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--> SafeOp-->
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="6">Failed to run to SafeOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_InSafeOP">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="7" Level="Verbose" Param0="smNo">Set invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="8" Param0="backInitTimeout" Level="Output">Event: SM_Chg | Wait for {0}ms before expected behaviour is checked!</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="9" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>expectedAlStatusCode2<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>expectedAlStatusCode3<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfMbxHandlerStopped-->
					<Description Id="10" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped">
					<Description Id="11" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="END">
					<!--Part successful-->
					<WriteLine Id="12" Param0="smNo" Level="Success">SUCCESSFUL for Sm{0}</WriteLine>
				</TestStep>
				<TestStep>
					<!--All Sms tested ?-->
					<SetVariable Target="smNo">smNo+1</SetVariable>
					<Compare>
						<GreaterOrEqual>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<Return Id="13"></Return>
						</GreaterOrEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device-->
					<Description Id="14">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="Test Cases from Op to Any" GroupId="4">
			<Comment>All test cases starting at Op State</Comment>
			<TestCase Name="#37 Op &gt; Init, Ack = 0 or 1, AlCtrl = 0x01" CaseId="1">
				<?MAX_OUTPUT_ID 19?>
				<Description>
					<Purpose>Check that DuT confirms state request from Op to Init with AL Control = 0x01 or AL Control = 0x011
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in Op (AL Status = 0x08)</PreCondition>
					<Action>IF TF-1200: State request to Init state with AckFlag 0 (AL Control = 0x01) or AckFlag 1 (AL Control = 0x11)
IF TF-1201: State request to Init state with AckFlag 0 (AL Control = 0x21) or AckFlag 1 (AL Control = 0x31) and ID Request = 1</Action>
					<PostCondition>- DuT goes to Init (AL Status = 0x01)
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- Mailbox Handler is stopped (Deactivate SyncManager Bits in 0x0807.0 and 0x080F.0 are True)
- Input and Output Handler is stopped (Deactivate SyncManager Bit in +0x07.0)
- Outputs are in safe state</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #37"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="Reset">
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
					<Description Id="1" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SkipTestIfDeviceEmulationActive">
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep Name="SetStateMachineTimeouts">
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep Name="InitStateValue_0x01">
					<SetVariable Target="stateValue">#x01</SetVariable>
				</TestStep>
				<TestStep Name="InitStateValueNext_0x01">
					<SetVariable Target="stateValueNext">#x01</SetVariable>
				</TestStep>
				<TestStep Name="InitExpectedAlStatusCode_0x00">
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x21
- stateValueNext = 0x21
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x21</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SetAckTo0">
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep Name="RunToOp_Ack0">
					<Description Id="3" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_InSafeOP">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SetToStateValue_Ack0">
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="5" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="EventAck0">
					<WriteLine Id="6" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep Name="VerifyAlStatusCode_Ack0">
					<Description Id="7" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfMbxHandlerStopped_Ack0">
					<Description Id="8" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped_first">
					<Description Id="9" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="LocalOutputHandlerStoppedInInit_Ack0">
					<CallTestFunction Name="LocalOutputHandlerStoppedInInit">
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="Successful_Ack0">
					<WriteLine Id="10" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep Name="SetAckTo1">
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep Name="ResetDeviceIfOfflineTestWillBeSkipped">
					<Description Id="11">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="RunToOp">
					<Description Id="12" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="13">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SetToStateValue">
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="14" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="Event">
					<WriteLine Id="15" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep Name="VerifyAlStatusCode">
					<Description Id="16" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfMbxHandlerStopped">
					<Description Id="17" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped_second">
					<Description Id="18" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="LocalOutputHandlerStoppedInInit">
					<CallTestFunction Name="LocalOutputHandlerStoppedInInit">
						<Parameter>allPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="Successful">
					<WriteLine Id="19" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#38 Op &gt; PreOp, AckFlag = 0 or 1, AlCtrl = 0x02" CaseId="2">
				<?MAX_OUTPUT_ID 17?>
				<Description>
					<Purpose>Check that DuT confirms state request from Op to PreOp with AL Control = 0x02 or AL Control = 0x012
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in Op (AL Status = 0x08)</PreCondition>
					<Action>IF TF-1200: State request to Init state with AckFlag 0 (AL Control = 0x02) or AckFlag 1 (AL Control = 0x12)
IF TF-1201: State request to Init state with AckFlag 0 (AL Control = 0x22) or AckFlag 1 (AL Control = 0x32) and ID Request = 1</Action>
					<PostCondition>- DuT goes to PreOp (AL Status = 0x02)
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- Input and Output Handler are stopped (Deactivate SyncManager Bit in +0x07.0)
- local outputs are in safe state</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #38"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="1" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x02-->
					<SetVariable Target="stateValue">2</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x02-->
					<SetVariable Target="stateValueNext">#x02</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x22
- stateValueNext = 0x22
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x22</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--errAck = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> Op-->
					<Description Id="3" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>preOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="5" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="6" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="7" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_AckFalse">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allEnabledPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped_AckFalse">
					<Description Id="8" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allEnabledPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfLocalOutputHandlerStoppedInPreOp-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="9" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--errAck = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="10">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> Op-->
					<Description Id="11" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="12">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backInitTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="13" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="14" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="15" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_AckTrue">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allEnabledPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped_AckTrue">
					<Description Id="16" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allEnabledPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfLocalOutputHandlerStoppedInPreOp-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="17" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#39 Op &gt; SafeOp, AckFlag = 0 or 1, AlCtrl = 0x04" CaseId="3">
				<?MAX_OUTPUT_ID 19?>
				<Description>
					<Purpose>Check that DuT confirms state request from Op to PreOp with AL Control = 0x04 or AL Control = 0x014
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in Op (AL Status = 0x08)
- Send start-up commands for state change Op to SafeOp</PreCondition>
					<Action>IF TF-1200: State request to Init state with AckFlag 0 (AL Control = 0x04) or AckFlag 1 (AL Control = 0x14)
IF TF-1201: State request to Init state with AckFlag 0 (AL Control = 0x24) or AckFlag 1 (AL Control = 0x34) and ID Request = 1</Action>
					<PostCondition>- DuT goes to SafeOp (AL Status = 0x04)
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1
- Set local outputs to safe state</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #39"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="1" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x04-->
					<SetVariable Target="stateValue">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x04-->
					<SetVariable Target="stateValueNext">#x04</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x24
- stateValueNext = 0x24
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x24</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x24</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!-- > Op-->
					<Description Id="3" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand OS-->
					<Description Id="5" Level="Verbose">Send device specific start up commands (SafeOp -&gt; Op)</Description>
					<SendStartupCommands>
						<StateTransition>OS</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="6">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backSafeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="7" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="8" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--LoggerInfoLocalOutputHandlerStopped-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="9" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="10" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="11">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!-- > Op-->
					<Description Id="12" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="13">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SendStartUpCommand OS-->
					<Description Id="14" Level="Verbose">Send device specific start up commands (SafeOp -&gt; Op)</Description>
					<SendStartupCommands>
						<StateTransition>OS</StateTransition>
					</SendStartupCommands>
					<RaiseErrorOnFailure Id="15">Failed to send start-up commands!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>backSafeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="16" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="17" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--LoggerInfoLocalOutputHandlerStopped-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="18" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="19" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#40 Op &gt; Op, AckFlag 0 or 1, AlCtrl = 0x08" CaseId="4">
				<?MAX_OUTPUT_ID 16?>
				<Description>
					<Purpose>Check that DuT confirms state request from Op to Op with AL Control = 0x08 or AL Control = 0x018
IF TF-1201: Additionally, check if ID value is returned</Purpose>
					<PreCondition>- DuT in Op (AL Status = 0x08)</PreCondition>
					<Action>IF TF-1200: State request to Init state with AckFlag 0 (AL Control = 0x08) or AckFlag 1 (AL Control = 0x18)
IF TF-1201: State request to Init state with AckFlag 0 (AL Control = 0x28) or AckFlag 1 (AL Control = 0x38) and ID Request = 1</Action>
					<PostCondition>- DuT remains in Op (AL Status = 0x08)
- AL Status Code
   IF TF-1200: should be 0
   IF TF-1201: shall be the ID Value
- ID Flag 
   IF TF-1200: 0
   IF TF-1201: 1</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #40"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="1" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue = 0x08-->
					<SetVariable Target="stateValue">#x08</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x08-->
					<SetVariable Target="stateValueNext">#x08</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x00-->
					<SetVariable Target="expectedAlStatusCode">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x28
- stateValueNext = 0x28
- expectedAlStatusCode = ID-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x28</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValueNext">#x28</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="expectedAlStatusCode">uint32_idValue</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--ACK = 0-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> Op-->
					<Description Id="3" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="5" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Delay="1000">
					<!--Event-->
					<WriteLine Id="6" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="7" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="8" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--ACK = 1-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="9">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> Op-->
					<Description Id="10" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="11">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<Description Id="12">Request AL Control = 0x0018</Description>
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnFailure Id="13" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Delay="1000">
					<!--Event-->
					<WriteLine Id="14" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--VerifyAlStatusCode-->
					<Description Id="15" Level="Verbose">Check AL Status Code (0x0134)</Description>
					<CallTestFunction Name="VerifyAlStatusCode">
						<Parameter>alStatusCode</Parameter>
						<Parameter>expectedAlStatusCode</Parameter>
						<Parameter>#x0000</Parameter>
						<Parameter>alStatus</Parameter>
						<Parameter>stateValueNext</Parameter>
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="16" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#42 Op &gt; SafeOp, AckFlag = 0 or 1, AlCtrl = 0x03" CaseId="5">
				<?MAX_OUTPUT_ID 15?>
				<Description>
					<Purpose>Check that DuT rejects state request from Op to Boot state with AckFlag = 0 (i.e.  AL Control = 0x03) and from Op to Boot with AckFlag = 1 (i.e. AL Control = 0x13)
IF- Tf-1201: IF TF-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Op (Error Flag = 0)</PreCondition>
					<Action> TF-1200: State request to Boot with Ack Flag = 0 (AL Control = 0x03) or Ack Flag = 1 (AL Control = 0x13)
 TF-1201: State request to Boot with Ack Flag = 0 (AL Control = 0x23) or Ack Flag = 1 (AL Control = 0x33) and ID Flag = 1</Action>
					<PostCondition>- DuT goes to Error SafeOp, i.e. Error Flag = 1
- Set AL Status Code to 0x11
- ID Flag remains 0
- Set local outputs to safe state
- SyncManager2 is disabled (+0x07.0 = 1). Only if SyncManager 2 is not used or an input error occurs the Input SYncManager is disabled while SyncmManager 2 remains enabled </PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #42"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="1" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue =0x03-->
					<SetVariable Target="stateValue">3</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x11-->
					<SetVariable Target="expectedAlStatusCode">#x11</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x23-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x23</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--errAck = False-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> Op -->
					<Description Id="3" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSmToCheckLocalOutputHandlerStopped">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Op > stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="5" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="6" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="7" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--VerifySyncManChannelDisabled-->
					<CallTestFunction Name="VerifySyncManChannelDisabled">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--LoggerInfoLocalOutputHandlerStopped-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="8" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="9">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--errAck = True-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--> Op -->
					<Description Id="10" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="11">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Op > stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="12" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="13" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="14" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--VerifySyncManChannelDisabled-->
					<CallTestFunction Name="VerifySyncManChannelDisabled">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--LoggerInfoLocalOutputHandlerStopped-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="15" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#43 Op &gt; SafeOp, ErrFlag = 0 or AckFlag = 1, AlCtrl = unknown" CaseId="6">
				<?MAX_OUTPUT_ID 15?>
				<Description>
					<Purpose>Check that DuT rejects state request from Op to unknown state with AckFlag = 0 (i.e.  AL Control = 0x06) and from Opo to unknown with AckFlag = 1 (i.e. AL Control = 0x16)
IF- Tf-1201: Additionally, check if ID request is ignored</Purpose>
					<PreCondition>- DuT in Op</PreCondition>
					<Action>IF TF-1200: State request to unknown state with either AckFlag 0 (AL Control = 0x06) or 1 (AL Control = 0x16)
IF TF-1201: State request to unknown state with either AckFlag 0 (AL Control = 0x26) or 1 (AL Control = 0x36), ID Request = 1</Action>
					<PostCondition>- DuT goes to Error SafeOp (AL Status = 0x14)
- Set AL Status Code to 0x12
- ID Flag = 0
- Set local outputs to safe state
- SyncManager2 is disabled (+0x07.0 = 1). Only if SyncManager 2 is not used or an input error occurs the Input SyncManager is disabled while SyncManager 2 remains enabled</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #43"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipIfNotTf1201OrReg134NotSupported-->
					<CallTestFunction Name="SkipIfNotTf1201OrReg134NotSupported">
						<Parameter>bool_tf1201</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="1" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--stateValue =Unknown (0x06)-->
					<SetVariable Target="stateValue">6</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x12-->
					<SetVariable Target="expectedAlStatusCode">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--overwrite if TF-1201: 
- stateValue = 0x26-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SetVariable Target="stateValue">#x26</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--errAck = False-->
					<SetVariable Target="errAck">False</SetVariable>
				</TestStep>
				<TestStep>
					<!--> Op -->
					<Description Id="3" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="false">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="5" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="6" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="7" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--CheckIfLocalOutputHandlerStoppedInPreOp-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--LoggerInfoLocalOutputHandlerStopped-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--VerifySyncManChannelDisabled-->
					<CallTestFunction Name="VerifySyncManChannelDisabled">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="8" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="9">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--errAck = True-->
					<SetVariable Target="errAck">True</SetVariable>
				</TestStep>
				<TestStep>
					<!--> Op -->
					<Description Id="10" Level="Verbose">Set to Op (AL Status = 0x08)</Description>
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="11">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--> stateValue-->
					<RequestState ErrorAck="true">
						<StateValue>stateValue</StateValue>
						<CheckState>
							<Timeout>safeOPTimeout</Timeout>
							<AlStatus>alStatus</AlStatus>
							<AlStatusCode>alStatusCode</AlStatusCode>
						</CheckState>
					</RequestState>
					<RaiseErrorOnSuccess Id="12" Param0="stateValueNext" Param1="alStatus" Param2="alStatusCode">Invalid AL Status | Expected AL Status = 0x{0:x2} | Read = 0x{1:x2} || Info: AL Status Code = 0x{2:x4}</RaiseErrorOnSuccess>
				</TestStep>
				<TestStep>
					<!--Event-->
					<WriteLine Id="13" Param0="stateValue" Param1="errAck" Level="Output">EVENT: AL_Control.ind (AL Control State = 0x{0:x2}, Ack Flag = {1})</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="14" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--LoggerInfoLocalOutputHandlerStopped-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--VerifySyncManChannelDisabled-->
					<CallTestFunction Name="VerifySyncManChannelDisabled">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="15" Param0="alStatus" Param1="errAck" Param2="alStatusCode" Param3="alStatusCode" Level="Success">SUCCESSFUL: | AL Status = 0x{0:x2} | errAck = {1} | AL Status Code = 0x{2:x2}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="#44.1 Op &gt; Op, SmSett0123 match" CaseId="7">
				<?MAX_OUTPUT_ID 1?>
				<Description>
					<Purpose>Test only for completeness. No test logic performed.</Purpose>
					<PreCondition>- DuT uses SyncManger Change event (0x0204.04 = TRUE)
- DuT is set to Op
- ErrorFlag = 0</PreCondition>
					<Action>SM Change event is issued (this can only be done by changing the SyncManager Activation Register (+0x06.1). So this is not possible. Hence, the test is only theoretical</Action>
					<PostCondition>- AL Event is acknowledged</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #44.1"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Info-->
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">INFO | Test Case only theoretical and cannot be tested in real environment.</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#45  Op &gt; PreOp, Sm_Chg, ErrFlag = 0, SmSett01 match, SmSett 23 not match" CaseId="8">
				<?MAX_OUTPUT_ID 16?>
				<Description>
					<Purpose>Check if DuT goes to ErrorPreOp if process data SyncManagers are set to invalid settings
If TF-1201: Test is skipped</Purpose>
					<PreCondition>- DuT in Op (AL Status = 0x08)
- Settings for all available SyncManagers match</PreCondition>
					<Action>SyncManager Change event is generated by setting invalid SyncManager settings for one process data SyncManager at a time</Action>
					<PostCondition>- DuT goes to Error PreOp, i.e. AL Status = 0x12
- Set AL Status Code: 
	When Output SyncManager Settings do not match: 0x1D
	When Input SyncManager Settings do not match: 0x1E
	AL Status Code 0x17 should not be use since it is inaccurate
- Input and Output Handler are stopped (Deactivate SyncManager Bit in +0x07.0)
- local outputs are in safe state</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #45"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="2" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="3" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--InitStateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--InitPdSmIndex-->
					<SetVariable Target="index">0</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x12-->
					<SetVariable Target="stateValueNext">#x12</SetVariable>
				</TestStep>
				<TestStep>
					<!--GetListOfAllPdSm-->
					<CallTestFunction Name="GetListOfAllPdSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
					<WriteLine Id="17" Param0="allPdSm" Level="Verbose">allPdSm = {0}</WriteLine>
				</TestStep>
				<TestStep Name="GetNumberOfallPdSm">
					<SizeOf UInt32Var="uint32_sizeOfAllPdSm">allPdSm</SizeOf>
				</TestStep>
				<TestStep>
					<!--Init smNo with first PdSm-->
					<Compare>
						<Equal>
							<Value1>uint32_sizeOfAllPdSm</Value1>
							<Value2>0</Value2>
							<Return Id="4">No Process Data SyncManagers supported by this device | Test skipped!</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Init smNo with first PdSm-->
					<GetArrayItem Index="index" SourceArray="allPdSm" Target="smNo"></GetArrayItem>
				</TestStep>
				<TestStep>
					<!--Init lastPdSm-->
					<GetArrayItem Index="uint32_sizeOfAllPdSm-1" SourceArray="allPdSm" Target="lastPdSm"></GetArrayItem>
					<WriteLine Id="5" Param0="lastPdSm" Level="Verbose">highest process data Syncmanager = {0}</WriteLine>
				</TestStep>
				<TestStep Name="SETWRONGSMSETTINGS">
					<!--expectedAlStatusCode2 = 0x17-->
					<SetVariable Target="expectedAlStatusCode2">#x17</SetVariable>
				</TestStep>
				<TestStep>
					<!--Get smControlType-->
					<GetBits Source="DeviceDescr.SM[smNo].ControlByte" Target="smControlType">
						<Offset>2</Offset>
						<Length>2</Length>
					</GetBits>
					<WriteLine Id="6" Param0="smControlType" Level="Verbose">Type of next tested SyncManager = {0} | Info: 0 =  Input , 1 = Output</WriteLine>
					<Compare>
						<Equal>
							<Value1>smControlType</Value1>
							<Value2>0</Value2>
							<GotoStep>INPUTALCODE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="OUTPUTALCODE">
					<!--expectedAlStatusCode = 0x1D (Outputs)-->
					<SetVariable Target="expectedAlStatusCode">#x1D</SetVariable>
					<WriteLine Id="7" Param0="expectedAlStatusCode" Level="Verbose">expected AL Status Code according to SyncManager Type = 0x{0:x2}</WriteLine>
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<GotoStep>START</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="INPUTALCODE">
					<!--expectedAlStatusCode = 0x1E (Inputs)-->
					<SetVariable Target="expectedAlStatusCode">#x1E</SetVariable>
					<WriteLine Id="8" Param0="expectedAlStatusCode" Level="Verbose">expected AL Status Code according to SyncManager Type = 0x{0:x2}</WriteLine>
				</TestStep>
				<TestStep Name="START">
					<!--> Op -->
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="9">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--SetWrongSyncManSettings-->
					<Description Id="10" Level="Verbose" Param0="smNo">Sent invalid SyncManager settings for SM{0}</Description>
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Delay="backInitTimeout">
					<!--Event-->
					<WriteLine Id="11" Param0="backInitTimeout" Level="Output">Event: SM_Chg | Wait for {0}ms before expected behaviour is checked!</WriteLine>
				</TestStep>
				<TestStep>
					<!--GetAndVerifyAlStatusAndStatusCode-->
					<Description Id="12" Level="Verbose">Check AL Status (0x0130) and AL Status Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>expectedAlStatusCode2<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--LoggerInfoLocalOutputHandlerStopped-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allEnabledPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped">
					<Description Id="13" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allEnabledPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="END">
					<!--Part Successful-->
					<WriteLine Id="14" Param0="smNo" Level="Success">SUCCESSFUL for Sm{0}</WriteLine>
				</TestStep>
				<TestStep Name="AllPdSmTested">
					<SetVariable Target="index">index+1</SetVariable>
					<Compare>
						<Equal>
							<Value1>index</Value1>
							<Value2>uint32_sizeOfAllPdSm</Value2>
							<Return Id="15"></Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetNextPdSm">
					<GetArrayItem Index="index" SourceArray="allPdSm" Target="smNo"></GetArrayItem>
				</TestStep>
				<TestStep Name="ResetDeviceForNextSmTest">
					<Description Id="16">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<GotoStep>SETWRONGSMSETTINGS</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#46 Op &gt; Init, SmSett0 or SmSett1 not match" CaseId="9">
				<?MAX_OUTPUT_ID 12?>
				<Description>
					<Purpose>Check if DuT goes to ErrorPreOp if mailbox SyncManagers are set to invalid settings
If TF-1201: Test is skipped</Purpose>
					<PreCondition>- DuT is set to Op (AL Status = 0x08)
- all SyncManager settings match</PreCondition>
					<Action>SyncManager Change event is generated by setting invalid SyncManager0 or SyncManager1 settings</Action>
					<PostCondition>- AL Status Code = 0x16
- AL Status = 0x11
- Mailbox Handler is stopped (Deactivate SyncManager Bits in 0x0807.0 and 0x080F.0 are True)
- Input and Output Handler is stopped (Deactivate SyncManager Bit in +0x07.0)
- local outputs are in safe state</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #46"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="SkipForTf1201SinceNotExplDevIdSpecific">
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="ResetAndSkipIfOffline">
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
					<Description Id="2" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SkipTestIfDeviceEmulationActive">
					<Description Id="3" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep Name="SkipTestIfComplexDevButNoMbxSyncManagers">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.SM[0]</Value1>
							<Value2>MBoxOut</Value2>
							<SkipCase Id="4">SKIP | No MailboxOut SyncManager configured in ESI file, i .e. device does not support mailboxes</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="SetStateMachineTimeouts">
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep Name="stateValueNext_0x11">
					<SetVariable Target="stateValueNext">#x11</SetVariable>
				</TestStep>
				<TestStep Name="expcetedAlStatusCode_0x16">
					<SetVariable Target="expectedAlStatusCode">#x16</SetVariable>
				</TestStep>
				<TestStep Name="InitSmNo">
					<SetVariable Target="smNo">0</SetVariable>
				</TestStep>
				<TestStep Name="SetToPreOpForFollowingFunctionCalls">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="5">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetListOfEnabledOutputSm_forCheckOfLocalOutputHandlerStopped">
					<CallTestFunction Name="GetListOfEnabledInputOrOutputSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>Outputs</Parameter>
						<OutParameter>allEnabledOutputSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="GetListOfAllEnabledSm_forCheckIfInputAndOutputHandlerWereStopped">
					<CallTestFunction Name="GetListOfAllEnabledSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<OutParameter>allEnabledPdSm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="RESET">
					<Description Id="6">Reset at beginning of following part of test</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="Op">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="7">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SetWrongSyncManSettings">
					<CallTestFunction Name="SetWrongSyncManSettings">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>smNo</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="Event" Delay="backInitTimeout">
					<WriteLine Id="8" Param0="backInitTimeout" Level="Output">Event: SM_Chg | Wait for {0}ms before expected behaviour is checked!</WriteLine>
				</TestStep>
				<TestStep Name="GetAndVerifyAlStatusAndStatusCode">
					<Description Id="9" Level="Verbose">Check AL Status (0x0130) and AL Status Code(0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndStatusCode">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>expectedAlStatusCode<!--expected AlStatusCode-->
						</Parameter>
						<Parameter>#x0000<!--alternative AlStatusCode2-->
						</Parameter>
						<Parameter>#x0000<!--alternative  AlStatusCode3-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfMbxHandlerStopped">
					<Description Id="10" Level="Verbose">Checks if Mailbox Handler was stopped (Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfMbxHandlerStopped">
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfInputAndOutputHandlerStopped">
					<Description Id="11" Level="Verbose">Check  if process data handler was stopped: Reads the Deativate SyncManager Bit in the PDI Control SyncManager register (+0x07.0). If Deactivate Bit is not True (sm deactivated) then an Error is raised)</Description>
					<CallTestFunction Name="CheckIfInputAndOutputHandlerStopped">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>allEnabledPdSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="LocalOutputHandlerStoppedInInit">
					<CallTestFunction Name="LocalOutputHandlerStoppedInInit">
						<Parameter>allEnabledOutputSm</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="LoggerOutputThatForThisMbxSmSuccessful">
					<WriteLine Id="12" Param0="smNo" Level="Success">SUCCESSFUL for Sm{0}</WriteLine>
				</TestStep>
				<TestStep Name="CheckIfTheTwoMbxSmAreTested">
					<SetVariable Target="smNo">smNo+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>smNo</Value1>
							<Value2>2</Value2>
							<GotoStep>RESET</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="#49 Op &gt; SafeOp, WD expired" CaseId="10">
				<?MAX_OUTPUT_ID 21?>
				<Description>
					<Purpose>Check if slave goes to ErrorSafeOp if process data is stopped
If TF-1201: Test is skipped</Purpose>
					<PreCondition>- DuT is set to Op (AL Status = 0x08)
- DuT has output process data (i.e. Output SyncManager length is unequal 0)</PreCondition>
					<Action>- process data communication is stopped</Action>
					<PostCondition>- AL Status Code = 0x1B
- AL Status = 0x14
- AL Status Codes if DuT supports DC: 0x1A, 0x33, 0x34
- Output Handler is stopped (Deactivate SyncManager Bit in +0x07.0)
- local outputs are in safe state
- Warning if WD-time+10% exceeded
- Error if WD-time+OpToSafeopTimeout exceeded</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 6" Chapter="6.4,  #49"></Reference>
						<Reference Specification="ETG.1020" Chapter="Explicit Device Identification"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--SkipForTf1201SinceNotExplDevIdSpecific-->
					<Compare>
						<Equal>
							<Value1>bool_tf1201</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Test case not specific for Explicit Device Identification | Refer to test file TF-1200</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="1">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="2" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>False</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="3" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--bWarning = false-->
					<SetVariable Target="bWarning">FALSE</SetVariable>
				</TestStep>
				<TestStep>
					<!--stateValueNext = 0x14-->
					<SetVariable Target="stateValueNext">#x14</SetVariable>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x1B-->
					<AddArrayItem TargetArray="uint16ArrayExpectedAlStatusCodes">#x001B</AddArrayItem>
				</TestStep>
				<TestStep>
					<!--AllowAdditionalStatusCodesIfDcSupported-->
					<Compare>
						<Equal>
							<Value1>CurrentConfig.Dc</Value1>
							<Value2>FALSE</Value2>
							<GotoStep>SETESMTIMEOUTS</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x1A-->
					<AddArrayItem TargetArray="uint16ArrayExpectedAlStatusCodes">#x001A</AddArrayItem>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x33-->
					<AddArrayItem TargetArray="uint16ArrayExpectedAlStatusCodes">#x0033</AddArrayItem>
				</TestStep>
				<TestStep>
					<!--expectedAlStatusCode = 0x34-->
					<AddArrayItem TargetArray="uint16ArrayExpectedAlStatusCodes">#x0034</AddArrayItem>
				</TestStep>
				<TestStep Name="SETESMTIMEOUTS">
					<!--> PreOp (for following functions)-->
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="4">Failed to run to PreOp!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--GetListOfAllEnabledOutputSm and skip test if no enabled Outputs PD SM-->
					<CallTestFunction Name="GetListOfEnabledInputOrOutputSm">
						<Parameter>Settings.bAll_debugMsg</Parameter>
						<Parameter>Outputs</Parameter>
						<OutParameter>allPdSm</OutParameter>
					</CallTestFunction>
					<Compare>
						<Equal>
							<Value1>noOutputSm</Value1>
							<Value2>true</Value2>
							<SkipCase Id="5">Devcie does not have any Output Process Data SyncManagers -&gt; Skip Test Case</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>noEnabledOutputSm</Value1>
							<Value2>true</Value2>
							<SkipCase Id="6">Devcie does not have enabled Output Process Data SyncManagers -&gt; Skip Test Case</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="ReturnIfDesiredSmTypeNotAvailable">
					<SizeOf UInt32Var="uint32_lengthOfList">allPdSm</SizeOf>
					<Compare>
						<Equal>
							<Value1>Settings.bAll_debugMsg</Value1>
							<Value2>TRUE</Value2>
							<WriteLine Id="7" Param0="uint32_lengthOfList">  List of Output SM | lengthOfList = {0}</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>uint32_lengthOfList</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">SKIP | No output process datat SyncManager supported.</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="9">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--> Op -->
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="10">Failed to run to Op!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Delay="80">
					<!--Wait a time until PD frames are sent for sure-->
					<WriteLine Id="11" Level="Verbose">INFO | Wait 80ms until PD frames are sent for sure</WriteLine>
				</TestStep>
				<TestStep>
					<!--Read uint16_wdDiv-->
					<ReadEscData Target="uint16_wdDiv">
						<Address>#x400</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="12">Failed to read register 0x0400!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Read uint16_wdPd-->
					<ReadEscData Target="uint16_wdPd">
						<Address>#x420</Address>
					</ReadEscData>
					<RaiseErrorOnFailure Id="13">Failed to read register 0x0420!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--uint64_wdPdTime-->
					<SetVariable Target="uint64_wdPdTime">((uint16_wdDiv+2)*40*uint16_wdPd+uint16_wdDiv)/ 1000000</SetVariable>
				</TestStep>
				<TestStep>
					<!--uint64_wdPdInclJitter-->
					<SetVariable Target="uint64_wdPdInclJitter">(((uint16_wdDiv+2)*40*uint16_wdPd+uint16_wdDiv)+(((uint16_wdDiv+2)*40*uint16_wdPd+uint16_wdDiv)/10))/ 1000000</SetVariable>
					<WriteLine Id="14" Level="Verbose" Param0="uint64_wdPdTime" Param1="uint16_wdDiv" Param2="uint16_wdPd" Param3="uint64_wdPdInclJitter">INFO | WD time = {0} | WD Devider (reg. 0x0400)= {1} | WD PD time (reg. 0x0420) = {2} | WD time + 10%  = {3}ms</WriteLine>
				</TestStep>
				<TestStep>
					<!--uint64_wdPdPlusBackToSafeopTimeout-->
					<SetVariable Target="uint64_wdPdPlusBackToSafeopTimeout">backSafeOPTimeout - (((uint16_wdDiv+2)*40*uint16_wdPd+uint16_wdDiv)/10) / 1000000</SetVariable>
				</TestStep>
				<TestStep Name="DEBUGMakeWdTestFail">
					<SetVariable Target="bMakeWdTestFail">false</SetVariable>
				</TestStep>
				<TestStep Name="DEBUGOverwriteWdValuesToForceErrorCase">
					<!--DEBUG: overwrite WD values if debug = true-->
					<Compare>
						<Equal>
							<Value1>bMakeWdTestFail AND Settings.bAll_debugMsg</Value1>
							<Value2>TRUE</Value2>
							<SetVariable Target="uint64_wdPdTime">1</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bMakeWdTestFail AND Settings.bAll_debugMsg</Value1>
							<Value2>TRUE</Value2>
							<SetVariable Target="uint64_wdPdInclJitter">2</SetVariable>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>bMakeWdTestFail AND Settings.bAll_debugMsg</Value1>
							<Value2>TRUE</Value2>
							<SetVariable Target="uint64_wdPdPlusBackToSafeopTimeout">3</SetVariable>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="STOP_PD">
					<!--EVENT: Event: Stop Cyclic Frames-->
					<StopCyclicFrames></StopCyclicFrames>
					<WriteLine Id="15" Level="Output">EVENT | Stop process data communication</WriteLine>
				</TestStep>
				<TestStep Delay="uint64_wdPdInclJitter" Name="WAIT_PD_WD">
					<!--Wait-->
					<WriteLine Id="16" Level="Output" Param0="uint64_wdPdInclJitter">Wait for {0}ms (PD watchdog time + 10%) before checking if watchdog expiration was detected by device.</WriteLine>
				</TestStep>
				<TestStep Name="ALSTATUSCODEWARNING">
					<!--Skip Warning in Looger if WarningAccepted = true-->
					<Compare>
						<Equal>
							<Value1>Settings.b04_10_WarningAccepted</Value1>
							<Value2>TRUE</Value2>
							<GotoStep>WAIT_PD_WD_PLUS_BACK2SAFEOP</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAndVerifyAlStatusAndStatusCodeAndOnlyGenerateWarning">
					<!--GetAndVerifyAlStatusAndXStatusCodes-->
					<Description Id="17" Level="Verbose">Check AL Status (0x0130) and AL Status  Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndXStatusCodes">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>uint16ArrayExpectedAlStatusCodes<!--List of all allowed AlStatusCode-->
						</Parameter>
						<Parameter>TRUE<!--bWarning-->
						</Parameter>
						<Parameter>Settings.bAll_debugMsg<!--b_DebugMsg-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CheckIfWdReactionAlreadyDone">
					<!--CheckIfWdReactionAlreadyDone-->
					<ReadEscData Target="alStatus">
						<Address>#x0130</Address>
					</ReadEscData>
				</TestStep>
				<TestStep>
					<ReadEscData Target="alStatusCode">
						<Address>#x0130</Address>
					</ReadEscData>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>Settings.bAll_debugMsg</Value1>
							<Value2>true</Value2>
							<WriteLine Id="18">   CheckIfWdReactionAlreadyDone</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>alStatus</Value1>
							<Value2>stateValueNext</Value2>
							<GotoStep>LOCAL_OUTPUT_HANDLER_STOPPED</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>alStatusCode</Value1>
							<Value2>0x001B</Value2>
							<GotoStep>LOCAL_OUTPUT_HANDLER_STOPPED</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>alStatusCode</Value1>
							<Value2>0x001A</Value2>
							<GotoStep>LOCAL_OUTPUT_HANDLER_STOPPED</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>alStatusCode</Value1>
							<Value2>0x0033</Value2>
							<GotoStep>LOCAL_OUTPUT_HANDLER_STOPPED</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>alStatusCode</Value1>
							<Value2>0x0034</Value2>
							<GotoStep>LOCAL_OUTPUT_HANDLER_STOPPED</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep></TestStep>
				<TestStep Delay="uint64_wdPdPlusBackToSafeopTimeout" Name="WAIT_PD_WD_PLUS_BACK2SAFEOP">
					<!--Wait until WD+BackToSafeop expired-->
					<WriteLine Id="19" Level="Output" Param0="uint64_wdPdPlusBackToSafeopTimeout">Wait again until watchdog time plus BackToSafeop timeout expires ({0}ms)</WriteLine>
				</TestStep>
				<TestStep Name="ALSTATUSCODEERROR">
					<!--GetAndVerifyAlStatusAndXStatusCodes after ESM Timeout expired-->
					<Description Id="20" Level="Verbose">Check AL Status (0x0130) and AL Status  Code (0x0134)</Description>
					<CallTestFunction Name="GetAndVerifyAlStatusAndXStatusCodes">
						<Parameter>stateValueNext<!--expcted AlStatus-->
						</Parameter>
						<Parameter>uint16ArrayExpectedAlStatusCodes<!--List of all allowed AlStatusCode-->
						</Parameter>
						<Parameter>FALSE<!--bWarning-->
						</Parameter>
						<Parameter>Settings.bAll_debugMsg<!--b_DebugMsg-->
						</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="LOCAL_OUTPUT_HANDLER_STOPPED">
					<!--LocalOutputHandlerStoppedInfo-->
					<CallTestFunction Name="LocalOutputHandlerStoppedInfo">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="VerifySyncManChannelDisabled">
					<!--SmChannelDisabled-->
					<CallTestFunction Name="VerifySyncManChannelDisabled">
						<Parameter>Settings.bAll_debugMsg</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="SUCCESSFULL">
					<!--Successful-->
					<WriteLine Id="21" Level="Success" Param0="errAck">SUCCESSFUL | ErrAckBit 0x0120:04 = {0}</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="Usage of different Explicit Device ID mechanisms" GroupId="5">
			<Comment></Comment>
			<TestCase Name="ConfiguredStationAlias value" CaseId="1">
				<?MAX_OUTPUT_ID 12?>
				<Description>
					<Purpose>Check if the Configured Station Alias value read from EEPROM is 0</Purpose>
					<PreCondition>Slave in Init</PreCondition>
					<Action>Read Configured Station Alias value from EEPROM (word address 0x0004).

If ESI element Info:IdentificationAdo is not used or is set to FALSE the Station Alias value (EEPROM word address 0x0004) should be 0 as default</Action>
					<PostCondition>Warning if Configured Station Alias value is unequal 0 and ESI element Info:IdentificationAdo is not used.</PostCondition>
					<ProposalForSolution>Set Configured Station Alias value to 0.</ProposalForSolution>
					<References>
						<Reference Specification="ETG.2000" Chapter=""></Reference>
						<Reference Specification="ETG.1020" Chapter=""></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--ReturnErrorIfCurrentConfigRequiresDcAndNoCu-->
					<Description Id="1" Level="Verbose">Check if DC OpMode of the current DuT configuration requires realtime-enableing hardware and if such is connected. Ortherwise skip test.</Description>
					<CallTestFunction Name="ReturnErrorIfCurrentConfigRequiresDcAndNoCu">
						<Parameter>false</Parameter>
					</CallTestFunction>
				</TestStep>
				<TestStep>
					<!--SkipTestIfDeviceEmulationActive-->
					<Description Id="2" Level="Verbose">Check if device emulation (register 0x0140.8) is active. If active test is skipped.</Description>
					<CallTestFunction Name="SkipTestIfDeviceEmulationActive"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--Set StateMachineTimeouts-->
					<CallFunction>SetEsmTimeouts</CallFunction>
				</TestStep>
				<TestStep>
					<!--Init assignToECAT-->
					<SetVariable Target="assignToPdi">#x00</SetVariable>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to ECAT-->
					<Description Id="3" Level="Verbose">Assign EEPROM to ECAT</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="4">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Read EEPROM StationAlias-->
					<Description Id="5" Level="Verbose">Read Station Alias value from EEPROM (word address 0x0004)</Description>
					<ReadEEProm Target="uint16_stationAlias">
						<Address>4</Address>
						<Length>2</Length>
					</ReadEEProm>
					<RaiseErrorOnFailure Id="6">Failed to read Configured Station Alias value from EEPROM!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--Init assignToPdi-->
					<SetVariable Target="assignToPdi">#x01</SetVariable>
				</TestStep>
				<TestStep>
					<!--assign EEPROM to PDI-->
					<Description Id="7" Level="Verbose">Assign EEPROM to PDI</Description>
					<WriteEscData Source="assignToPdi">
						<Address>#x500</Address>
					</WriteEscData>
					<RaiseErrorOnFailure Id="8">Failed to write register 0x0500 (assign EEPROM access to PDI)!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<!--IdentificationAdo = null-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Info</Value1>
							<Value2>FALSE</Value2>
							<SkipCase Id="9">ESI element Info:IdentificationAdo not supported -&gt; skip case | INFO: ESI element DeviceDescr.Info not available</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Info.IdentificationAdo</Value1>
							<Value2>null</Value2>
							<SkipCase Id="10">ESI element IdentificationAdo is used -&gt; test is skipped!</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>uint16_stationAlias</Value1>
							<Value2>0</Value2>
							<RaiseWarning Id="11" Param0="uint16_stationAlias">Station Alias value (EEPROM word address 0x0004) should be 0 by default || INFO: Read Station Alias value = 0x{0:x4}</RaiseWarning>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Successfull-->
					<WriteLine Id="12" Param0="alStatus" Level="Success">SUCCESSFUL: Configured Station Alias value use ok || INFO:  Configured Station Alias value read from EEPROM 0x0004 = {0:x4}</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Explicit Device ID usage" CaseId="2">
				<?MAX_OUTPUT_ID 3?>
				<Description>
					<Purpose>Check if the Configured Station Alias is used as Explicit Device ID to indicate that other and better machanism for device identification are recommended.</Purpose>
					<PreCondition>Slave in Init</PreCondition>
					<Action>Check if ESI element Info:IdentificationAdo = 0x0012.</Action>
					<PostCondition>Warning if ESI element Info:IdentificationAdo = 12 (dec).</PostCondition>
					<ProposalForSolution>As unique ID either the Requesting ID or the Direct ID mechanism as defined by the Explicit Device Identification should be used. Using the Configured Station Alias includes potential race condition problems. Use other mechanisms.</ProposalForSolution>
					<References>
						<Reference Specification="ETG.2000" Chapter=""></Reference>
						<Reference Specification="ETG.1020" Chapter=""></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--IdentificationAdo = null-->
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Info</Value1>
							<Value2>FALSE</Value2>
							<SkipCase Id="0">ESI element Info:IdentificationAdo not supported -&gt; skip case | INFO: ESI element DeviceDescr.Info not available</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Info.IdentificationAdo</Value1>
							<Value2>null</Value2>
							<SkipCase Id="1">ESI element Info:IdentificationAdo is not used -&gt; test is skipped!</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Info.IdentificationAdo</Value1>
							<Value2>12</Value2>
							<SkipCase Id="2" Param0="uint16_stationAlias">ESI element IdentificationAdo  is unequal 12 (dec)  -&gt; test is skipped!</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Info.IdentificationAdo</Value1>
							<Value2>12</Value2>
							<RaiseWarning Id="3" Param0="uint16_stationAlias">Configured Station Alias value in EEPROM should not be used. It has potential race condition errors. </RaiseWarning>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
		</TestGroup>
	</TestGroups>
</EtherCATTest>