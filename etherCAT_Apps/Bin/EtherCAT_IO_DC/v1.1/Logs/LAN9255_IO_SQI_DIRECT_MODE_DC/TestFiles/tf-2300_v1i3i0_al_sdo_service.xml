<?xml version="1.0" encoding="UTF-8" standalone="yes"?><EtherCATTest Name="TF-2300 AL CoE SDO Service" xsi:noNamespaceSchemaLocation="EtherCATTest.xsd" SchemaVersion="1.0.31" TestId="8960" TestVersion="1.3.0" RealeaseState="Released" TestVendorId="1" Url="http://www.ethercat.org/en/conformance.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<Comment>This test file tests the CoE SDO Service of the application layer. The file is subdivided into two test groups:
1. SDO Object Access based on online dictionary
2. SDO Object Access based on offline dictionary

Definitions used within this test set:
ASE			Application Service Element
CoE			CAN application protocol over EtherCAT
DC			Distributed Clocks
DuT			Device under Test
ECAT			EtherCAT
ESI			EtherCAT Slave Information file
PDO			Process Data Object
RO			Read-Only access right
RT			Real-Time
RW			Read/Write access rights
SDO			Service Data Object
SDO Info		SDO Information Services
SI			Subindex
SI0			Subindex 0
SI1			Subindex 1
SM			Sync Manager
WO			Write-Only access rights

Init			Init state
PreOp			Pre-Operational state
SafeOp			Safe-Operational state
Op			Operational state

Online Dictionary			Data structure addressed by Index and Subindex that contains descriptions of the objects. The DuTs online object dictionary is accessed by the SDO Info protocol.
Offline Dictionary			Data structure addressed by Index and Subindex that contains descriptions of the objects. The DuTs offline dictionary is represented by the /EtherCATInfo/Descriptions/Devices/Device/Profile/Dictionary- element of the ESI
Single Access			With the Single Access the complete object data is uploaded or downloaded separately by every SubIndex
Object Description		Represents the object description of an online or offline object dictionary
Entry Description			Represents the entry description of an online or offline dictionary
Current Byte Length of the object	Is calculated by the entry description of the current max SI (BitOffset+BitLen+7)/8. If the max SI exceeds the number of entry descriptions, the current byte length is determined by the bit size of the object description (only valid for offline dictionary)
RxPDO				Receive PDO (Meaning those objects, written from master to slave, i.e. in output direction)
TxPDO				Transmit PDO (Meaning those objects, which are read by the master from the slave ESC memory)

Refers to:
ETG.1000.5
ETG.1000.6
ETG.1020
ETG.2000</Comment>
	<History>
		<HistoryEntry Editor="OH" TestVersion="1.0.5" Date="2010-01-10">New description type added.</HistoryEntry>
		<HistoryEntry Editor="OH" TestVersion="1.0.6" Date="2010-01-25">Additional SDO abort codes admitted</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.8" Date="2010-03-12">New 'EtherCATTestV1i0i2i8.xsd' assigned.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.10" Date="2010-04-01" Id="EX_100601_1">Where: test function "ReadWOObject"
Reason: Test Action "UploadCoEObject" may return false when slave returns a valid Abort Code. In this case the "RaiseErrorOnSuccess" TestAction generates an error with no reason.
Solution: Delete "RaiseErrorOnSuccess" Test Action</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.11" Date="2010-07-13" Id="EN_100713">Add Abort Code 0x6090030 (Value range of parameter exceeded(only for write access)) to the allowed Abort Codes testing the Download of RW SDOs in PreOp, SafeOp, Op ([1]-[9][10][11])</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.12" Date="2010-10-27" Id="EN_101027">Where: Test Case [1][2]
Reason:  Copy-Past Error. PdoAssign has to be PdoConfig in Test Case 1 of Test Group 2
Solution: Change PdoAssign to PdoConfig</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.13" Date="2010-10-28" Id="EN_101028">Where: In test function ReadROorRWObject of TF-2300[1][15-17,18-20]
Reason: The CTT did not dtect an invalid segmented SDO service (e.g invalid wrong command specifier). This was changed in CTT V1.20.3. The corresponding error message is handed to the test file now.
Enhancement: Besides the Abort Code also return the error messages of underlying mailbox layer in the CTT. </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.14" Date="2010-10-28" Id="EX_101028"> Affected Test Cases [1][5,8,11,14,17,20]
Reason: Extension for OP testcases in relation to ETG.7000 Annex A DC Device Tests.
If only a DC mode is supported by the slave, all test cases in operational have to be tested manually. 
Solution: Test cases changed to return an output which contains a list of the corresponding object indices. The slave is only set to PreOp to do this. </HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.0.15" Date="2010-11-03">Build Number incremented du to Internal Handling reasons</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.0.16" Date="2010-11-03" Id="EN_101103">Added EN/EX IDs and editorial changes</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.17" Date="2011-01-11" Id="EN_110111">Affected test cases  TG 1 [9,10,11]
Reason: Due to previous test enhancements (EN_100713) there is no need to skip the objects 0x1010 and 0x1011
Solution: Test function "WriteRWObject" is changed to allow these indexes.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.18" Date="2011-02-01" Id="EN_110201">Where:Test actions UploadCoEObject and DownloadCoEObject, 
All test cases are affected.
Reason: The CTT did not detect an invalid segmented SDO service (e.g invalid wrong command specifier). This was changed in CTT V1.20.3. The corresponding error message is handed to the test file now.
Enhancement: Besides the Abort Code also return the error messages of underlying mailbox layer in the CTT. </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.20" Date="2011-02-25" Id="EN_110225_1">Where: Reset function
Description: When no FMMUs are supported by the ESC (reg 0x04 = 0) the function did still try to reset one FMMU
Solution: skip resetting FMMUs when FMMU count = 0</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.21" Date="2011-03-15" Id="EN_110315">Schema V1.0.3 assigned</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.22" Date="2011-03-29" Id="EN_110329">Where: Test Case Sync Manager PDO Assignment [1][1] Description: If the ESI attribute at Device:Mailbox:Coe:@PdoAssign does not match to the SDO Info accesss rights of the corresponding objects a invalid Warning message is generated by the test case. Solution:  The readInPreOp variable is replaced with writeInPreOp in test step  'CheckGeneralAccessRights/Compare[0]RaiseWarning@Param1' </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.23" Date="2011-05-02" Id="EN_110502">Test function WriteRWObjects // The valid SDO Abort Code 0x06090030 is not accepted in case of a SDO download. // The test function was changed to accept these Abort Code.  </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.24" Date="2011-07-29" Id="EN_110729">Test function Reset / Invalid reset test function in case of syncmanager count =0 and Fmmu count = 0/ Is corrected in the test function</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.25" Date="2011-08-31" Id="EN_110831_1">Test function ReadSMPDOAssignObjects / The test function shall throw an error if a one of the sub indexes is not readable /Test function has been changed to return an error if the SDO upload of the PDO index fails. </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.25" Date="2011-08-31" Id="EN_110831_2">Test function Reset / The test function shall throw an more detailed error if one of the reset actions fails / Error messages improved. </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.26" Date="2012-06-06" Id="EN_120606_1">Test function 'ReadROorRWObject' / Comparison of SdoInfo bit length against the actual received bit length shall be skipped for the following data types:VISIBLE_STRING, OCTED_STRING and UNICODE_STRING. / Test function changed to skip the comparison for these data types</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.0" Date="2012-08-30" Id="EN_120830_1">Renamed and new EtherCATTest.xsd (v1.0.11) assigned</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.0" Date="2012-08-30" Id="EN_120830_2">Test Group 'SDO Information Object Access' / The online dictionary is reloaded depending on the current EtherCAT state, because the contend of the dictionary may differ in PreOP, SafeOp or OP</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.0" Date="2012-08-30" Id="EN_120830_3">New test group 'SDO Object access based on offline dictionary' / Since the access rights of the offline dictionary are EtherCAT state pending, the SDO object access can also be tested based on the offline dictionary.</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="1.1.5" Date="2013-01-31" Id="EN_130131_1">Editorial changes</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.6" Date="2013-04-16" Id="EN_130416_1">Test Actions DownloadCoEObject and UploadCoEObject / A serious error in the lower MailboxProtocoll may not be recognized by the testfunctions that uses oneof those test actions / All test functions changed to check first for a possible Mailbox protocol failure and than for a SDO Abort Code</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="1.1.7" Date="2013-09-10" Id="EN_130910">Skip Function 'WriteRWObject' also for command objects</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.8" Date="2014-03-26" Id="EN_140326">All Test Cases: Due to changes at the CTT test parser the test step names have to be unique</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.9" Date="2014-09-23" Id="EN_140923">Since slaves can be synchronized with the real time extension of the CTT there is no need to skip test cases that requires dc synchronization in Operational state. Therefore all test cases in Operational state check if the real time extension is used.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.10" Date="2015-02-12" Id="EN_150212">Description improved. </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.11" Date="2015-09-02" Id="EN_TF_2300_150902" Type="Enhancement">Test schema version set to 1.0.23</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.12" Date="2015-10-16" Id="EN_TF_2300_151016" Type="Enhancement">Test Cases Download RW SDO in OP(online and offline):New allowed Abort Code 0x06010006 (Object mapped in RxPDO, SDO download blocked)</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.13" Date="2015-11-18" Id="EN_TF_2300_151118" Type="Enhancement">Test Cases Download RW SDO in OP(online and offline): Description enhanced</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.14" Date="2016-02-16" Id="EN_TF_2300_160216" Type="Enhancement">Where: 1.5, 1.8, 1.11, 1.14, 1.17, 1.20, 2.5, 2.8, 2.11, 2.14, 2.17, 2.20
Reason: The test cases shall throw an error if no real time extension is available and a Dc-Op Mode is set.
Solution: New test function 'EcBaseFunctions.CheckIfCurrentConfigRequiresCu2508' added to the named test cases to check whether Cu2508 is connected.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.15" Date="2016-02-16" Id="EX_140538_1" Type="Enhancement">Where: 1.9, 1.10, 1.11
Reason:These test cases upload the value from the RW object in PreOp/SafeOp/Op and download the value. For certain objects the read-values are not accepted as write-values (e.g. command-objects, here ETG.5003-0001, object 0xFBF2:02, defined CoE Abort Code is 0x06040043). 
Solution: List of allowed CoE Abort Codes for the SDO Write access has been extended by Abort Code 0x06040043 (General parameter incompatibility reason).</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.15" Date="2016-02-16" Id="EX_140538_2" Type="Enhancement">Where: 2.9, 2.10, 2.11
Reason:These test cases use the values of the RW objects in the offline object dictionary (ESI element Device:Profile) and download the value. For certain objects the read-values are not accepted as write-values (e.g. command-objects, here ETG.5003-0001, object 0xFBF2:02, defined CoE Abort Code is 0x06040043).
Solution: The list of allowed CoE Abort Codes for the SDO Write access has been extended by Abort Code 0x06040043 (General parameter incompatibility reason).</HistoryEntry>
		<HistoryEntry Editor="B.L." TestVersion="1.1.16" Date="2016-02-17" Id="EN_TF_2300_160217" Type="Enhancement">Update to Schema version 1.0.24</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.17" Date="2016-04-28" Id="EX_TF_2300_160428_1" Type="Enhancement">Where: 1.9-1.11, 1.15-1.20, 2.9-2.11, 2.15-2.20
Reason: These test cases uploads SDOs via a single access in the correct EtherCAT state. To return the abort code 0x08000022 makes no sense because DuT is in the correct state depending on the SDO access rights. 
Solution: The previously allowed abort code 0x08000022 (Data cannot be transferred or stored to the application because of present device state) has been removed.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.18" Date="2016-04-28" Id="EX_TF_2300_160428_2" Type="Enhancement">Where: 1.12-1.14, 2.12-2.14
Reason: These test cases uploads SDOs WO objects in a specific EtherCAT slave state. Depending on the objects access rights in other states the DuT may return 0x08000022 which is not an accepted abort code.
Solution: Abort code 0x08000022 (Data cannot be transferred or stored to the application because of present device state) has been added to the allowed abort codes.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.19" Date="2016-07-01" Id="EX_TF_2300_160701_1" Type="Enhancement">Where: ReadRoObject, WriteWoObject
Reason: Test functions do not apply to the test schema.
Solution: Unparsable output messages removed.</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.1.20" Date="2016-07-05">Release version</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.2.0" Date="2016-11-23" Id="EX_TF_2300_161123_1" Type="Enhancement">Where: 1.1-2, 2.1-2
Reason: Test variable overflow if max subindex is 255 of PDO assign and config objects
Solution: The current value of the SI0- variable is cheked before it is incremented </HistoryEntry>
		<HistoryEntry Editor="D.O." TestVersion="1.2.1" Date="2017-02-22" Type="Enhancement">Updated Values according to Test Schema</HistoryEntry>
		<HistoryEntry Date="2017-03-27" Editor="G.E." TestVersion="1.2.2" Type="Enhancement">Where: 1.9-1.11, 1.15-1.20, 2.9-2.11, 2.15-2.20
Reason: Abort code 0x08000022 still present in the Test description, altough it was removed according to the EX_TF_2300_160428_1.
Solution:Abort code 0x08000022 removed from the list of allowed Abort codes in the Test description.
Where: 1.12-1.14, 2.12-2.14
Reason: Abort code 0x08000022 not present in the Test description, altough it was added according to the EX_TF_2300_160428_2.
Solution:Abort code 0x08000022 added to the list of allowed Abort codes in the Test description.
Where: WriteRWObject
Reason: Abort code 0x08000022 still present in the list of allowed abort codes.
Solution: Abort code 0x08000022 removed from list of allowed abort codes, according to EX_TF_2300_160428_1. Test descriptions updated.
Enhancement of test descriptions (Purpose, Pre Condition, Action, Post Condition, References) in all test cases. 
Abbreviations added to the Test file comment element. Corrected typos function step names (DownloadSubindex0To00, DownloadSubindex0ToMaxSubindex, offline onlineDictionary). Corrections do not affect the test flow.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.2.4" Date="2018-07-05" Type="Enhancement">Rollback of gloabal variables and IsCommandObject</HistoryEntry>
		<HistoryEntry Editor="B.L." TestVersion="1.2.5" Date="2018-09-14" Type="Enhancement">Add output IDs and update Schema version to 1.0.31</HistoryEntry>
	</History>
	<TestVariables>
		<TestVariable>
			<Name>safeOPTimeout</Name>
			<Type>Int32</Type>
		</TestVariable>
		<TestVariable>
			<Name>preOPTimeout</Name>
			<Type>Int32</Type>
		</TestVariable>
	</TestVariables>
	<Variables>
		<Variable>
			<Name>allowSdoBlocked</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>abortCode</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>abortMessage</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>access</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>assignedIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>assignEeprom</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>assignObjects</Name>
			<Type>ArrayOfUInt16</Type>
		</Variable>
		<Variable>
			<Name>backInitTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>backSafeOPTimeout</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>bitSize</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>boolVar</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>byteSize</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>byteVal</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>byteVal1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>clearSMAdo</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>cmpIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>cmpListIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>cmpSubIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>count</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>data</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>defData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>defDataLen</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>fmmuClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>fmmuSync</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>index</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>indexCount</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>int32Val</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>isPdoObject</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>isCommandObject</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>isSMPdoAssignObject</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>listIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>listLen</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>mandatoryDict</Name>
			<Type>ObjectDictionary</Type>
		</Variable>
		<Variable>
			<Name>mappingObjects</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>maxSubIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>name</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>objctCnt</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>objectList</Name>
			<Type>ObjectList</Type>
		</Variable>
		<Variable>
			<Name>objectResponse</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>objectResponseLen</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>offlineDict</Name>
			<Type>ObjectDictionary</Type>
		</Variable>
		<Variable>
			<Name>onlineDict</Name>
			<Type>ObjectDictionary</Type>
		</Variable>
		<Variable>
			<Name>readInOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>readInPreOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>readInSafeOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>smAdo</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>smClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>specialListIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>specialObject</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>specialobjectList</Name>
			<Type>ObjectList</Type>
		</Variable>
		<Variable>
			<Name>subIdx</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>subIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>subindex</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>tempListIndex</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>tmpData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>tmpUInt16</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>tmpUInt32</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>type</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>uInt16Val</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt16Val2</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt32Val</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>writeInOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>writeInPreOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>startToSafeOp</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>writeInSafeOp</Name>
			<Type>Bool</Type>
		</Variable>
	</Variables>
	<IncludedTestFunctions>
		<FileName Version="0.0.47">EcBaseFunctions_V1i0i0.xml</FileName>
	</IncludedTestFunctions>
	<TestFunctions>
		<TestFunction Name="CheckFIxedPdoAssignmentObject" FunctionId="101"><?MAX_OUTPUT_ID 2?>
			<TestStep Name="StoreCurrentAssignment">
				<Description Id="0" Level="Verbose">Reads the current pdo assign and returns if the max subindex is 0.</Description>
				<CallFunction>ReadSMPDOAssignObjects</CallFunction>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<GotoStep>end</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckInvalidDownloadOfAFixedPdoAssignment">
				<Description Id="1" Level="Verbose">Downloads a value 0x1000 to each object entry and expects an abort.</Description>
				<CallFunction>InvalidDownloadOfAFixedPdoAssignment</CallFunction>
			</TestStep>
			<TestStep Name="end">
				<WriteLine Id="2" Level="Output" Param0="index">Fixed PDO assignment object 0x{0:x4} checked.</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckFIxedPdoMappingObject" FunctionId="102"><?MAX_OUTPUT_ID 2?>
			<TestStep Name="StoreCurrentMapping">
				<Description Id="0" Level="Verbose">Reads the current pdo mapping and returns if the max subindex is 0.</Description>
				<CallFunction>ReadSMPDOMappingObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<GotoStep>end</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckInvalidDownloadOfAFixedPdoMapping">
				<Description Id="1" Level="Verbose">Downloads a value 0x1000 to each object entry and expects an abort.</Description>
				<CallFunction>InvalidDownloadOfAFixedPdoMapping</CallFunction>
			</TestStep>
			<TestStep Name="end">
				<WriteLine Id="2" Level="Output" Param0="index">Fixed PDO mapping object 0x{0:x4} checked.</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckIsPdoObject" FunctionId="103"><?MAX_OUTPUT_ID 3?>
			<TestStep Name="CheckIndexForRxPDO">
				<Compare>
					<Lower>
						<Value1>index</Value1>
						<Value2>#x1600</Value2>
						<GotoStep>SetIsNotAndReturn</GotoStep>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>index</Value1>
						<Value2>#x17ff</Value2>
						<GotoStep>CheckIndexForTxPDO</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="0" Level="Verbose" Param0="index" Param1="subIdx">Due to its index (0x{0:x4}:{1}) this object is used as RXPDO and is subject to special access rights</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="isPdoObject">true</SetVariable>
				<Compare>
					<Equal>
						<Value1>1</Value1>
						<Value2>1</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckIndexForTxPDO">
				<Compare>
					<Lower>
						<Value1>index</Value1>
						<Value2>#x1a00</Value2>
						<GotoStep>SetIsNotAndReturn</GotoStep>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>index</Value1>
						<Value2>#x1bff</Value2>
						<GotoStep>SetIsNotAndReturn</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="2" Level="Verbose" Param0="index" Param1="subIdx">Due to its index (0x{0:x4}:{1}) this object is used as TXPDO and is subject to special access rights</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="isPdoObject">true</SetVariable>
				<Compare>
					<Equal>
						<Value1>1</Value1>
						<Value2>1</Value2>
						<Return Id="3"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SetIsNotAndReturn">
				<SetVariable Target="isPdoObject">false</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckIsSMPdoAssignObject" FunctionId="104"><?MAX_OUTPUT_ID 1?>
			<TestStep Name="CheckIndexForSmPdoAssignment">
				<Compare>
					<Lower>
						<Value1>index</Value1>
						<Value2>#x1C10</Value2>
						<GotoStep>SetFalseAndReturn</GotoStep>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>index</Value1>
						<Value2>#x1C2F</Value2>
						<GotoStep>SetFalseAndReturn</GotoStep>
					</Greater>
				</Compare>
			</TestStep>
			<TestStep>
				<WriteLine Id="0" Param0="index" Param1="subIdx" Level="Verbose">Due to its index (0x{0:x4}:{1}) this object is used as PDO assignment object and is subject to special access rights</WriteLine>
			</TestStep>
			<TestStep Name="SetTrueAndReturn">
				<SetVariable Target="isSMPdoAssignObject">true</SetVariable>
				<Compare>
					<Equal>
						<Value1>1</Value1>
						<Value2>1</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SetFalseAndReturn">
				<SetVariable Target="isSMPdoAssignObject">false</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckListForIndex" FunctionId="105">
			<TestStep>
				<SetVariable Target="indexCount">0</SetVariable>
			</TestStep>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="cmpListIndex">
					<Index>cmpIndex</Index>
				</GetObjectDescriptionFromList>
			</TestStep>
			<TestStep>
				<CallFunction>CompareIndexes</CallFunction>
			</TestStep>
			<TestStep>
				<SetVariable Target="cmpListIndex">cmpListIndex+1</SetVariable>
			</TestStep>
			<TestStep>
				<Compare>
					<Lower>
						<Value1>cmpListIndex</Value1>
						<Value2>count</Value2>
						<GotoStep>2</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="cmpListIndex">0</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckVariablePdoAssignmentObject" FunctionId="106"><?MAX_OUTPUT_ID 3?>
			<TestStep Name="StoreCurrentAssignment">
				<Description Id="0" Level="Verbose">Reads the current pdo assign and returns if the max subindex is 0.</Description>
				<CallFunction>ReadSMPDOAssignObjects</CallFunction>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<GotoStep>end</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckValidDownloadOfPdoAssign">
				<Description Id="1" Level="Verbose">Downloads subIndex 0 to 00; Downloads the old assign; Downloads the max subIndex to subindex 0.</Description>
				<CallFunction>ValidDownloadOfAVariablePdoAssignment</CallFunction>
			</TestStep>
			<TestStep Name="CheckInvalidDownloadOfPdoAssign">
				<Description Id="2" Level="Verbose">Downloads a value 0x1000 to each object entry and expects an abort.</Description>
				<CallFunction>InvalidDownloadOfAVariablePdoAssignment</CallFunction>
			</TestStep>
			<TestStep Name="end">
				<WriteLine Id="3" Level="Output" Param0="index">Variable PDO assignment object 0x{0:x4} checked.</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckVariablePdoMappingObject" FunctionId="107"><?MAX_OUTPUT_ID 3?>
			<TestStep Name="StoreCurrentMapping">
				<Description Id="0" Level="Verbose">Reads the current pdo mapping and returns if the max subindex is 0.</Description>
				<CallFunction>ReadSMPDOMappingObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<GotoStep>end</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckInvalidDownloadOfPdoMapping">
				<Description Id="1" Level="Verbose">Downloads a value 0x1000 to each object entry and expects an abort.</Description>
				<CallFunction>InvalidDownloadOfAVariablePdoMapping</CallFunction>
			</TestStep>
			<TestStep Name="CheckValidDownloadOfPdoMapping">
				<Description Id="2" Level="Verbose">Downloads subIndex 0 to 00; Downloads the read default mapping; Downloads the max subIndex to subindex 0.</Description>
				<CallFunction>ValidDownloadOfAVariablePdoMapping</CallFunction>
			</TestStep>
			<TestStep Name="end">
				<WriteLine Id="3" Level="Output" Param0="index">Variable PDO mapping object 0x{0:x4} checked.</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CompareIndexes" FunctionId="201"><?MAX_OUTPUT_ID 0?>
			<TestStep>
				<Compare>
					<NotEqual>
						<Value1>index</Value1>
						<Value2>cmpIndex</Value2>
						<Return Id="0"></Return>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="indexCount">indexCount+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="InitMailbox" FunctionId="301"><?MAX_OUTPUT_ID 0?>
			<TestStep>
				<CallTestFunction Name="SetStateMachTimeouts"></CallTestFunction>
			</TestStep>
			<TestStep>
				<CallTestFunction Name="Reset"></CallTestFunction>
				<RaiseErrorOnFailure Id="0">Reset test function failed</RaiseErrorOnFailure>
			</TestStep>
		</TestFunction>
		<TestFunction Name="InvalidDownloadOfAFixedPdoAssignment" FunctionId="401"><?MAX_OUTPUT_ID 10?>
			<TestStep Name="InitSubIndex">
				<SetVariable Target="subIdx">0</SetVariable>
				<RaiseErrorOnFailure Id="0">Failed to set subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="IncrementSubIndex">
				<SetVariable Target="subIdx">subIdx+1</SetVariable>
				<RaiseErrorOnFailure Id="1">Failed to increment subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="SetInvalidValueToDownload">
				<SetVariable Target="tmpUInt16">#x1000</SetVariable>
				<RaiseErrorOnFailure Id="2">Failed to set invalid download value</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="Download00ToSubindex0">
				<Description Id="3" Level="Verbose" Param0="index">Downloads value 00 to object 0x{0:x4}:0 and expects an abort.</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<Data>00</Data>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="4" Param0="index" Param1="abortMessage">Serious error while downloading 0x{0:x4}:0 ({1}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseWarning Id="5" Param0="index">Download data 00 to 0x{0:x4}:0 succeeds, although a PDO assignment is not supported.</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="6" Param0="index" Param1="abortCode" Level="Verbose">Downloading object 0x{0:x4}:0 failed as expected.  (0x{1:x8})</WriteLine>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="InvalidDownload">
				<Description Id="7" Level="Verbose" Param0="index" Param1="subIdx" Param2="tmpUInt16">Downloads value {2:x4} to object 0x{0:x4}:{1:d}, although a PDO assign is not supported.</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>tmpUInt16</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="8" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseWarning Id="9" Param0="index" Param1="subIdx" Param2="tmpUInt16">Download data 0x{2:x4} to 0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 0 before</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="10" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Downloading object 0x{0:x4}:{1} failed as expected.  (0x{2:x8} )</WriteLine>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="checkSi0">
				<Compare>
					<Lower>
						<Value1>subIdx</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>IncrementSubIndex</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="InvalidDownloadOfAFixedPdoMapping" FunctionId="402"><?MAX_OUTPUT_ID 10?>
			<TestStep Name="InitSubIndex">
				<SetVariable Target="subIdx">0</SetVariable>
				<RaiseErrorOnFailure Id="0">Failed to set subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="IncrementSubIndex">
				<SetVariable Target="subIdx">subIdx+1</SetVariable>
				<RaiseErrorOnFailure Id="1">Failed to increment subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="SetInvalidValueToDownload">
				<SetVariable Target="uInt32Val">#x1000</SetVariable>
				<RaiseErrorOnFailure Id="2">Failed to set invalid download value</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="Download00ToSubindex0">
				<Description Id="3" Level="Verbose" Param0="index">Downloads value 00 to object 0x{0:x4}:0 and expects an abort.</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<Data>00</Data>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="4" Param0="index" Param1="abortMessage">Serious error while downloading 0x{0:x4}:0 ({1}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseWarning Id="5" Param0="index">Download data 00 to 0x{0:x4}:0 succeeds, although the SDO Info access is read only in PreOp.</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="6" Param0="index" Param1="abortCode" Level="Verbose">Downloading object 0x{0:x4}:0 failed as expected.  (0x{1:x8})</WriteLine>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="InvalidDownload">
				<Description Id="7" Level="Verbose" Param0="index" Param1="subIdx" Param2="uInt32Val">Downloads value {2:x8} to object 0x{0:x4}:{1:d}, although the SDO Info access is not writable in PreOp.</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="8" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseWarning Id="9" Param0="index" Param1="subIdx" Param2="uInt32Val">Download data 0x{2:x8} to 0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 0 before</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="10" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Downloading object 0x{0:x4}:{1} failed as expected.  (0x{2:x8} )</WriteLine>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="checkSi0">
				<Compare>
					<Lower>
						<Value1>subIdx</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>IncrementSubIndex</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="InvalidDownloadOfAVariablePdoAssignment" FunctionId="403"><?MAX_OUTPUT_ID 6?>
			<TestStep Name="InitSubIndex">
				<SetVariable Target="subIdx">0</SetVariable>
				<RaiseErrorOnFailure Id="0">Failed to set subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="IncrementSubIndex">
				<SetVariable Target="subIdx">subIdx+1</SetVariable>
				<RaiseErrorOnFailure Id="1">Failed to increment subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="SetInvalidValueToDownload">
				<SetVariable Target="tmpUInt16">#x1000</SetVariable>
				<RaiseErrorOnFailure Id="2">Failed to set invalid download value</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="InvalidDownload">
				<Description Id="3" Level="Verbose" Param0="index" Param1="subIdx" Param2="tmpUInt16">Trying to download value {2:x4} to object 0x{0:x4}:{1:d}, although 0x{0:x4}:0 was not set to 0 before. This should cause an abort</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>tmpUInt16</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="4" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseWarning Id="5" Param0="index" Param1="subIdx" Param2="tmpUInt16">Download data 0x{2:x4} to 0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 0 before</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="6" Param0="index" Param1="subIdx" Param2="abortCode" Param3="abortMessage" Level="Verbose">Downloading object 0x{0:x4}:{1} failed as expected.  (0x{2:x8} {3})</WriteLine>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="checkSi0">
				<Compare>
					<Lower>
						<Value1>subIdx</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>IncrementSubIndex</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="InvalidDownloadOfAVariablePdoMapping" FunctionId="404"><?MAX_OUTPUT_ID 6?>
			<TestStep Name="InitSubIndex">
				<SetVariable Target="subIdx">0</SetVariable>
				<RaiseErrorOnFailure Id="0">Failed to set subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="IncrementSubIndex">
				<SetVariable Target="subIdx">subIdx+1</SetVariable>
				<RaiseErrorOnFailure Id="1">Failed to increment subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="SetInvalidValueToDownload">
				<SetVariable Target="uInt32Val">#x1000</SetVariable>
				<RaiseErrorOnFailure Id="2">Failed to set invalid download value</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="InvalidDownload">
				<Description Id="3" Level="Verbose" Param0="index" Param1="subIdx" Param2="uInt32Val">Trying to download value {2:x8} to object 0x{0:x4}:{1:d}, although 0x{0:x4}:0 was not set to 0 before. This should cause an abort.</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="4" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseWarning Id="5" Param0="index" Param1="subIdx" Param2="uInt32Val">Download data 0x{2:x8} to 0x{0:x4}:{1} succeeds, although object 0x{0:x4}:0 was not set to 0 before</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="6" Param0="index" Param1="subIdx" Param2="abortCode" Param3="abortMessage" Level="Verbose">Downloading object 0x{0:x4}:{1} failed as expected.  (0x{2:x8} {3})</WriteLine>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="checkSi0">
				<Compare>
					<Lower>
						<Value1>subIdx</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>IncrementSubIndex</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadROorRWObject" FunctionId="501"><?MAX_OUTPUT_ID 10?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<WriteLine Id="0" Param0="index" Param1="subIdx" Param2="type">0x{0:x4}:{1:x}: DataType=0x{2:x} is a gap entry and will be skipped</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsPdoObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isPdoObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isSMPdoAssignObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>objectResponse</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<WriteLine Id="1" Param0="index" Param1="subIdx" Level="Verbose">Send Mailbox: Mbx(CoE SDO Req: 'Initiate Upload' (2) Idx=0x{0:x4} Sub={1})</WriteLine>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="2" Param0="index" Param1="subIdx" Param2="abortMessage">0x{0:x4}:{1:x}: Mailbox protocol error: {2}</RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="3" Param0="index" Param1="subIdx" Param2="objectResponse" Level="Verbose">Read Mbx(CoE SDO Res : 'Upload Response' (2) Idx=0x{0:x4} Sub={1} Data={2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<WriteLine Id="4" Param0="index" Param1="subIdx" Param2="abortCode">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<RaiseWarning Id="5" Param0="index" Param1="subIdx" Param2="abortCode">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<WriteLine Id="6" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="7" Param0="index" Param1="subIdx" Param2="abortCode">Unexpected abort received: Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="objectResponseLen">objectResponse</SizeOf>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>9</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>10</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>11</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>byteSize</Value1>
						<Value2>8192</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>objectResponseLen</Value1>
						<Value2>byteSize</Value2>
						<RaiseError Id="8" Param0="index" Param1="subIdx" Param2="byteSize" Param3="objectResponseLen">Invalid size of returned object 0x{0:X}, subindex {1:d}, Expected: {2:d}, Returned(bytes) : {3:d}</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="End">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="9" Param0="index" Param1="subIdx" Param2="abortCode" Level="Output">0x{0:x4}:{1:x}: Allowed SDO Abort Code received: 0x{2:x}</WriteLine>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="10" Param0="index" Param1="subIdx" Level="Output">0x{0:x4}:{1:x}: Upload succeeded</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadSMPDOAssignObjects" FunctionId="502"><?MAX_OUTPUT_ID 10?>
			<TestStep Name="InitAssignArray">
				<InitArray Length="0" TargetArray="assignObjects"></InitArray>
			</TestStep>
			<TestStep Name="UploadCurrentMaxSi0">
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
					<BitLen>8</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="0" Param0="index">Failed to read PDO Assign Object 0x{0:x4}:0</RaiseErrorOnFailure>
				<WriteLine Id="1" Level="Verbose" Param0="maxSubIndex">Max SubIndex: {0}</WriteLine>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="2" Param0="index" Param1="abortMessage">Failed to upload 0x{0:x4}:{0} ({1}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<Return Id="3"></Return>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="4" Param0="index" Param1="byteVal1" Param2="abortMessage">Failed to read data of PDO Assign Object 0x{0:x4}:{1:d} {2}</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="InitSi0">
				<SetVariable Target="byteVal1">0</SetVariable>
				<WriteLine Id="5" Level="Verbose" Param0="index" Param1="subIdx" Param2="bitSize" Param3="byteSize">Object Index: 0x{0:x4} SubIndex: {1:d} BitSize:{2:d} ByteSize: {3:d}</WriteLine>
			</TestStep>
			<TestStep Name="IncrementSi0">
				<SetVariable Target="byteVal1">byteVal1+1</SetVariable>
			</TestStep>
			<TestStep Name="NextObject">
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>byteVal1</SubIndex>
					<DataVar>uInt16Val</DataVar>
					<BitLen>16</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="6" Param0="index" Param1="byteVal1">Failed to read data of PDO Assign Object 0x{0:x4}:{1:d}</RaiseErrorOnFailure>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="7" Param0="index" Param1="byteVal1" Param2="abortMessage">Failed to upload 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="8" Param0="index" Param1="byteVal1" Param2="abortMessage">Failed to read data of PDO Assign Object 0x{0:x4}:{1:d} {2}</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="AddToList">
				<AddArrayItem TargetArray="assignObjects">uInt16Val</AddArrayItem>
				<WriteLine Id="9" Level="Verbose" Param0="index" Param1="byteVal1" Param2="uInt16Val">0x{0:X4}:{1:X}: Assigned PDO: 0x{2:X4}</WriteLine>
			</TestStep>
			<TestStep Name="CheckCurrentSi0">
				<Compare>
					<Lower>
						<Value1>byteVal1</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>IncrementSi0</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="end">
				<WriteLine Id="10" Level="Output" Param0="assignObjects">SM PDO Assign objects: {0}</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadSMPDOMappingObject" FunctionId="503"><?MAX_OUTPUT_ID 7?>
			<TestStep Name="InitMappingArray">
				<InitArray Length="0" TargetArray="mappingObjects"></InitArray>
			</TestStep>
			<TestStep Name="UploadMaxSubIndex">
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
					<BitLen>8</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="0" Param0="index">Failed to read PDO Mapping Object 0x{0:x4}:0</RaiseErrorOnFailure>
				<WriteLine Id="1" Param0="maxSubIndex" Level="Verbose">Max SubIndex: {0}</WriteLine>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="2" Param0="index" Param1="abortMessage">Failed to upload 0x{0:x4}:0 ({1}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>maxSubIndex</Value1>
						<Value2>0</Value2>
						<Return Id="3"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="InitCurrentSubIndex">
				<SetVariable Target="subIdx">0</SetVariable>
			</TestStep>
			<TestStep Name="IncrementSubIndex">
				<SetVariable Target="subIdx">subIdx+1</SetVariable>
			</TestStep>
			<TestStep Name="UploadObjectEntryValue">
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<BitLen>32</BitLen>
				</UploadCoEObject>
				<RaiseErrorOnFailure Id="4" Param0="index" Param1="subIdx">Failed to read data of PDO Mapping Object 0x{0:x4}:{1:d}</RaiseErrorOnFailure>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="5" Param0="index" Param1="subIdx" Param2="abortMessage">Failed to upload 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="AddToArray">
				<AddArrayItem TargetArray="mappingObjects">uInt32Val</AddArrayItem>
				<WriteLine Id="6" Level="Verbose" Param0="index" Param1="subIdx" Param2="uInt32Val">0x{0:X4}:{1:X}: Mapped entry data: {2:X8}</WriteLine>
			</TestStep>
			<TestStep Name="IncrementSubIndex2">
				<Compare>
					<Lower>
						<Value1>subIdx</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>IncrementSubIndex</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="end">
				<WriteLine Id="7" Level="Output" Param0="mappingObjects">Mapping objects: {0}</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ReadWOObject" FunctionId="504"><?MAX_OUTPUT_ID 4?>
			<TestStep Name="GetEntry">
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<WriteLine Id="0" Param0="index" Param1="subIdx" Param2="type">0x{0:x4}:{1:x}: DataType=0x{2:x} is a gap entry and will be skipped</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="UploadEntry">
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>data</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="1" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while uploading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000022</Value2>
						<WriteLine Id="2" Param0="index" Param1="subIdx" Param2="abortCode">0x{0:x4}:{1} Allowed abort code received: 0x{2:X}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000022</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06010001</Value2>
						<WriteLine Id="3" Param0="index" Param1="subIdx" Param2="abortCode">0x{0:x4}:{1} Allowed abort code received: 0x{2:X}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06010001</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseWarning Id="4" Param0="abortCode" Param1="index" Param2="subIdx">Object 0x{1:X4}:{2:X} returns an unexpected SDO AbortCode: 0x{0:X}, expected code: 0x06010001 (Attempt to read Write only object) </RaiseWarning>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="IncrementListIndex">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="SetStateMachTimeouts" FunctionId="601"><?MAX_OUTPUT_ID 1?>
			<TestStep>
				<SetVariable Target="preOPTimeout">3000</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="safeOPTimeout">3000</SetVariable>
			</TestStep>
			<TestStep>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info</Value1>
						<Value2>false</Value2>
						<Return Id="0"></Return>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info.StateMachine.Timeout</Value1>
						<Value2>false</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="preOPTimeout">DeviceDescr.Info.StateMachine.Timeout.PreopTimeout</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="safeOPTimeout">DeviceDescr.Info.StateMachine.Timeout.SafeopOpTimeout</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ValidDownloadOfAVariablePdoAssignment" FunctionId="701"><?MAX_OUTPUT_ID 14?>
			<TestStep Name="InitSubIndex">
				<Description Id="0" Level="Verbose">InitSubIndex</Description>
				<SetVariable Target="subIdx">1</SetVariable>
				<RaiseErrorOnFailure Id="1">Failed to set subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="Download00ToSubindex0">
				<Description Id="2" Level="Verbose" Param0="index">Download value 00 to object 0x{0:x4}:0</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<Data>00</Data>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="3" Param0="index" Param1="abortMessage">Serious error while downloading 0x{0:x4}:0 ({1}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="4" Param0="index" Param1="abortCode">Download data 00 to 0x{0:x4}:0 failed. (0x{1:x8})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetValueToDownload">
				<Description Id="5" Level="Verbose">Get value from assignObjects</Description>
				<GetArrayItem Index="subIdx-1" SourceArray="assignObjects" Target="uInt16Val"></GetArrayItem>
				<RaiseErrorOnFailure Id="6">Failed to get download value</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="DownloadValue">
				<Description Id="7" Level="Verbose" Param0="index" Param1="subIdx" Param2="uInt16Val">Download value {2:x4} to object 0x{0:x4}:{1:d}</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt16Val</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="8" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="9" Param0="index" Param1="abortMessage" Param2="abortCode" Param3="subIdx">Download value 0x{0:x4}:{3} failed. ({1}, 0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="IncrementSubIndex">
				<Description Id="10" Level="Verbose">Increment subIndex</Description>
				<SetVariable Target="subIdx">subIdx+1</SetVariable>
				<RaiseErrorOnFailure Id="11">Failed to increment subIdx</RaiseErrorOnFailure>
				<Compare>
					<LowerOrEqual>
						<Value1>subIdx</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>GetValueToDownload</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="DownloadMaxSubIndexToSubindex0">
				<Description Id="12" Level="Verbose" Param0="index" Param1="maxSubIndex">Download value 0x {1:x2}  to object 0x{0:x4}:0</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="13" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="14" Param0="index" Param1="abortMessage" Param2="abortCode" Param3="maxSubIndex">Download data 0x{3:x2} to 0x{0:x4}:0 failed. ({1}, 0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="ValidDownloadOfAVariablePdoMapping" FunctionId="702"><?MAX_OUTPUT_ID 17?>
			<TestStep Name="InitSubIndex">
				<Description Id="0" Level="Verbose">InitSubIndex</Description>
				<SetVariable Target="subIdx">1</SetVariable>
				<RaiseErrorOnFailure Id="1">Failed to set subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="InitListIndex">
				<Description Id="2" Level="Verbose">InitArrayIndex</Description>
				<SetVariable Target="int32Val">0</SetVariable>
				<RaiseErrorOnFailure Id="3">Failed to set subIdx</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="Download00ToSubindex0">
				<Description Id="4" Level="Verbose" Param0="index">Download value 00 to object 0x{0:x4}:0</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<Data>00</Data>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="5" Param0="index" Param1="abortMessage">Download data 00 to 0x{0:x4}:0 failed. ({1})</RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="6" Param0="index" Param1="abortCode">Download data 00 to 0x{0:x4}:0 failed. Abort Code 0x{1:x8} received.</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="GetValueToDownload">
				<Description Id="7" Level="Verbose">Get value from mappingObjects</Description>
				<GetBits Source="mappingObjects" Target="uInt32Val">
					<Offset>int32Val*4*8</Offset>
					<Length>32</Length>
				</GetBits>
				<RaiseErrorOnFailure Id="8">Failed to get download value</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="DownloadValue">
				<Description Id="9" Level="Verbose" Param0="index" Param1="subIdx" Param2="uInt32Val">Download value {2:x8} to object 0x{0:x4}:{1:d}</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>uInt32Val</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="10" Param0="index" Param1="abortMessage">Download data to 0x{0:x4}:0 failed. ({1})</RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="11" Param0="index" Param1="abortMessage" Param2="abortCode" Param3="subIdx">Download value 0x{0:x4}:{3} failed. ({1}, 0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="IncrementArrayIndex">
				<Description Id="12" Level="Verbose">IncrementArrayIndex</Description>
				<SetVariable Target="int32Val">int32Val+1</SetVariable>
				<RaiseErrorOnFailure Id="13">Failed to set int32Val</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="IncrementSubIndex">
				<Description Id="14" Level="Verbose">Increment subIndex</Description>
				<SetVariable Target="subIdx">subIdx+1</SetVariable>
				<RaiseErrorOnFailure Id="15">Failed to increment subIdx</RaiseErrorOnFailure>
				<Compare>
					<LowerOrEqual>
						<Value1>subIdx</Value1>
						<Value2>maxSubIndex</Value2>
						<GotoStep>GetValueToDownload</GotoStep>
					</LowerOrEqual>
				</Compare>
			</TestStep>
			<TestStep Name="DownloadMaxSubIndexToSubindex0">
				<Description Id="16" Level="Verbose" Param0="index" Param1="maxSubIndex">Download value 0x {1:x2}  to object 0x{0:x4}:0</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>0</SubIndex>
					<DataVar>maxSubIndex</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="17" Param0="index" Param1="abortMessage" Param2="abortCode" Param3="maxSubIndex">Download data 0x{3:x2} to 0x{0:x4}:0 failed. ({1}, 0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteObjectDescription" FunctionId="801"><?MAX_OUTPUT_ID 0?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Name>name</Name>
					<BitSize>bitSize</BitSize>
					<Flags>
						<Access ReadInOP="readInOp" WriteinOP="writeInOp">access</Access>
					</Flags>
				</GetObjectDescriptionFromList>
			</TestStep>
			<TestStep>
				<WriteLine Id="0" Level="Verbose" Param0="index" Param1="subIdx" Param2="readInOp" Param3="writeInOp">0x{0:x4}:{1} Read in OP = {2}, Write in Op = {3}</WriteLine>
			</TestStep>
			<TestStep Name="IncrementListIndex">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteObjectList" FunctionId="802"><?MAX_OUTPUT_ID 2?>
			<TestStep>
				<SetVariable Target="listIndex">0</SetVariable>
			</TestStep>
			<TestStep Name="WriteObjectDescription">
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<DefaultData>defData</DefaultData>
					<Flags>
						<Access ReadInOP="readInOp" ReadInPreop="readInPreOp" ReadInSafeOP="readInSafeOp" WriteinOP="writeInOp" WriteInPreOp="writeInPreOp" WriteInSafeOp="writeInSafeOp">hallo</Access>
					</Flags>
				</GetObjectDescriptionFromList>
				<WriteLine Id="0" Param0="index" Param1="subIdx" Param2="listIndex">Objects[{2}] 0x{0:x4}:{1}</WriteLine>
				<WriteLine Id="1" Param0="listIndex" Param1="readInPreOp" Param2="readInSafeOp" Param3="readInOp">Objects[{0}] ReadAccess: PreOp {1}, SafeOp {2}, Op {3}</WriteLine>
				<WriteLine Id="2" Param0="listIndex" Param1="writeInPreOp" Param2="writeInSafeOp" Param3="writeInOp">Objects[{0}] WriteAccess: PreOp {1}, SafeOp {2}, Op {3}</WriteLine>
			</TestStep>
			<TestStep>
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
			</TestStep>
			<TestStep></TestStep>
			<TestStep>
				<Compare>
					<Lower>
						<Value1>listIndex</Value1>
						<Value2>count</Value2>
						<GotoStep>WriteObjectDescription</GotoStep>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="listIndex">0</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteROObject" FunctionId="803"><?MAX_OUTPUT_ID 18?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<WriteLine Id="0" Param0="index" Param1="subIdx" Param2="type">0x{0:x4}:{1:x}: DataType=0x{2:x} is a gap entry and will be skipped</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsPdoObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isPdoObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isSMPdoAssignObject</Value1>
						<Value2>true</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>data</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<WriteLine Id="1" Param0="index" Param1="subIdx" Level="Verbose">Send Mailbox: Mbx(CoE SDO Req: 'Initiate Upload' (2) Idx=0x{0:x4} Sub={1})</WriteLine>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="2" Param0="index" Param1="subIdx" Param2="abortMessage">0x{0:x4}:{1:x}: Mailbox protocol error: {2}</RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="3" Param0="index" Param1="subIdx" Param2="data" Level="Verbose">Read Mbx(CoE SDO Res : 'Upload Response' (2) Idx=0x{0:x4} Sub={1} Data={2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>TryToDownloadData</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<WriteLine Id="4" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<WriteLine Id="5" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<WriteLine Id="6" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode 0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000022</Value2>
						<WriteLine Id="7" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000022</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="8" Param0="index" Param1="subIdx" Param2="abortCode">Unexpected abort received: Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="TryToDownloadData">
				<Description Id="9" Level="Verbose" Param0="index" Param1="subIdx" Param2="data">Send Mbx(CoE SDO Req : 'Initiate Download' (1) Idx=0x{0:x4} Sub={1:d} Data={2})</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>data</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="10" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="11" Param0="index" Param1="subIdx" Param2="data">Because of the SDO Info access rights download data({2}) to 0x{0:x4}:{1} has to be aborted.</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<WriteLine Id="13" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000022</Value2>
						<WriteLine Id="14" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000022</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090030</Value2>
						<WriteLine Id="15" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090030</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06010002</Value2>
						<WriteLine Id="16" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06010002</Value2>
						<GotoStep>End</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="17" Param0="index" Param1="subIdx" Param2="abortCode">Unexpected abort received: Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="End">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
				<WriteLine Id="18" Level="Output" Param0="index" Param1="subIdx" Param2="abortCode">0x{0:x4}:{1:x}: Allowed SDO Abort Code received: 0x{2:x}</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteRWObject" FunctionId="804"><?MAX_OUTPUT_ID 16?>
			<TestStep>
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<BitSize>bitSize</BitSize>
					<DefaultData>defData</DefaultData>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsPdoObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isPdoObject</Value1>
						<Value2>true</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
				<Compare>
					<Equal>
						<Value1>isSMPdoAssignObject</Value1>
						<Value2>true</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SkipIfCommandObject">
				<CallTestFunction Name="IsCommandObject">
					<Parameter>index</Parameter>
					<OutParameter>isCommandObject</OutParameter>
				</CallTestFunction>
				<Compare>
					<Equal>
						<Value1>isCommandObject</Value1>
						<Value2>true</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="byteSize">(bitSize+7)/8</SetVariable>
			</TestStep>
			<TestStep>
				<SizeOf UInt32Var="defDataLen">defData</SizeOf>
				<Compare>
					<NotEqual>
						<Value1>defDataLen</Value1>
						<Value2>0</Value2>
						<GotoStep>WriteDefaultData</GotoStep>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep>
				<UploadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>defData</DataVar>
					<BitLen>bitSize</BitLen>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</UploadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="0" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while uploading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="1" Param0="index" Param1="subIdx" Param2="defData" Level="Verbose">Read Mbx(CoE SDO Res : 'Upload Response' (2) Idx=0x{0:x4} Sub={1} Data={2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>WriteDefaultData</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<WriteLine Id="2" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<WriteLine Id="3" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<WriteLine Id="4" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="5" Param0="index" Param1="subIdx" Param2="abortCode">Unexpected abort received: Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="WriteDefaultData">
				<Description Id="6" Level="Verbose" Param0="index" Param1="subIdx" Param2="defData">Send Mbx(CoE SDO Req : 'Initiate Download' (1) Idx=0x{0:x4} Sub={1:d} Data={2})</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>defData</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="7" Param0="index" Param1="subIdx" Param2="abortMessage">Serious error while downloading 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="8" Param0="index" Param1="subIdx" Level="Output">0x{0:x4}:{1} Download succeeded</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090030</Value2>
						<WriteLine Id="9" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090030</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<RaiseWarning Id="10" Param0="index" Param1="subIdx" Param2="abortCode">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</RaiseWarning>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<WriteLine Id="11" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06040043</Value2>
						<WriteLine Id="12" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06040043</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode == #x6010006 AND allowSdoBlocked</Value1>
						<Value2>True</Value2>
						<WriteLine Id="13" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode == #x6010006 AND allowSdoBlocked</Value1>
						<Value2>True</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="14" Param0="index" Param1="subIdx" Param2="abortCode">Unexpected abort received: Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="IncrementListIndex">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="15" Param0="index" Param1="subIdx" Param2="abortCode" Level="Output">0x{0:x4}:{1:x}: Allowed SDO Abort Code received: 0x{2:x}</WriteLine>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<WriteLine Id="16" Param0="index" Param1="subIdx" Param2="abortCode" Level="Output">0x{0:x4}:{1:x}: Download succeeded</WriteLine>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="WriteWOObject" FunctionId="805"><?MAX_OUTPUT_ID 9?>
			<TestStep Name="GetEntryFromList">
				<GetObjectDescriptionFromList Source="objectList" ListIndex="listIndex">
					<Index>index</Index>
					<SubIdx>subIdx</SubIdx>
					<Type>type</Type>
					<DefaultData>defData</DefaultData>
				</GetObjectDescriptionFromList>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<WriteLine Id="0" Param0="index" Param1="subIdx" Param2="type">0x{0:x4}:{1:x}: DataType=0x{2:x} is a gap entry and will be skipped</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>type</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetDefaultDataLength">
				<SizeOf UInt32Var="defDataLen">defData</SizeOf>
				<Compare>
					<Equal>
						<Value1>defDataLen</Value1>
						<Value2>0</Value2>
						<WriteLine Id="1" Param0="index" Param1="subIdx">Can not test the access of object 0x{0:x4}:{1}, because no default data is defined.</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>defDataLen</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="WriteObject">
				<Description Id="2" Level="Verbose" Param0="index" Param1="subIdx" Param2="data">Send Mbx(CoE SDO Req : 'Initiate Download' (1) Idx=0x{0:x4} Sub={1:d} Data={2})</Description>
				<DownloadCoEObject>
					<Index>index</Index>
					<SubIndex>subIdx</SubIndex>
					<DataVar>defData</DataVar>
					<AbortCode>abortCode</AbortCode>
					<AbortMessage>abortMessage</AbortMessage>
				</DownloadCoEObject>
				<Compare>
					<NotEqual>
						<Value1>abortMessage</Value1>
						<Value2>EmptyString</Value2>
						<RaiseError Id="3" Param0="index" Param1="subIdx" Param2="abortMessage">Failed to download 0x{0:x4}:{1:d} ({2}) </RaiseError>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<WriteLine Id="4" Param0="index" Param1="subIdx" Param2="abortCode">0x{0:x4}:{1} Allowed abort code received: 0x{2:X}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x06090011</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<WriteLine Id="5" Param0="index" Param1="subIdx" Param2="abortCode">0x{0:x4}:{1} Allowed abort code received: 0x{2:X}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000020</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<WriteLine Id="6" Param0="index" Param1="subIdx" Param2="abortCode">0x{0:x4}:{1} Allowed abort code received: 0x{2:X}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode</Value1>
						<Value2>#x08000021</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode == #x6010006 AND allowSdoBlocked</Value1>
						<Value2>True</Value2>
						<WriteLine Id="7" Param0="index" Param1="subIdx" Param2="abortCode" Level="Verbose">Read Mbx(CoE SDO Req : 'Abort Transfer' (4) Idx=0x{0:x4} Sub={1} AbortCode=0x{2:x})</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>abortCode == #x6010006 AND allowSdoBlocked</Value1>
						<Value2>True</Value2>
						<GotoStep>IncrementListIndex</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>abortCode</Value1>
						<Value2>0</Value2>
						<RaiseError Id="8" Param0="index" Param1="subIdx" Param2="abortCode">Failed to download 0x{0:x4}:{1} (Unexpected SDO AbortCode 0x{2:x}) </RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="IncrementListIndex">
				<SetVariable Target="listIndex">listIndex+1</SetVariable>
				<WriteLine Id="9" Level="Verbose" Param0="index" Param1="subIdx">SDO Info object access of 0x{0:x4}:{1} tested successfully</WriteLine>
			</TestStep>
		</TestFunction>
	</TestFunctions>
	<TestGroups>
		<TestGroup Name="SDO Object Access based on online dictionary" GroupId="1">
			<Comment>If SDO Info is supported, these test cases check the correct SDO object access based on the SDO Info access rights.
Therefore valid and invalid SDO up- and downloads are done to ensure a correct behaviour of the DuT's SDO service (In case of a download a value which was uploaded beforehand is downloaded to the same object / object entry again).

i.e. The Objects access rights flags are uploaded via the SDO Information services, where the Object and Entry descriptions are uploaded from the online object dictionary, present in the device under test. The object access rights information is then used to test in-/valid data uploads and downloads to objects, using the SDO Upload/Download services, in order to verify the behaviour of the device. The reactions are captured and analyzed. In the Logger the Tool returns a positive feedback in case of a successfully performed test, and a negative feedback, in the form of Warnings and Errors, if the test was executed with a not recommended behaviour or with a not allowed behaviour respectively.

Refers to:
ETG.1000.5 (6.1.4 CoE ASE)
ETG.1000.6 (5.6.3.5 Object Description, 5.6.3.6 Entry Description, 5.6.7.4.10 Sync Manager PDO Assignment, 5.6.2.7.2 SDO Abort Codes)
ETG.1020
ETG.2000</Comment>
			<TestCase Name="Sync Manager PDO Assignment (online)" CaseId="1"><?MAX_OUTPUT_ID 13?>
				<Description>
					<Purpose>-The access rights of Sync Manager Pdo assignment objects (0x1C12-0x1C2F) are tested.
-The test checks the Sdo Info access rights according to the PdoAssign attribute of the ESI.
-If the DuT supports PDO assign, the named objects access shall be read/write.</Purpose>
					<PreCondition>1. Device supports the mailbox CoE protocol and the SDO Info protocol
2. Device has been reset</PreCondition>
					<Action>1. State transition to PreOp
2. Upload the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip object entries with value != 0 and further on consider only SM PDO assign objects:
4.1 Check general access rights
4.2 According to the Mailbox:CoE@PdoAssign attribute perform in-/valid downloads to object entries
4.2.1 In case of Fixed assign of PDO SM Object (PdoAssign = FALSE or is not present)
	1. Perform upload of objects
	2.1 Perform invalid download to SI0 of object
	2.2 Perform invalid download of a value to object
4.2.2 In case of Variable assign of PDO SM Object (PdoAssign = TRUE)
	1. Perform upload of objects
	2.1 Perform valid download of a value 00 to SI0 (SubIndex 0 shall be writeable to 00)
	2.2 Perform valid value download to object entries (SubIndex 1 to n shall be writeable)
	2.3 Perform valid Max SI value download to SI0 of an object (SubIndex 0 shall be writable to the max Subindex)
	3. Perform invalid value download to object entries, although SI0 of an object was not set to 0 beforehand (download of a new value to an object entry (0 to n) without setting subIndex 0 to 00 shall cause an abort)</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. SM PDO assign object is acquired from the uploaded dictionary, as is its description and access right flags in PreOp, SafeOp, Op
4.1 Raise Warning for unexpected write/read access in checked states accordingly
	-PdoAssign of ESI is FALSE or not present
		1.The access of SubIndex 0 shall be RO in all states
	-PdoAssign of ESI is TRUE
		1. The access of SubIndex 0 shall be read in all states and write in PreOp.
4.2.1 In case of Fixed assign of PDO SM Object
	1. End test step if max subindex = 0. Raise error for failed upload, if abort code or abort mesage is received
	2. End test step if allowed abort code is received. Raise Warning if download succeeds. Raise Error if abort message is received.
4.2.2 In case of Variable assign of PDO SM Object
	1. End test step if max subindex = 0. Raise error for failed upload, if abort code or abort mesage is received
	2. Raise Error if abort message or abort code received
	3. End test step if abort code is received. Raise Warning if download succeeds. Raise error if abort mesage is received.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.7.4.10 Sync Manager PDO Assignment"></Reference>
						<Reference Specification="ETG.1020" Chapter="10 Change of Mapping Objects"></Reference>
						<Reference Specification="ETG.2000" Chapter=""></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get online Dictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetObjectList">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict"></GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<Return Id="6">Online Object Dictionary does not contain an object</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="GetNextObject">
					<GetObjectDescriptionFromList ListIndex="listIndex" Source="objectList">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<Flags>
							<Access ReadInPreop="readInPreOp" ReadInSafeOP="readInSafeOp" ReadInOP="readInOp" WriteInPreOp="writeInPreOp" WriteInSafeOp="writeInSafeOp" WriteinOP="writeInOp">access</Access>
						</Flags>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep Name="SkipNonZeroSubIndexes">
					<Compare>
						<NotEqual>
							<Value1>subIdx</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CheckIsPdoAssignIndex">
					<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>isSMPdoAssignObject</Value1>
							<Value2>false</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckGeneralAccessRights">
					<Compare>
						<NotEqual>
							<Value1>writeInPreOp</Value1>
							<Value2>DeviceDescr.Mailbox.CoE.PdoAssign</Value2>
							<RaiseWarning Id="7" Param0="index" Param1="writeInPreOp" Param2="DeviceDescr.Mailbox.CoE.PdoAssign">Unexpected object write access in PreOp ({1}) for PDO Assign Object 0x{0:x4}:0! Expected: {2}</RaiseWarning>
						</NotEqual>
					</Compare>
					<Compare>
						<Equal>
							<Value1>readInPreOp</Value1>
							<Value2>false</Value2>
							<RaiseWarning Id="8" Param0="index" Param1="readInPreOp">Unexpected object read access in PreOp ({1}) for PDO a Assignment Object 0x{0:x4}:0!</RaiseWarning>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInSafeOp</Value1>
							<Value2>true</Value2>
							<RaiseWarning Id="9" Param0="index" Param1="writeInSafeOp">Unexpected object write access in SafeOp ({1}) for PDO a Assignment Object 0x{0:x4}:0!</RaiseWarning>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInOp</Value1>
							<Value2>true</Value2>
							<RaiseWarning Id="10" Param0="index" Param1="writeInOp">Unexpected object write access in Op ({1}) for PDO Asignment Object 0x{0:x4}:0!</RaiseWarning>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SwitchPdoAssign">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE.PdoAssign</Value1>
							<Value2>true</Value2>
							<WriteLine Id="11" Param0="index">Check variable Sync Manager Pdo Assignment object 0x{0:x4}. Because the EtherCAT Slave Information File attribute Device:Mailbox:CoE:PdoAssign is true.</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE.PdoAssign</Value1>
							<Value2>true</Value2>
							<GotoStep>CheckVariablePdoAssign</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="12" Param0="index">Check fixed Sync Manager Pdo Assignment object 0x{0:x4}. Because the EtherCAT Slave Information File attribute Device:Mailbox:CoE:PdoAssign is false or not specified.</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<GotoStep>CheckFixedPdoAssign</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckVariablePdoAssign">
					<CallFunction>CheckVariablePdoAssignmentObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>1</Value1>
							<Value2>1</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckFixedPdoAssign">
					<CallFunction>CheckFIxedPdoAssignmentObject</CallFunction>
				</TestStep>
				<TestStep Name="IncrementListIndex">
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>GetNextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="13" Level="Success">PDO assignment objects have been tested successfully</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Receive and Transmit PDO Mapping (online)" CaseId="2"><?MAX_OUTPUT_ID 13?>
				<Description>
					<Purpose>-Examination of the read/write access of the Pdo Mapping objects (0x1600-0x17FF;0x1A00-0x1BFF) according to the SDO-Info access rights.
-If the PDO is configurable the named objects access shall be read/write.</Purpose>
					<PreCondition>1. Device supports the mailbox CoE protocol and the SDO Info protocol
2. Device has been reset</PreCondition>
					<Action>1. State transition to PreOp
2. Upload the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip object entries with value != 0 and further on consider only SM PDO Mapping objects:
4.1 Check SDO Info access rights
4.2 Valid and invalid download of object entries according to its SDO Info access
4.2.1 In case of non configurable PDO Mapping (SDO Info access is RO in all states)
	1. Perform upload of objects
	2.1 Perform invalid download to SI0 of object
	2.2 Perform invalid download of a value to object (download of a new value to an object entry (0 to n) shall cause an abort)
4.2.2 In case of configurable PDO Mapping (access is read in all states and write in PreOp)
	1. Perform upload of objects
	2.1 Perform valid download of a value 00 to SI0 (SubIndex 0 shall be writeable to 00)
	2.2 Perform valid value download to object entries (SubIndex 1 to n shall be writeable)
	2.3 Perform valid Max SI value download to SI0 of an object (SubIndex 0 shall be writable to the max Subindex)
	3. Perform invalid value download to object entries, although SI0 of an object was not set to 0 beforehand (download of a new value to an object entry (1 to n) without setting subIndex 0 to 00 shall cause an abort)</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. SM PDO assign object is acquired from the uploaded dictionary, as is its description and access right flags in PreOp, SafeOp, Op
4.1 Raise Error for unexpected write/read access in checked states accordingly
4.2.1 In case of non configurable PDO Mapping
	1. End test step if max subindex = 0. Raise error for failed upload or if abort mesage is received
	2. End test step if allowed abort code is received. Raise Warning if download succeeds. Raise Error if abort message is received.
4.2.2 Raise Warning if Mailbox.CoE.PdoConfig = FALSE.
	1. End test step if max subindex = 0. Raise error for failed upload, if abort code or abort mesage is received
	2. Raise Error if abort message or abort code received
	3. End test step if abort code is received. Raise Warning if download succeeds. Raise error if abort mesage is received.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.7.4.10 Sync Manager PDO Assignment"></Reference>
						<Reference Specification="ETG.1020" Chapter="10 Change of Mapping Objects"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get online Dictionary</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetObjectList">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict"></GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<Return Id="6">Online Object Dictionary does not contain an object</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<GetObjectDescriptionFromList ListIndex="listIndex" Source="objectList">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<Flags>
							<Access ReadInPreop="readInPreOp" ReadInSafeOP="readInSafeOp" ReadInOP="readInOp" WriteInPreOp="writeInPreOp" WriteInSafeOp="writeInSafeOp" WriteinOP="writeInOp">access</Access>
						</Flags>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep Name="SkipNonZeroSubIndexes">
					<Compare>
						<NotEqual>
							<Value1>subIdx</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CheckIsPdoMappingObject">
					<CallFunction>CheckIsPdoObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>isPdoObject</Value1>
							<Value2>false</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckSdoInfoAccess">
					<Compare>
						<Equal>
							<Value1>readInPreOp</Value1>
							<Value2>false</Value2>
							<RaiseError Id="7" Param0="index" Param1="readInPreOp">Unexpected object read access in PreOp ({1}) for PDO Mapping Object 0x{0:x4}:0</RaiseError>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInSafeOp</Value1>
							<Value2>true</Value2>
							<RaiseError Id="8" Param0="index" Param1="writeInSafeOp">Unexpected object write access in SafeOp ({1}) for PDO Mapping Object 0x{0:x4}:0</RaiseError>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInOp</Value1>
							<Value2>true</Value2>
							<RaiseError Id="9" Param0="index" Param1="writeInOp">Unexpected object write access in Op ({1}) for PDO Mapping Object 0x{0:x4}:0</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SwitchVariableOrNot">
					<Compare>
						<Equal>
							<Value1>writeInPreOp</Value1>
							<Value2>false</Value2>
							<GotoStep>CallCheckNotConfigurablePdoMappingObject</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE.PdoConfig</Value1>
							<Value2>false</Value2>
							<RaiseWarning Id="10" Param0="index" Param1="subIndex">The PdoConfig attribute of the ESI should be set, because PDO mapping object 0x{0:x4}:{1} has write access in PreOp.</RaiseWarning>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CallCheckConfigurablePdoMappingObject">
					<WriteLine Id="11" Param0="index" Level="Output">Check variable Pdo mapping object 0x{0:x4}, because the SDO Info access is write in PreOp.</WriteLine>
				</TestStep>
				<TestStep>
					<CallFunction>CheckVariablePdoMappingObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>1</Value1>
							<Value2>1</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CallCheckNotConfigurablePdoMappingObject">
					<WriteLine Id="12" Param0="index" Level="Output">Check fixed Pdo mapping object 0x{0:x4}, because the SdoInfo access is read only in PreOP.</WriteLine>
				</TestStep>
				<TestStep>
					<CallFunction>CheckFIxedPdoMappingObject</CallFunction>
				</TestStep>
				<TestStep Name="IncrementListIndex">
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="13" Level="Success">PDO assignment objects have been tested successfully</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RO in PreOp SDOs (online)" CaseId="3"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in PreOp objects:
5. Upload all RO objects and perform invalid download</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the online Dictionary
5.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below). Test download if upload succeeded.
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)
5.2	-Download shall fail. Raise Error if download succeeded, abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06010002 (Attempt to write to a read only object)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get online Dictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO  mapping and PDO assign objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllROInPreOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access ReadInPreOP="true" WriteInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a RO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteROObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RO in SafeOp SDOs (online)" CaseId="4"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in SafeOp objects:
5. Upload all RO objects and perform invalid download</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the online Dictionary
5.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below). Test download if upload succeeded.
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)
5.2	-Download shall fail. Raise Error if download succeeded, abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06010002 (Attempt to write to a read only object)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get online Dictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assign objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllROInSafeOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access ReadInSafeOP="true" WriteInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a RO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteROObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RO in Op SDOs (online)" CaseId="5"><?MAX_OUTPUT_ID 8?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the online dictionary via SDO Info
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in Op objects:
6. Upload all RO objects and perform invalid download</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an online dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RO objects are present in the online Dictionary
6.1	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below). Test download if upload succeeded.
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)
6.2	-Download shall fail. Raise Error if download succeeded, abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06010002 (Attempt to write to a read only object)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionaryOp">
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="4">Failed to get online Dictionary</RaiseErrorOnFailure>
					<WriteLine Id="5">PDO mapping and PDO assign objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="6">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllROInOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access ReadInOP="true" WriteInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="7">Online Object Dictionary does not contain a RO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteROObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="8" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download WO in PreOp SDOs (online)" CaseId="6"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Online dictionary contains a default value of the current object
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in PreOp objects:
5. Perform download of a default value to WO object</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the online Dictionary
5.	-Test is not performed if default value is not available in the online dictionary. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllWOInPreOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a WO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download WO in SafeOp SDOs (online)" CaseId="7"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Online dictionary contains a default value of the current object
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in SafeOp objects:
5. Perform download of a default value to WO object</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the online Dictionary
5.	-Test is not performed if default value is not available in the online dictionary. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllWOInSafeOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a WO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download WO in Op SDOs (online)" CaseId="8"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Online dictionary contains a default value of the current object.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the online dictionary via SDO Info
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in Op objects:
6. Perform download of a default value to WO object</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an online dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no WO objects are present in the online Dictionary
6.	-Test is not performed if default value is not available in the online dictionary. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06010006 (Object mapped to RxPDO, SDO download blocked)
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="allowRxpdoBlockedAbortCode">
					<SetVariable Target="allowSdoBlocked">True</SetVariable>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionaryOp">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllWOInOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a WO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RW in PreOp SDOs (online)" CaseId="9"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in PreOp objects:
5. Perform upload/download of RW objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the online Dictionary
5.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
5.2	-Download shall not fail. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090030 (Value range of parameter exceeded(only for write access))
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x06040043 (General parameter incompatibility reason)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllRWInPreOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a RW object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RW in SafeOp SDOs (online)" CaseId="10"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in SafeOp objects:
5. Perform upload/download of RW objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the online Dictionary
5.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
5.2	-Download shall not fail. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090030 (Value range of parameter exceeded(only for write access))
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x06040043 (General parameter incompatibility reason)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllRWInSafeOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a RW object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RW in Op SDOs (online)" CaseId="11"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the online dictionary via SDO Info
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in Op objects:
6. Perform download of a default value to RW object</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an online dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RW objects are present in the online Dictionary
6.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
6.2	-Download shall not fail. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090030 (Value range of parameter exceeded(only for write access))
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x06040043 (General parameter incompatibility reason)
		0x06010006 (Object mapped to RxPDO, SDO Download blocked)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="allowRxpdoBlockedAbortCode">
					<SetVariable Target="allowSdoBlocked">True</SetVariable>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionaryOp">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllRWInOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a RW object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload WO in PreOp SDOs (online)" CaseId="12"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in PreOp objects:
5. Invalid upload of all WO in PreOp objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the online Dictionary
5. 	-Upload shall fail. Error is raised if abort message is received. Warning is raised if abort code is received (except allowed abort codes - listed below). 
	-Allowed SDO abort codes for upload:
		0x06010001 (Attempt to read to a write only object)
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get online Dictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a WO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload WO in SafeOp SDOs (online)" CaseId="13"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in SafeOp objects:
5. Invalid upload of all WO in SafeOp objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the online Dictionary
5. 	-Upload shall fail. Error is raised if abort message is received. Warning is raised if abort code is received (except allowed abort codes - listed below). 
	-Allowed SDO abort codes for upload:
		0x06010001 (Attempt to read to a write only object)
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get online Dictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a WO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload WO in Op SDOs (online)" CaseId="14"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the online dictionary via SDO Info
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in Op objects:
6. Invalid upload of all WO in Op objects</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an online dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no WO objects are present in the online Dictionary
6. 	-Upload shall fail. Error is raised if abort message is received. Warning is raised if abort code is received (except allowed abort codes - listed below). 
	-Allowed SDO abort codes for upload:
		0x06010001 (Attempt to read to a write only object)
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionaryOp">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get online Dictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0Op">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a WO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RW in PreOp SDOs (online)" CaseId="15"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in PreOp objects:
5. Upload of all RW in PreOp objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the online Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a write only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RW in SafeOp SDOs (online)" CaseId="16"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device is has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in SafeOp objects:
5. Upload of all RW in SafeOp objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the online Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a write only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RW in Op SDOs (online)" CaseId="17"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the online dictionary via SDO Info
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in Op objects:
6. Upload of all RW in Op objects</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an online dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RW objects are present in the online Dictionary
6. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionaryOp">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0Op">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a write only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RO in PreOp SDOs (online)" CaseId="18"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in PreOp objects:
5. Upload of all RO in PreOp objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the online Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload:
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access ReadInPreOP="true" WriteInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a Read Only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RO in SafeOp SDOs (online)" CaseId="19"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the online dictionary via SDO Info
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in SafeOp objects:
5. Upload of all RO in SafeOp objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an online dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the online Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionary">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access ReadInSafeOP="true" WriteInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a Read Only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RO in Op SDOs (online)" CaseId="20"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending SDO Info access rights of all objects, except the Sync Manager PDO Assignment and Sync Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the SDO Info protocol
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the online dictionary via SDO Info
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in Op objects:
6. Upload of all RO in Op objects</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an online dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RO objects are present in the online Dictionary
6. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndSdoInfoSupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">SDO Info is not supported</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOnlineDictionaryOp">
					<Description Id="4">Uploading online object dictionary via SDO Info...</Description>
					<GetObjectDictionary Target="onlineDict">
						<DictionaryType>Online</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get onlineDictionary</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">onlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of online objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0Op">
					<GetObjectList Target="objectList" Count="count" SourceDict="onlineDict">
						<Flags>
							<Access ReadInOP="true" WriteInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Online Object Dictionary does not contain a Read Only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="SDO Object Access based on offline dictionary" GroupId="2">
			<Comment>If a offline  dictionary is provided at the DuT's ESI file, these test cases check the correct SDO object access based on the offline dictionary.
Therefore valid and invalid SDO up- and downloads are done to ensure a correct behaviour of the DuT's SDO service (In case of a download a value which was uploaded beforehand is downloaded to the same object / object entry again).

i.e. The Objects access rights flags from Object and Entry descriptions are acquired from the offline object dictionary. The object access rights information is then used to test in-/valid data uploads and downloads to objects, using the SDO Upload/Download services, in order to verify the behaviour of the device. The reactions are captured and analyzed. In the Logger the Tool returns a positive feedback in case of a successfully performed test, and a negative feedback, in the form of Warning and Errors, if the test was executed with a not recommended behaviour or with a not allowed behaviour respectively.

Refers to:
ETG.1000.5 (6.1.4 CoE ASE)
ETG.1000.6 (5.6.3.5 Object Description, 5.6.3.6 Entry Description, 5.6.7.4.10 Sync Manager PDO Assignment, 5.6.2.7.2 SDO Abort Codes)
ETG.1020
ETG.2000</Comment>
			<TestCase Name="Sync Manager PDO Assignment (offline)" CaseId="1"><?MAX_OUTPUT_ID 13?>
				<Description>
					<Purpose>-The access rights of Sync Manager Pdo assignment objects (0x1C12-0x1C2F) are tested.
-The test checks the Sdo Info access rights according to the PdoAssign attribute of the ESI.
-If the DuT supports PDO assign, the named objects access shall be read/write.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been reset</PreCondition>
					<Action>1. State transition to PreOp
2. Upload the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip object entries with value != 0 and further on consider only SM PDO assign objects:
4.1 Check general access rights
4.2 According to the Mailbox:CoE@PdoAssign attribute perform in-/valid downloads to object entries
4.2.1 In case of Fixed assign of PDO SM Object (PdoAssign = FALSE or is not present)
	1. Perform upload of objects
	2.1 Perform invalid download to SI0 of object
	2.2 Perform invalid download of a value to object
4.2.2 In case of Variable assign of PDO SM Object (PdoAssign = TRUE)
	1. Perform upload of objects
	2.1 Perform valid download of a value 00 to SI0 (SubIndex 0 shall be writeable to 00)
	2.2 Perform valid value download to object entries (SubIndex 1 to n shall be writeable)
	2.3 Perform valid Max SI value download to SI0 of an object (SubIndex 0 shall be writable to the max Subindex)
	3. Perform invalid value download to object entries, although SI0 of an object was not set to 0 beforehand (download of a new value to an object entry (0 to n) without setting subIndex 0 to 00 shall cause an abort)</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. SM PDO assign object is acquired from the uploaded dictionary, as is its description and access right flags in PreOp, SafeOp, Op
4.1 Raise Warning for unexpected write/read access in checked states accordingly
	-PdoAssign of ESI is FALSE or not present
		1.The access of SubIndex 0 shall be RO in all states
	-PdoAssign of ESI is TRUE
		1. The access of SubIndex 0 shall be read in all states and write in PreOp.
4.2.1 In case of Fixed assign of PDO SM Object
	1. End test step if max subindex = 0. Raise error for failed upload, if abort code or abort mesage is received
	2. End test step if allowed abort code is received. Raise Warning if download succeeds. Raise Error if abort message is received.
4.2.2 In case of Variable assign of PDO SM Object
	1. End test step if max subindex = 0. Raise error for failed upload, if abort code or abort mesage is received
	2. Raise Error if abort message or abort code received
	3. End test step if abort code is received. Raise Warning if download succeedes. Raise error if abort mesage received.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.7.4.10 Sync Manager PDO Assignment"></Reference>
						<Reference Specification="ETG.1020" Chapter="10 Change of Mapping Objects"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetObjectList">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict"></GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<Return Id="6">Offline object dictionary does not contain an object</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="GetNextObject">
					<GetObjectDescriptionFromList ListIndex="listIndex" Source="objectList">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<Flags>
							<Access ReadInPreop="readInPreOp" ReadInSafeOP="readInSafeOp" ReadInOP="readInOp" WriteInPreOp="writeInPreOp" WriteInSafeOp="writeInSafeOp" WriteinOP="writeInOp">access</Access>
						</Flags>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep Name="SkipNonZeroSubIndexes">
					<Compare>
						<NotEqual>
							<Value1>subIdx</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CheckIsPdoAssignIndex">
					<CallFunction>CheckIsSMPdoAssignObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>isSMPdoAssignObject</Value1>
							<Value2>false</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckGeneralAccessRights">
					<Compare>
						<NotEqual>
							<Value1>writeInPreOp</Value1>
							<Value2>DeviceDescr.Mailbox.CoE.PdoAssign</Value2>
							<RaiseWarning Id="7" Param0="index" Param1="writeInPreOp" Param2="DeviceDescr.Mailbox.CoE.PdoAssign">Unexpected object write access in PreOp ({1}) for PDO Assign Object 0x{0:x4}:0! Expected: {2}</RaiseWarning>
						</NotEqual>
					</Compare>
					<Compare>
						<Equal>
							<Value1>readInPreOp</Value1>
							<Value2>false</Value2>
							<RaiseWarning Id="8" Param0="index" Param1="readInPreOp">Unexpected object read access in PreOp ({1}) for PDO a Assignment Object 0x{0:x4}:0!</RaiseWarning>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInSafeOp</Value1>
							<Value2>true</Value2>
							<RaiseWarning Id="9" Param0="index" Param1="writeInSafeOp">Unexpected object write access in SafeOp ({1}) for PDO a Assignment Object 0x{0:x4}:0!</RaiseWarning>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInOp</Value1>
							<Value2>true</Value2>
							<RaiseWarning Id="10" Param0="index" Param1="writeInOp">Unexpected object write access in Op ({1}) for PDO Asignment Object 0x{0:x4}:0!</RaiseWarning>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SwitchPdoAssign">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE.PdoAssign</Value1>
							<Value2>true</Value2>
							<WriteLine Id="11" Param0="index">Check variable Sync Manager Pdo Assignment object 0x{0:x4}. Because the EtherCAT Slave Information File attribute Device:Mailbox:CoE:PdoAssign is true.</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE.PdoAssign</Value1>
							<Value2>true</Value2>
							<GotoStep>CheckVariablePdoAssign</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<WriteLine Id="12" Param0="index">Check fixed Sync Manager Pdo Assignment object 0x{0:x4}. Because the EtherCAT Slave Information File attribute Device:Mailbox:CoE:PdoAssign is false or not specified.</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>0</Value1>
							<Value2>0</Value2>
							<GotoStep>CheckFixedPdoAssign</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckVariablePdoAssign">
					<CallFunction>CheckVariablePdoAssignmentObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>1</Value1>
							<Value2>1</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckFixedPdoAssign">
					<CallFunction>CheckFIxedPdoAssignmentObject</CallFunction>
				</TestStep>
				<TestStep Name="IncrementListIndex">
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>GetNextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="13" Level="Success">PDO assignment objects have been tested successfully</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Receive and Transmit PDO Mapping (offline)" CaseId="2"><?MAX_OUTPUT_ID 13?>
				<Description>
					<Purpose>-Examination of the read/write access of the Pdo Mapping objects (0x1600-0x17FF;0x1A00-0x1BFF) according to the SDO-Info access rights.
-If the PDO is configurable the named objects access shall be read/write.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been reset</PreCondition>
					<Action>1. State transition to PreOp
2. Upload the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip object entries with value != 0 and further on consider only SM PDO Mapping objects:
4.1 Check SDO Info access rights
4.2 Valid and invalid download of object entries according to its SDO Info access
4.2.1 In case of non configurable PDO Mapping (SDO Info access is RO in all states)
	1. Perform upload of objects
	2.1 Perform invalid download to SI0 of object
	2.2 Perform invalid download of a value to object (download of a new value to an object entry (0 to n) shall cause an abort)
4.2.2 In case of configurable PDO Mapping (access is read in all states and write in PreOp)
	1. Perform upload of objects
	2.1 Perform valid download of a value 00 to SI0 (SubIndex 0 shall be writeable to 00)
	2.2 Perform valid value download to object entries (SubIndex 1 to n shall be writeable)
	2.3 Perform valid Max SI value download to SI0 of an object (SubIndex 0 shall be writable to the max Subindex)
	3. Perform invalid value download to object entries, although SI0 of an object was not set to 0 beforehand (download of a new value to an object entry (1 to n) without setting subIndex 0 to 00 shall cause an abort)</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Sm PDO assign object is acquired from the uploaded dictionary, as is its description and access right flags in PreOp, SafeOp, Op
4.1 Raise Error for unexpected write/read access in checked states accordingly
4.2.1 In case of non configurable PDO Mapping
	1. End test step if max subindex = 0. Raise error for failed upload or if abort mesage is received
	2. End test step if allowed abort code is received. Raise Warning if download succeeds. Raise Error if abort message is received.
4.2.2 Raise Warning if Mailbox.CoE.PdoConfig = FALSE.
	1. End test step if max subindex = 0. Raise error for failed upload, if abort code or abort mesage is received
	2. Raise Error if abort message or abort code received
	3. End test step if abort code is received. Raise Warning if download succeeds. Raise error if abort mesage received.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.7.4.10 Sync Manager PDO Assignment"></Reference>
						<Reference Specification="ETG.1020" Chapter="10 Change of Mapping Objects"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetObjectList">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict"></GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<Return Id="6">Offline object dictionary does not contain an object</Return>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="NextObject">
					<GetObjectDescriptionFromList ListIndex="listIndex" Source="objectList">
						<Index>index</Index>
						<SubIdx>subIdx</SubIdx>
						<Flags>
							<Access ReadInPreop="readInPreOp" ReadInSafeOP="readInSafeOp" ReadInOP="readInOp" WriteInPreOp="writeInPreOp" WriteInSafeOp="writeInSafeOp" WriteinOP="writeInOp">access</Access>
						</Flags>
					</GetObjectDescriptionFromList>
				</TestStep>
				<TestStep Name="SkipNonZeroSubIndexes">
					<Compare>
						<NotEqual>
							<Value1>subIdx</Value1>
							<Value2>0</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CheckIsPdoMappingObject">
					<CallFunction>CheckIsPdoObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>isPdoObject</Value1>
							<Value2>false</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CheckSdoInfoAccess">
					<Compare>
						<Equal>
							<Value1>readInPreOp</Value1>
							<Value2>false</Value2>
							<RaiseError Id="7" Param0="index" Param1="readInPreOp">Unexpected object read access in PreOp ({1}) for PDO Mapping Object 0x{0:x4}:0</RaiseError>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInSafeOp</Value1>
							<Value2>true</Value2>
							<RaiseError Id="8" Param0="index" Param1="writeInSafeOp">Unexpected object write access in SafeOp ({1}) for PDO Mapping Object 0x{0:x4}:0</RaiseError>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>writeInOp</Value1>
							<Value2>true</Value2>
							<RaiseError Id="9" Param0="index" Param1="writeInOp">Unexpected object write access in Op ({1}) for PDO Mapping Object 0x{0:x4}:0</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SwitchVariableOrNot">
					<Compare>
						<Equal>
							<Value1>writeInPreOp</Value1>
							<Value2>false</Value2>
							<GotoStep>CallCheckNotConfigurablePdoMappingObject</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE.PdoConfig</Value1>
							<Value2>false</Value2>
							<RaiseWarning Id="10" Param0="index" Param1="subIndex">The PdoConfig attribute of the ESI should be set, because PDO mapping object 0x{0:x4}:{1} has write access in PreOp.</RaiseWarning>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CallCheckConfigurablePdoMappingObject">
					<WriteLine Id="11" Param0="index" Level="Output">Check variable Pdo mapping object 0x{0:x4}, because the Sdo access is write in PreOp.</WriteLine>
				</TestStep>
				<TestStep>
					<CallFunction>CheckVariablePdoMappingObject</CallFunction>
					<Compare>
						<Equal>
							<Value1>1</Value1>
							<Value2>1</Value2>
							<GotoStep>IncrementListIndex</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="CallCheckNotConfigurablePdoMappingObject">
					<WriteLine Id="12" Param0="index" Level="Output">Check fixed Pdo mapping object 0x{0:x4}, because the SdoInfo access is read only in PreOP.</WriteLine>
				</TestStep>
				<TestStep>
					<CallFunction>CheckFIxedPdoMappingObject</CallFunction>
				</TestStep>
				<TestStep Name="IncrementListIndex">
					<SetVariable Target="listIndex">listIndex+1</SetVariable>
					<Compare>
						<Lower>
							<Value1>listIndex</Value1>
							<Value2>count</Value2>
							<GotoStep>NextObject</GotoStep>
						</Lower>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="13" Level="Success">PDO assignment objects have been tested successfully</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RO in PreOp SDOs (offline)" CaseId="3"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in PreOp objects:
5. Upload all RO objects and perform invalid download</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the offline Dictionary
5.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below). Test download if upload suceeded.
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)
5.2	-Download shall fail. Raise Error if download succeeded, abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06010002 (Attempt to write to a read only object)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO  mapping and PDO assign objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllROInPreOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access ReadInPreOP="true" WriteInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a RO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteROObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RO in SafeOp SDOs (offline)" CaseId="4"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in SafeOp objects:
5. Upload all RO objects and perform invalid download</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the offline Dictionary
5.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below). Test download if upload succeeded.
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)
5.2	-Download shall fail. Raise Error if download succeeded, abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06010002 (Attempt to write to a read only object)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assign objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllROInSafeOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access ReadInSafeOP="true" WriteInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a RO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteROObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RO in Op SDOs (offline)" CaseId="5"><?MAX_OUTPUT_ID 8?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the offline dictionary from ESI file
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in Op objects:
6. Upload all RO objects and perform invalid download</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an offline dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RO objects are present in the offline Dictionary
6.1	-Raise Error if abort message or abort code received (except allowed abort codes - listed below). Test download if upload succeeded.
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)
6.2	-Download shall fail. Raise Error if download succeeded, abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06010002 (Attempt to write to a read only object)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined. It is recommended to use one of the more detailed Abort Codes (0x08000021, 0x08000022)
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionaryOp">
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="4">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="5">PDO mapping and PDO assign objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="6">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllROInOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access ReadInOP="true" WriteInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="7">Offline object dictionary does not contain a RO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteROObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="8" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download WO in PreOp SDOs (offline)" CaseId="6"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Offline dictionary contains a default value of the current object
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in PreOp objects:
5. Perform download of a default value to WO object</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the offline Dictionary
5.	-Test is not performed if default value is not available in the offline dictionary. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllWOInPreOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a WO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download WO in SafeOp SDOs (offline)" CaseId="7"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Offline dictionary contains a default value of the current object
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in SafeOp objects:
5. Perform download of a default value to WO object</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the offline Dictionary
5.	-Test is not performed if default value is not available in the offline dictionary. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllWOInSafeOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a WO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download WO in Op SDOs (offline)" CaseId="8"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Offline dictionary contains a default value of the current object.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the offline dictionary from ESI file
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in Op objects:
6. Perform download of a default value to WO object</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an offline dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no WO objects are present in the offline Dictionary
6.	-Test is not performed if default value is not available in the offline dictionary. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06010006 (Object mapped to RxPDO, SDO download blocked)
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="allowRxpdoBlockedAbortCode">
					<SetVariable Target="allowSdoBlocked">True</SetVariable>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionaryOp">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllWOInOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a WO object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RW in PreOp SDOs (offline)" CaseId="9"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in PreOp objects:
5. Perform upload/download of RW objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the offline Dictionary
5.1	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
5.2	-Download shall not fail. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for download:
		0x06090030 (Value range of parameter exceeded(only for write access))
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x06040043 (General parameter incompatibility reason)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllRWInPreOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a RW object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RW in SafeOp SDOs (offline)" CaseId="10"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in SafeOp objects:
5. Perform upload/download of RW objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the offline Dictionary
5.1	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
5.2	-Download shall not fail. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090030 (Value range of parameter exceeded(only for write access))
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x06040043 (General parameter incompatibility reason)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllRWInSafeOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a RW object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Download RW in Op SDOs (offline)" CaseId="11"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the offline dictionary from ESI file
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in Op objects:
6. Perform download of a default value to RW object</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an offline dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RW objects are present in the offline Dictionary
6.1	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
6.2	-Download shall not fail. Raise Error if abort message or abort code is received (except allowed abort codes - listed below).  
	-Allowed SDO abort codes for download:
		0x06090030 (Value range of parameter exceeded(only for write access))
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.
		0x06040043 (General parameter incompatibility reason)
		0x06010006 (Object mapped to RxPDO, SDO Download blocked)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="allowRxpdoBlockedAbortCode">
					<SetVariable Target="allowSdoBlocked">True</SetVariable>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionaryOp">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllRWInOpObjectsAndSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a RW object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>WriteRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload WO in PreOp SDOs (offline)" CaseId="12"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in PreOp objects:
5. Invalid upload of all WO in PreOp objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the offline Dictionary
5. 	-Upload shall fail. Error is raised if abort message is received. Warning is raised if abort code is received (except allowed abort codes - listed below). 
	-Allowed SDO abort codes for upload:
		0x06010001 (Attempt to read to a write only object)
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a WO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload WO in SafeOp SDOs (offline)" CaseId="13"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in SafeOp objects:
5. Invalid upload of all WO in SafeOp objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no WO objects are present in the offline Dictionary
5. 	-Upload shall fail. Error is raised if abort message is received. Warning is raised if abort code is received (except allowed abort codes - listed below). 
	-Allowed SDO abort codes for upload:
		0x06010001 (Attempt to read to a write only object)
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a WO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload WO in Op SDOs (offline)" CaseId="14"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the offline dictionary from ESI file
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only WO in Op objects:
6. Invalid upload of all WO in Op objects</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an offline dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no WO objects are present in the offline Dictionary
6. 	-Upload shall fail. Error is raised if abort message is received. Warning is raised if abort code is received (except allowed abort codes - listed below). 
	-Allowed SDO abort codes for upload:
		0x06010001 (Attempt to read to a write only object)
		0x08000022 (Data cannot be transferred or stored to the application because of the present device state) | "device state" means the ESM state (INIT; PREOP; SAFEOP; OP)</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionaryOp">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0Op">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a WO Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadWOObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RW in PreOp SDOs (offline)" CaseId="15"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in PreOp objects:
5. Upload of all RW in PreOp objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the offline Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInPreOP="true" ReadInPreOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a write only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RW in SafeOp SDOs (offline)" CaseId="16"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in SafeOp objects:
5. Upload of all RW in SafeOp objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RW objects are present in the offline Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInSafeOP="true" ReadInSafeOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a write only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RW in Op SDOs (offline)" CaseId="17"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the offline dictionary from ESI file
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RW in Op objects:
6. Upload of all RW in Op objects</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an offline dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RW objects are present in the offline Dictionary
6. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionaryOp">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0Op">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access WriteInOP="true" ReadInOP="true"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a write only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RO in PreOp SDOs (offline)" CaseId="18"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to PreOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in PreOp objects:
5. Upload of all RO in PreOp objects</Action>
					<PostCondition>1. DuT is in PreOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the offline Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload:
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToPreOp">
					<RunToState Timeout="preOPTimeout">
						<State>PREOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to PreOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access ReadInPreOP="true" WriteInPreOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a Read Only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RO in SafeOp SDOs (offline)" CaseId="19"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-Device has been Reset</PreCondition>
					<Action>1. State transition to SafeOp
2. Acquire the offline dictionary from ESI file
3. Extract object list and check for presence of objects
4. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in SafeOp objects:
5. Upload of all RO in SafeOp objects</Action>
					<PostCondition>1. DuT is in SafeOp
2. Test is skipped if DuT does not provide an offline dictionary
3. Test is skipped if DuT does not contain any objects in the list
4. Skip test case if no RO objects are present in the offline Dictionary
5. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="GoToSafeOp">
					<RunToState Timeout="safeOPTimeout">
						<State>SAFEOP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to SafeOP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionary">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access ReadInSafeOP="true" WriteInSafeOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a Read Only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Upload RO in Op SDOs (offline)" CaseId="20"><?MAX_OUTPUT_ID 9?>
				<Description>
					<Purpose>-The ECAT state depending Sdo access rights of all objects, except the Sync Manager PDO Assignment and Syn Manager PDO Mapping objects, are tested.</Purpose>
					<PreCondition>-Device supports the mailbox CoE protocol and the offline dictionary
-The ESI attribute 'StartToSafeopNoSync' is false or not set.
-Device has been Reset</PreCondition>
					<Action>1. Check for DC mode support. In case of DC test check if appropriate RT hardware is available/connected
2. State transition to Op
3. Acquire the offline dictionary from ESI file
4. Extract object list and check for presence of objects
5. Skip gap entries, PDO assign and PDO Mapping objects and consider only RO in Op objects:
6. Upload of all RO in Op objects</Action>
					<PostCondition>1. Raise Error if in case of test in DC operation mode no realtime-enabling hardware is connected
2. DuT is in Op
3. Test is skipped if DuT does not provide an offline dictionary
4. Test is skipped if DuT does not contain any objects in the list
5. Skip test case if no RO objects are present in the offline Dictionary
6. 	-Raise Error if abort message or abort code is received (except allowed abort codes - listed below).
	-Allowed SDO abort codes for upload: 
		0x06090011 (SubIndex does not exist)
		0x08000020 (Data cannot be transferred or stored to the application) | This is the general Abort Code in case no further detail on the reason can be determined.
		0x08000021 (Data cannot be transferred or stored to the application because of local control) | "local control" means an application specific reason. It does not mean the ESM-specific control.</PostCondition>
					<References>
						<Reference Specification="ETG.1000.5" Chapter="6.1.4 CoE ASE"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.3.5 Object Description, 5.6.3.6 Entry Description"></Reference>
						<Reference Specification="ETG.1000.6" Chapter="5.6.2.7.2 SDO Abort Codes"></Reference>
						<Reference Specification="ETG.1020"></Reference>
						<Reference Specification="ETG.2000"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="CheckMailboxCoeAndOffLineDictionarySupport">
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<SkipCase Id="0">Device does not support mailbox communication</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="1">Device does not support CoE</SkipCase>
						</NotEqual>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>DeviceDescr.Dictionary</Value1>
							<Value2>true</Value2>
							<SkipCase Id="2">ESI file does not provide an offline dictionary</SkipCase>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="CallInitMailbox">
					<CallFunction>InitMailbox</CallFunction>
				</TestStep>
				<TestStep Name="CheckIfRtExtensionRequired">
					<CallTestFunction Name="CheckIfCurrentConfigRequiresCu2508"></CallTestFunction>
				</TestStep>
				<TestStep Name="GoToOp">
					<RunToState Timeout="safeOPTimeout">
						<State>OP</State>
					</RunToState>
					<RaiseErrorOnFailure Id="3">Failed to go to OP!</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="GetOfflineDictionaryOp">
					<Description Id="4">Requesting offline dictionary from ESI...</Description>
					<GetObjectDictionary Target="offlineDict">
						<DictionaryType>Offline</DictionaryType>
					</GetObjectDictionary>
					<RaiseErrorOnFailure Id="5">Failed to get the offline dictionary from ESI file</RaiseErrorOnFailure>
					<WriteLine Id="6">PDO mapping and PDO assignment objects will be skipped for this test case!</WriteLine>
				</TestStep>
				<TestStep Name="CheckNoOfObjects2">
					<SizeOf UInt32Var="objctCnt">offlineDict</SizeOf>
					<Compare>
						<Equal>
							<Value1>objctCnt</Value1>
							<Value2>0</Value2>
							<RaiseError Id="7">Number of offline objects = 0.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="GetAllObjectsOrSkipCaseIf0Op">
					<GetObjectList Target="objectList" Count="count" SourceDict="offlineDict">
						<Flags>
							<Access ReadInOP="true" WriteInOP="false"></Access>
						</Flags>
					</GetObjectList>
					<Compare>
						<Equal>
							<Value1>count</Value1>
							<Value2>0</Value2>
							<SkipCase Id="8">Offline object dictionary does not contain a Read Only Object</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitListIndex2">
					<SetVariable Target="listIndex">0</SetVariable>
				</TestStep>
				<TestStep Name="TestEachObject" From="1" To="count">
					<CallFunction>ReadROorRWObject</CallFunction>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="9" Level="Success">Object access was tested successfully.</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
	</TestGroups>
</EtherCATTest>