<?xml version="1.0" encoding="UTF-8" standalone="yes"?><EtherCATTest Name="TF-1100 Data Link Layer" SchemaVersion="1.0.32" TestVersion="1.3.0" TestId="4352" xsi:noNamespaceSchemaLocation="EtherCATTest.xsd" Url="http://www.ethercat.org/en/conformance.html" TestVendorId="1" RealeaseState="Released" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<Comment>Test of the data link layer and the data link layer protocols which are specified in ETG.1000</Comment>
	<History>
		<HistoryEntry Editor="O.H." TestVersion="1.0.3" Date="2010-01-10">New description type added.</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.0.4" Date="2010-01-14">Added test group General DLL tests incl. test cases Check Device Type and Secondary Vendor ID in IP Core</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.4" Date="2010-01-18">Test case 'Mailbox Transfer(CoE)/Mailbox Counter(0)' deleted.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.4" Date="2010-01-18">Test case 'Mailbox Transfer(SoE)/Mailbox Counter(0)' deleted.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.6" Date="2010-01-22">Test case 'General DLL Tests/Check Device Type/CHECKGENERALMBXSUPPORT' it is not necessary to continue, if the device does not support a mailbox </HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.7" Date="2010-03-12">New 'EtherCATTestV1i0i2i8.xsd' assigned.</HistoryEntry>
		<HistoryEntry Id="EN_100319_1" Editor="O.H." TestVersion="1.0.10" Date="2010-03-19">Mailbox header length at 'Error Reply Service Data(SoE)/MBXERR_INVALIDHEADER /Step 3' is changed from 0 to 4.  </HistoryEntry>
		<HistoryEntry Id="EN_100319_2" Editor="O.H." TestVersion="1.0.10" Date="2010-03-19">Mailbox header data at 'Error Reply Service Data(SoE)/MBXERR_INVALIDHEADER /Step 3' is changed from 000000 to 00000000.  </HistoryEntry>
		<HistoryEntry Id="EN_100319_3" Editor="O.H." TestVersion="1.0.10" Date="2010-03-19">All test cases in Error Reply Service Data (CoE) are skipped, if the device not supports CoE</HistoryEntry>
		<HistoryEntry Id="EN_100319_4" Editor="O.H." TestVersion="1.0.10" Date="2010-03-19">All test cases in Mailbox Transfer(CoE) are skipped, if the device not supports CoE</HistoryEntry>
		<HistoryEntry Id="EN_110225_1" Editor="O.H." TestVersion="1.0.12" Date="2011-02-25">Where: Reset function
Description: When no FMMUs are supported by the ESC (reg 0x04 = 0) the function did still try to reset one FMMU
Solution: skip resetting FMMUs when FMMU count = 0</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.0.13" Date="2011-03-15" Id="EN_110315">Schema V1.0.3 assigned</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.0.14" Date="2012-03-05" Id="EN_TF-1100_120305_1">_Where: Reset function 
_Description: When no SyncManager hardware entity is supported the the FMMUs where still reset even if no FMMU hardware entity was supported due to a wrong jump mark
_Solution: set correct jump mark</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="1.1.1" Date="2012-09-18" Type="Enhancement">- Add Reference to "EcBaseFunctions.xml" (including basic test functions)
- Reset function removed from local testfunction list
- Run Reset function before each test case to test in device is online (if offline test case will be skipped)
- Reset function within test cases is replaced by global reset function and set timeout values</HistoryEntry>
		<HistoryEntry Editor="R.H." TestVersion="1.1.1" Date="2012-11-12" Id="EN_TF-1100_121112_1" Type="Enhancement">Change behaviour of "Check Device Type (Complex or Simple Type)"
- A complext device may not support any mailbox protocol.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.2" Date="2013-03-14" Id="EN_TF-1100_120314_1" Type="Enhancement">Global Test Variables added</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.1.3" Date="2014-05-06" Id="EN_TF-1100_140506_1" Type="Enhancement">_Where: TG1
_Description: Added test case "MBXERR_MBXERR_SERVICENOTSUPPORTED" to test Mailbox Error Reply "</HistoryEntry>
		<HistoryEntry Editor="F.H." TestVersion="1.1.4" Date="2014-10-23" Id="EN_TF-1100_141023" Type="Enhancement">Where: TF IntMailbox
Description: The last master send mailbox counter could be equal to the init value of the mailbox frame in the test function.
Solution: New test variable added which holds the current mailbox send counter to initialize the mailbox frames of the test function.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.5" Date="2014-10-23" Id="EN_TF-1100_150116" Type="Enhancement">TF Init Mailbox: Initialization of master (send) counter changed</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.5" Date="2014-10-23" Id="EN_TF-1100_150116_1" Type="Enhancement">Descriptions and messages improved</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.1.7" Date="2015-09-02" Id="EN_TF_1100_150902" Type="Enhancement">Test schema version set to 1.0.23</HistoryEntry>
		<HistoryEntry Editor="F.E." TestVersion="1.1.8" Date="2015-11-17" Id="EN_TF_1100_151117" Type="Enhancement">Typo fixed in test case 1-2-3</HistoryEntry>
		<HistoryEntry Editor="B.L." TestVersion="1.1.9" Date="2016-02-17" Id="EN_TF_1100_160217" Type="Enhancement">Update to Schema version 1.0.24</HistoryEntry>
		<HistoryEntry Editor="F.E." TestVersion="1.1.10" Date="2016-07-05" Id="">Release version</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.2.0" Date="2018-01-09" Id="EN_TF_1100_090118" Type="Enhancement">Mailbox Read Service Repeat 2: Due to timing issues the DuT may not have the chance to put the second request in the out mailbox and the old data is still in the out buffer. So the test does not fail but the correct implementation of the mailbox repeat mechanism is not fully tested. Test case has been changed to wait for the Mailbox repeat timeout after the second MbxWrite to give the DuT the chance to store the old mailbox out data in the second buffer.</HistoryEntry>
		<HistoryEntry Editor="G.E." TestVersion="1.2.1" Date="2018-03-09">Typo in Test description (TF-1100[3][2]). CoE type instead of SoE type in the Mbx header. </HistoryEntry>
		<HistoryEntry Editor="B.L." TestVersion="1.2.2" Date="2018-09-14">Add output IDs and update Schema version to 1.0.31.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.2.3" Date="2018-11-09">TestGoup 1, TestCase1: missing parameter in error message 6 added.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.2.4" Date="2018-11-30">Multi Mailbox protocol support added. Emergencies and other protocols ignored in SoE or CoE specific tests.</HistoryEntry>
		<HistoryEntry Editor="O.H." TestVersion="1.2.5" Date="2018-11-06">Message Ids renewed</HistoryEntry>
	</History>
	<GlobalVariables>
		<GlobalVariable>
			<Name>preOPTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>3000</DefaultValue>
		</GlobalVariable>
		<GlobalVariable>
			<Name>mbxResTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>3000</DefaultValue>
		</GlobalVariable>
		<GlobalVariable>
			<Name>mbxReqTimeout</Name>
			<Type>Int32</Type>
			<DefaultValue>1000</DefaultValue>
		</GlobalVariable>
		<GlobalVariable>
			<Name>mbxCounterRcv</Name>
			<Type>Byte</Type>
			<DefaultValue>0</DefaultValue>
		</GlobalVariable>
		<GlobalVariable>
			<Name>mbxCounter</Name>
			<Type>Byte</Type>
			<DefaultValue>0</DefaultValue>
		</GlobalVariable>
		<GlobalVariable>
			<Name>mbxCounterRcvExp</Name>
			<Type>Byte</Type>
			<DefaultValue>0</DefaultValue>
		</GlobalVariable>
	</GlobalVariables>
	<Variables>
		<Variable>
			<Name>abortCode</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>activateSM1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>alStatus</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>alStatusCode</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>assignEeprom</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>bitSize</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>boolVar</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>byteVal</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>byteVal1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>clearSMAdo</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>cmpSubIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>count</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>data</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>dataSetSize</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>enabled</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>errMsg</Name>
			<Type>String</Type>
		</Variable>
		<Variable>
			<Name>expedited</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>fmmuClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>fmmuSync</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>index</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>int32Val</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>mbxCounterRcvExpTmp</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>mbxLen</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>pdiCtrlSM1</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>reg</Name>
			<Type>Register</Type>
		</Variable>
		<Variable>
			<Name>sizeIndication</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>smAdo</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>smClearData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>subindex</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>subIndex</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>tmpData</Name>
			<Type>ArrayOfBytes</Type>
		</Variable>
		<Variable>
			<Name>tmpSize</Name>
			<Type>Int32</Type>
		</Variable>
		<Variable>
			<Name>uInt16Val</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt16Val2</Name>
			<Type>UInt16</Type>
		</Variable>
		<Variable>
			<Name>uInt32Val</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>vendorIdIpCore</Name>
			<Type>UInt32</Type>
		</Variable>
		<Variable>
			<Name>escType</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>byte</Name>
			<Type>Byte</Type>
		</Variable>
		<Variable>
			<Name>devEm</Name>
			<Type>Bool</Type>
		</Variable>
		<Variable>
			<Name>mbxProtocolSupported</Name>
			<Type>Bool</Type>
		</Variable>
	</Variables>
	<EcatCmdGrps>
	</EcatCmdGrps>
	<IncludedTestFunctions>
		<FileName>EcBaseFunctions_V1i0i0.xml</FileName>
	</IncludedTestFunctions>
	<TestFunctions>
		<TestFunction Name="CheckESCRevTypeBuild" FunctionId="1"><?MAX_OUTPUT_ID 9?>
			<TestStep Name="CheckDeviceEmulation">
				<Compare>
					<Equal>
						<Value1>Esc.DeviceEmulation</Value1>
						<Value2>true</Value2>
						<Return Id="0"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SwitchEscType">
				<Compare>
					<Equal>
						<Value1>Esc.Type</Value1>
						<Value2>1</Value2>
						<GotoStep>CheckEsc1</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>Esc.Type</Value1>
						<Value2>2</Value2>
						<GotoStep>CheckEsc2</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>Esc.Type</Value1>
						<Value2>3</Value2>
						<GotoStep>CheckEsc3</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckEsc1">
				<Compare>
					<Lower>
						<Value1>Esc.Build</Value1>
						<Value2>13</Value2>
						<NotFeasible Id="2">This test case has been skipped because of ESC build</NotFeasible>
					</Lower>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<Return Id="3"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckEsc2">
				<Compare>
					<GreaterOrEqual>
						<Value1>Esc.Build</Value1>
						<Value2>22</Value2>
						<Return Id="4"></Return>
					</GreaterOrEqual>
				</Compare>
				<Compare>
					<Lower>
						<Value1>Esc.Build</Value1>
						<Value2>11</Value2>
						<NotFeasible Id="5">This test case has been skipped because of ESC build</NotFeasible>
					</Lower>
				</Compare>
				<Compare>
					<Greater>
						<Value1>Esc.Build</Value1>
						<Value2>19</Value2>
						<NotFeasible Id="6">This test case has been skipped because of ESC build</NotFeasible>
					</Greater>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<Return Id="7"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckEsc3">
				<Compare>
					<Lower>
						<Value1>Esc.Build</Value1>
						<Value2>13</Value2>
						<NotFeasible Id="8">This test case has been skipped because of ESC build</NotFeasible>
					</Lower>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<Return Id="9"></Return>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckMbxCounter" FunctionId="2"><?MAX_OUTPUT_ID 1?>
			<Parameter>
				<Name>CheckMbxCounter.ExpectedType</Name>
				<Type>Byte</Type>
			</Parameter>
			<LocalVariables>
				<Name>CheckMbxCounter.Error</Name>
				<Type>String</Type>
			</LocalVariables>
			<TestStep Name="MbxWrite">
				<CallTestFunction Name="MbxWrite"></CallTestFunction>
				<RaiseErrorOnFailure Id="0">Failed to send request to mailbox 2</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="MbxRead">
				<CallTestFunction Name="MbxRead">
					<Parameter>CheckMbxCounter.ExpectedType</Parameter>
					<OutParameter>CheckMbxCounter.Error</OutParameter>
				</CallTestFunction>
				<RaiseErrorOnFailure Id="1" Param0="CheckMbxCounter.Error">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="IncrementMasterCntr">
				<CallTestFunction Name="IncMbxCounter"></CallTestFunction>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CheckMbxCounter0" FunctionId="3"><?MAX_OUTPUT_ID 2?>
			<TestStep>
				<SetVariable Target="mbxCounter">0</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="mbxCounterRcvExp">0</SetVariable>
			</TestStep>
			<TestStep>
				<CallTestFunction Name="MbxWrite"></CallTestFunction>
				<RaiseErrorOnFailure Id="0">Failed to send request to mailbox 2</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<CallTestFunction Name="MbxRead"></CallTestFunction>
				<RaiseErrorOnFailure Id="1">Failed to read response from mailbox</RaiseErrorOnFailure>
			</TestStep>
			<TestStep>
				<WriteLine Id="2" Param0="mbxCounterRcv" Param1="mbxCounter">Received expected mailbox response counter ({0:d}). (Request counter: {1:d})</WriteLine>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CoeEmergencyToString" FunctionId="4"><?MAX_OUTPUT_ID 0?>
			<Parameter>
				<Name>CoeEmergencyToString.ServiceData</Name>
				<Type>ArrayOfBytes</Type>
			</Parameter>
			<LocalVariables>
				<Name>CoeEmergencyToString.ErrorCode</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoeEmergencyToString.ErrorRegister</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoeEmergencyToString.Data</Name>
				<Type>UInt64</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoeEmergencyToString.ServiceDataLength</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<OutParameter>
				<Name>CoeEmergencyToString.ReturnValue</Name>
				<Type>String</Type>
			</OutParameter>
			<TestStep Name="CheckLength">
				<SizeOf UInt32Var="CoeEmergencyToString.ServiceDataLength">CoeEmergencyToString.ServiceData</SizeOf>
				<Compare>
					<Lower>
						<Value1>CoeEmergencyToString.ServiceDataLength</Value1>
						<Value2>8</Value2>
						<RaiseError Id="0">CoeEmergencyToString: Service data length is to short for an CoE Emergency Request. At least 8 bytes expected</RaiseError>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="GetErrorCode">
				<GetBits Source="CoeEmergencyToString.ServiceData" Target="CoeEmergencyToString.ErrorCode">
					<Offset>16</Offset>
					<Length>16</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetErrorRegister">
				<GetBits Source="CoeEmergencyToString.ServiceData" Target="CoeEmergencyToString.ErrorRegister">
					<Offset>32</Offset>
					<Length>8</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetData">
				<GetBits Source="CoeEmergencyToString.ServiceData" Target="CoeEmergencyToString.Data">
					<Offset>40</Offset>
					<Length>40</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="StringFormat">
				<SetVariable Target="CoeEmergencyToString.ReturnValue" Param0="CoeEmergencyToString.ErrorCode" Param1="CoeEmergencyToString.ErrorRegister" Param2="CoeEmergencyToString.Data">Emergency(Error Code 0x{0:X4}, Error Register 0x{1:X2}, Data 0x{2:X10})</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CoeSdoResToString" FunctionId="5"><?MAX_OUTPUT_ID 2?>
			<Parameter>
				<Name>CoESdoResToString.ServiceData</Name>
				<Type>ArrayOfBytes</Type>
			</Parameter>
			<LocalVariables>
				<Name>CoESdoResToString.Toggle</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.SizeIndicator</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.TransferType</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.DataSetSize</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.CompleteAccess</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.CommandSpecifier</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.Index</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.SubIndex</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.CompleteSize</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.MoreFollows</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.SegDataSize</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.Data</Name>
				<Type>ArrayOfBytes</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.ServiceDataLength</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoESdoResToString.ServiceString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>CoESdoResToString.ReturnValue</Name>
				<Type>String</Type>
			</OutParameter>
			<TestStep Name="CheckLength">
				<SizeOf UInt32Var="CoESdoResToString.ServiceDataLength">CoESdoResToString.ServiceData</SizeOf>
				<Compare>
					<Lower>
						<Value1>CoESdoResToString.ServiceDataLength</Value1>
						<Value2>3</Value2>
						<RaiseError Id="0">CoESdoResToString: Service data length is to short for an CoE SDO Response Frame. At least 1 bytes expected</RaiseError>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="GetCommandSpecifier">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.CommandSpecifier">
					<Offset>21</Offset>
					<Length>3</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="SwitchCmdSpecifier">
				<Compare>
					<Equal>
						<Value1>CoESdoResToString.CommandSpecifier</Value1>
						<Value2>0</Value2>
						<GotoStep>UpSegResp_MoreFollows</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoESdoResToString.CommandSpecifier</Value1>
						<Value2>1</Value2>
						<GotoStep>DwnSegResp_Toggle</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoESdoResToString.CommandSpecifier</Value1>
						<Value2>2</Value2>
						<GotoStep>UpResp_SizeIndicator</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoESdoResToString.CommandSpecifier</Value1>
						<Value2>3</Value2>
						<GotoStep>DwnResp_SizeIndicator</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<RaiseError Id="1" Param0="CoESdoResToString.CommandSpecifier" Param1="CoESdoResToString.ServiceData">Unknown Commad Specifier (0x{0:X}) of a CoE Response. Mbx Service Data: {1}</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="UpSegResp_MoreFollows">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.MoreFollows">
					<Offset>16</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpSegResp_SegDataSize">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.SegDataSize">
					<Offset>17</Offset>
					<Length>3</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpSegResp_Toggle">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Toggle">
					<Offset>20</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpSegResp_Data">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Data">
					<Offset>24</Offset>
					<Length>56-(CoESdoResToString.SegDataSize*8)</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpSegResp_ToString">
				<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.MoreFollows" Param1="CoESdoResToString.SegDataSize" Param2="CoESdoResToString.Toggle" Param3="CoESdoResToString.Data">Upload Segment(More Follows 0x{0:X2}, SegData Size 0x{1:X2}, Toggle 0x{2:X2}, Data {3})</SetVariable>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<GotoStep>StringFormat</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="DwnSegResp_Toggle">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Toggle">
					<Offset>20</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnSegResp_ToString">
				<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.Toggle">Download Segment(Toggle 0x{0:X2})</SetVariable>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<GotoStep>StringFormat</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="UpResp_SizeIndicator">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.SizeIndicator">
					<Offset>16</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_TransferType">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.TransferType">
					<Offset>17</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_DataSetSize">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.DataSetSize">
					<Offset>18</Offset>
					<Length>2</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_CompleteAccess">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.CompleteAccess">
					<Offset>20</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_Index">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Index">
					<Offset>24</Offset>
					<Length>16</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_SubIndex">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.SubIndex">
					<Offset>40</Offset>
					<Length>8</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="Switch_TransferType">
				<Compare>
					<Equal>
						<Value1>CoESdoResToString.TransferType</Value1>
						<Value2>1</Value2>
						<GotoStep>UpResp_ExpInitData</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="UpResp_CompleteCompleteSize">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.CompleteSize">
					<Offset>48</Offset>
					<Length>32</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_InitData">
				<InitArray TargetArray="CoESdoResToString.Data" Length="CoESdoResToString.ServiceDataLength-10"></InitArray>
			</TestStep>
			<TestStep Name="UpResp_Data">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Data">
					<Offset>80</Offset>
					<Length>(CoESdoResToString.ServiceDataLength*8)-80</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_ToString1">
				<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.SizeIndicator" Param1="CoESdoResToString.TransferType" Param2="CoESdoResToString.DataSetSize" Param3="CoESdoResToString.CompleteAccess" Param4="CoESdoResToString.Index">Upload(Size Indicator 0x{0:X2}, Transfer Type 0x{1:X2}, Data Set Size 0x{2:X2}, CompleteAccess 0x{3:X2}, </SetVariable>
			</TestStep>
			<TestStep Name="UpResp_ToString2">
				<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.ServiceString" Param1="CoESdoResToString.Index" Param2="CoESdoResToString.SubIndex" Param3="CoESdoResToString.CompleteSize" Param4="CoESdoResToString.Data">{0}Index 0x{1:X4}, SubIndex 0x{2:X2}, Complete Size {3}, Data {4})</SetVariable>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<GotoStep>StringFormat</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="UpResp_ExpInitData">
				<InitArray TargetArray="CoESdoResToString.Data" Length="4-CoESdoResToString.DataSetSize"></InitArray>
			</TestStep>
			<TestStep Name="UpResp_ExpData">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Data">
					<Offset>48</Offset>
					<Length>32-(CoESdoResToString.DataSetSize*8)</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="UpResp_ExpToString1">
				<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.SizeIndicator" Param1="CoESdoResToString.TransferType" Param2="CoESdoResToString.DataSetSize" Param3="CoESdoResToString.CompleteAccess" Param4="CoESdoResToString.Index">Upload(Size Indicator 0x{0:X2}, Transfer Type 0x{1:X2}, Data Set Size 0x{2:X2}, CompleteAccess 0x{3:X2}, </SetVariable>
			</TestStep>
			<TestStep Name="UpResp_ExpToString2">
				<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.ServiceString" Param1="CoESdoResToString.Index" Param2="CoESdoResToString.SubIndex" Param3="CoESdoResToString.Data">{0}Index 0x{1:X4}, SubIndex 0x{2:X2}, Data {3})</SetVariable>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<GotoStep>StringFormat</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="DwnResp_SizeIndicator">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.SizeIndicator">
					<Offset>16</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_TransferType">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.TransferType">
					<Offset>17</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_DataSetSize">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.DataSetSize">
					<Offset>18</Offset>
					<Length>2</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_CompleteAccess">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.CompleteAccess">
					<Offset>20</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_Index">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Index">
					<Offset>24</Offset>
					<Length>16</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_SubIndex">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.SubIndex">
					<Offset>40</Offset>
					<Length>8</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_SwitchTransferType">
				<Compare>
					<Equal>
						<Value1>CoESdoResToString.TransferType</Value1>
						<Value2>1</Value2>
						<ReturnSuccess Id="2"></ReturnSuccess>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="DwnResp_CompleteCompleteSize">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.CompleteSize">
					<Offset>48</Offset>
					<Length>32</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_Data">
				<GetBits Source="CoESdoResToString.ServiceData" Target="CoESdoResToString.Data">
					<Offset>80</Offset>
					<Length>(CoESdoResToString.ServiceDataLength*8)-80</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="DwnResp_ToString1">
				<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.SizeIndicator" Param1="CoESdoResToString.TransferType" Param2="CoESdoResToString.DataSetSize" Param3="CoESdoResToString.CompleteAccess" Param4="CoESdoResToString.Index">Download(Size Indicator 0x{0:X2}, Transfer Type 0x{1:X2}, Data Set Size 0x{2:X2}, CompleteAccess 0x{3:X2}, </SetVariable>
			</TestStep>
			<TestStep Name="DwnResp_ToString2">
				<Compare>
					<Greater>
						<Value1>CoESdoResToString.ServiceDataLength</Value1>
						<Value2>10</Value2>
						<SetVariable Target="CoESdoResToString.ServiceString" Param0="CoESdoResToString.ServiceString" Param1="CoESdoResToString.Index" Param2="CoESdoResToString.SubIndex" Param3="CoESdoResToString.CompleteSize" Param4="CoESdoResToString.Data">{0}Index 0x{1:X4}, SubIndex 0x{2:X2}, Complete Size {3}, Data {4}) </SetVariable>
					</Greater>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<GotoStep>StringFormat</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="StringFormat">
				<SetVariable Target="CoESdoResToString.ReturnValue" Param0="CoESdoResToString.ServiceString">Sdo Response({0})</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="CoeToString" FunctionId="6"><?MAX_OUTPUT_ID 0?>
			<Parameter>
				<Name>CoeToString.ServiceData</Name>
				<Type>ArrayOfBytes</Type>
			</Parameter>
			<LocalVariables>
				<Name>CoeToString.Type</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoeToString.ServiceDataLength</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>CoeToString.ServiceString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>CoeToString.ReturnValue</Name>
				<Type>String</Type>
			</OutParameter>
			<TestStep Name="CheckLength">
				<SizeOf UInt32Var="CoeToString.ServiceDataLength">CoeToString.ServiceData</SizeOf>
				<Compare>
					<Lower>
						<Value1>CoeToString.ServiceDataLength</Value1>
						<Value2>2</Value2>
						<RaiseError Id="0">CoeToString: Service data length is to short for an CoE Frame. At least 2 bytes expected</RaiseError>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="GetCoeType">
				<GetBits Source="CoeToString.ServiceData" Target="CoeToString.Type">
					<Offset>12</Offset>
					<Length>4</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetServiceString">
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>1</Value2>
						<CallTestFunction Name="CoeEmergencyToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>2</Value2>
						<CallTestFunction Name="CoeSdoReqToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>3</Value2>
						<CallTestFunction Name="CoeSdoResToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>4</Value2>
						<CallTestFunction Name="CoeTxPdoToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>5</Value2>
						<CallTestFunction Name="CoeRxPdoToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>6</Value2>
						<CallTestFunction Name="CoeTxPdoRmtToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>7</Value2>
						<CallTestFunction Name="CoeRxPdoRmtToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>CoeToString.Type</Value1>
						<Value2>8</Value2>
						<CallTestFunction Name="CoeSdoInfoToString">
							<Parameter>CoeToString.ServiceData</Parameter>
							<OutParameter>CoeToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="StringFormat">
				<SetVariable Target="CoeToString.ReturnValue" Param0="CoeToString.Type" Param1="CoeToString.ServiceString">CoE(Service 0x{0:X2}, {1})</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="IncMbxCounter" FunctionId="7"><?MAX_OUTPUT_ID 0?>
			<TestStep>
				<SetVariable Target="mbxCounter">mbxCounter+1</SetVariable>
				<Compare>
					<Lower>
						<Value1>mbxCounter</Value1>
						<Value2>8</Value2>
						<Return Id="0"></Return>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="mbxCounter">1</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="InitMbxLayer" FunctionId="8"><?MAX_OUTPUT_ID 1?>
			<TestStep Name="SetMbxTimeouts">
				<CallTestFunction Name="SetMbxTimeouts"></CallTestFunction>
				<WriteLine Id="0" Param0="mbxResTimeout" Param1="mbxReqTimeout" Level="Verbose">MbxResponseTimeout:{0}   MbxRequestTimeout:{1}</WriteLine>
			</TestStep>
			<TestStep Name="SetEsmTimeouts">
				<CallTestFunction Name="SetStateMachTimeouts"></CallTestFunction>
			</TestStep>
			<TestStep Name="GoToPreOp">
				<RunToState Timeout="preOPTimeout">
					<State>PREOP</State>
				</RunToState>
				<RaiseErrorOnFailure Id="1">Failed to go to PreOp!</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="InitMbxCounter">
				<SetVariable Target="mbxCounter">Mailbox.LastSendCounter</SetVariable>
			</TestStep>
			<TestStep Name="IncrementLastSendCounter">
				<CallTestFunction Name="IncMbxCounter"></CallTestFunction>
			</TestStep>
			<TestStep Name="InitExpRcvCounter">
				<SetVariable Target="mbxCounterRcvExp">0</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="MbxFrameToString" FunctionId="9">
			<Parameter>
				<Name>MbxFrameToString.Length</Name>
				<Type>UInt16</Type>
			</Parameter>
			<Parameter>
				<Name>MbxFrameToString.Type</Name>
				<Type>Byte</Type>
			</Parameter>
			<Parameter>
				<Name>MbxFrameToString.Cnt</Name>
				<Type>Byte</Type>
			</Parameter>
			<Parameter>
				<Name>MbxFrameToString.ServiceData</Name>
				<Type>ArrayOfBytes</Type>
			</Parameter>
			<LocalVariables>
				<Name>MbxFrameToString.ServiceString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>MbxFrameToString.ReturnValue</Name>
				<Type>String</Type>
			</OutParameter>
			<TestStep Name="GetServiceString">
				<Compare>
					<Equal>
						<Value1>MbxFrameToString.Type</Value1>
						<Value2>1</Value2>
						<SetVariable Target="MbxFrameToString.ServiceString" Param0="MbxFrameToString.ServiceData">AoE(Data {0})</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxFrameToString.Type</Value1>
						<Value2>2</Value2>
						<SetVariable Target="MbxFrameToString.ServiceString" Param0="MbxFrameToString.ServiceData">EoE(Data {0})</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxFrameToString.Type</Value1>
						<Value2>3</Value2>
						<CallTestFunction Name="CoeToString">
							<Parameter>MbxFrameToString.ServiceData</Parameter>
							<OutParameter>MbxFrameToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxFrameToString.Type</Value1>
						<Value2>4</Value2>
						<SetVariable Target="MbxFrameToString.ServiceString" Param0="MbxFrameToString.ServiceData">FoE(Data {0})</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxFrameToString.Type</Value1>
						<Value2>5</Value2>
						<CallTestFunction Name="SoeToString">
							<Parameter>MbxFrameToString.ServiceData</Parameter>
							<OutParameter>MbxFrameToString.ServiceString</OutParameter>
						</CallTestFunction>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxFrameToString.Type</Value1>
						<Value2>#xf</Value2>
						<SetVariable Target="MbxFrameToString.ServiceString" Param0="MbxFrameToString.ServiceData">VoE(Data {0})</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxFrameToString.Type &gt;= 6 AND MbxFrameToString.Type &lt;= 14</Value1>
						<Value2>true</Value2>
						<SetVariable Target="MbxFrameToString.ServiceString" Param0="MbxFrameToString.ServiceData">RESERVED(Data {0})</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="StringFormat">
				<SetVariable Target="MbxFrameToString.ReturnValue" Param0="MbxFrameToString.Length" Param1="MbxFrameToString.Type" Param2="MbxFrameToString.Cnt" Param3="MbxFrameToString.ServiceString">Mbx Hdr(Length {0}, Type 0x{1:X2}, Cnt {2}, {3}))</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="MbxRead" FunctionId="10"><?MAX_OUTPUT_ID 15?>
			<Parameter>
				<Name>MbxRead.ExpectedType</Name>
				<Type>Byte</Type>
			</Parameter>
			<LocalVariables>
				<Name>MbxRead.MbxHdrType</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>MbxRead.ServiceType</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>MbxRead.MbxHdrLength</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>MbxRead.Data</Name>
				<Type>ArrayOfBytes</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>MbxRead.CoeHdrSrv</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>MbxRead.SoeHdrSrv</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>MbxRead.MbxFrameString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>MbxRead.Error</Name>
				<Type>String</Type>
			</OutParameter>
			<TestStep Name="ReadMbx">
				<ReadMailbox Timeout="mbxResTimeout">
					<Length>MbxRead.MbxHdrLength</Length>
					<Type>MbxRead.MbxHdrType</Type>
					<Cnt>mbxCounterRcv</Cnt>
					<ServiceData>MbxRead.Data</ServiceData>
					<ErrorMessage>MbxRead.Error</ErrorMessage>
				</ReadMailbox>
			</TestStep>
			<TestStep Name="WriteCmd">
				<CallTestFunction Name="MbxFrameToString">
					<Parameter>MbxRead.MbxHdrLength</Parameter>
					<Parameter>MbxRead.MbxHdrType</Parameter>
					<Parameter>mbxCounterRcv</Parameter>
					<Parameter>MbxRead.Data</Parameter>
					<OutParameter>MbxRead.MbxFrameString</OutParameter>
				</CallTestFunction>
				<RaiseErrorOnFailure Id="0" Param0="MbxRead.MbxHdrLength" Param1="MbxRead.MbxHdrType" Param2="mbxCounterRcv" Param3="MbxRead.Data">ReadMbx =&gt; Failed to convert Mbx read frame to string: MbxHdr.Length {0}, MbxHdr.Type {1}, MbxHdr.Cntr {2}, ServiceData = {3}</RaiseErrorOnFailure>
				<WriteLine Id="1" Level="Verbose" Param0="MbxRead.MbxFrameString">ReadMbx =&gt; {0}</WriteLine>
			</TestStep>
			<TestStep Name="CheckFirstResponse">
				<Compare>
					<NotEqual>
						<Value1>mbxCounterRcvExp</Value1>
						<Value2>0</Value2>
						<GotoStep>CheckCounter</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>mbxCounterRcvExp</Value1>
						<Value2>0</Value2>
						<SetVariable Target="mbxCounterRcvExp">mbxCounterRcv</SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<GotoStep>IncrementExpectedCounter</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckCounter">
				<Compare>
					<Equal>
						<Value1>mbxCounterRcv</Value1>
						<Value2>mbxCounterRcvExp</Value2>
						<WriteLine Id="2" Param0="mbxCounterRcvExp" Param1="mbxCounterRcv" Level="Output">MbxRead | Expected Cnt = {0} =&gt; Read Cnt = {1}</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>mbxCounterRcv</Value1>
						<Value2>mbxCounterRcvExp</Value2>
						<RaiseError Id="3" Param0="mbxCounterRcv" Param1="mbxCounterRcvExp">MbxRead | Expected SlaveCounter = {1:d} =&gt; Invalid mailbox counter, Received = {0:d}</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="IncrementExpectedCounter">
				<SetVariable Target="mbxCounterRcvExp">mbxCounterRcv+1</SetVariable>
				<Compare>
					<Equal>
						<Value1>mbxCounterRcvExp</Value1>
						<Value2>8</Value2>
						<SetVariable Target="mbxCounterRcvExp">1</SetVariable>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SwitchProtocol">
				<Compare>
					<NotEqual>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>MbxRead.ExpectedType</Value2>
						<GotoStep>UnexpectedTypeReceived</GotoStep>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>1</Value2>
						<WriteLine Id="4">MbxRead | AoE Service received =&gt; MbxRead</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>1</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>2</Value2>
						<WriteLine Id="5">MbxRead | EoE Service received =&gt; MbxRead</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>2</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>3</Value2>
						<GotoStep>CheckCoeResponse</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>4</Value2>
						<WriteLine Id="6">MbxRead | FoE Service received =&gt; MbxRead</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>4</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>5</Value2>
						<GotoStep>CheckSoeResponse</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>#xf</Value2>
						<WriteLine Id="7">MbxRead | VoE Service received =&gt; MbxRead</WriteLine>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType</Value1>
						<Value2>#xf</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="CheckCoeResponse">
				<Compare>
					<Lower>
						<Value1>MbxRead.MbxHdrLength</Value1>
						<Value2>2</Value2>
						<RaiseError Id="8" Param0="MbxRead.MbxHdrLength">MbxRead | MbxHdrLength = {0} =&gt;Invalid Mailbox Header length received</RaiseError>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="CheckCoeResponseService">
				<GetBits Source="MbxRead.Data" Target="MbxRead.CoeHdrSrv">
					<Offset>12</Offset>
					<Length>4</Length>
				</GetBits>
				<Compare>
					<Equal>
						<Value1>MbxRead.CoeHdrSrv</Value1>
						<Value2>1</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.CoeHdrSrv</Value1>
						<Value2>3</Value2>
						<Return Id="9"></Return>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>MbxRead.CoeHdrSrv</Value1>
						<Value2>3</Value2>
						<RaiseError Id="10" Param0="MbxRead.CoeHdrSrv">MbxRead | CoE Header Service = 0x{0:X2} =&gt; Unexpected CoE Service received</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="CheckSoeResponse">
				<Compare>
					<Lower>
						<Value1>MbxRead.MbxHdrLength</Value1>
						<Value2>4</Value2>
						<RaiseError Id="11" Param0="MbxRead.MbxHdrLength">MbxRead | Invalid Mailbox Header length {0} received.</RaiseError>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="CheckSoeResponseService">
				<GetBits Source="MbxRead.Data" Target="MbxRead.SoeHdrSrv">
					<Offset>0</Offset>
					<Length>3</Length>
				</GetBits>
				<Compare>
					<Equal>
						<Value1>MbxRead.SoeHdrSrv</Value1>
						<Value2>6</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.SoeHdrSrv</Value1>
						<Value2>2</Value2>
						<Return Id="12"></Return>
					</Equal>
				</Compare>
				<Compare>
					<NotEqual>
						<Value1>MbxRead.SoeHdrSrv</Value1>
						<Value2>2</Value2>
						<RaiseError Id="13" Param0="MbxRead.SoeHdrSrv">MbxRead | SoE Header Service = 0x{0:X2} =&gt; Unexpected SoE Service received</RaiseError>
					</NotEqual>
				</Compare>
			</TestStep>
			<TestStep Name="UnexpectedTypeReceived">
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType ==1 AND DeviceDescr.Mailbox.AoE</Value1>
						<Value2>true</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType ==2 AND DeviceDescr.Mailbox.EoE</Value1>
						<Value2>true</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType ==3 AND DeviceDescr.Mailbox.CoE</Value1>
						<Value2>true</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType ==4 AND DeviceDescr.Mailbox.FoE</Value1>
						<Value2>true</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType ==5 AND DeviceDescr.Mailbox.SoE</Value1>
						<Value2>true</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType &gt;= 6 AND MbxRead.MbxHdrType &lt;= 14</Value1>
						<Value2>true</Value2>
						<RaiseError Id="14" Param0="MbxRead.MbxHdrType">MbxRead | Mailbox Header Type 0x{0:X2} received =&gt; This Mailbox type is reserved according to ETG 1000.6 and shall not be used.</RaiseError>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>MbxRead.MbxHdrType ==14 AND DeviceDescr.Mailbox.VoE</Value1>
						<Value2>true</Value2>
						<GotoStep>ReadMbx</GotoStep>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>true</Value1>
						<Value2>true</Value2>
						<RaiseError Id="15" Param0="MbxRead.MbxHdrType">MbxRead | Mailbox Header Type 0x{0:X2} received =&gt; This Mailbox type is not specified according to ETG 1000.6 and shall not be used.</RaiseError>
					</Equal>
				</Compare>
			</TestStep>
		</TestFunction>
		<TestFunction Name="MbxWrite" FunctionId="11"><?MAX_OUTPUT_ID 4?>
			<TestStep>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Mailbox.SoE</Value1>
						<Value2>true</Value2>
						<GotoStep>SendSoECmd</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SendCoECmd">
				<Description Id="0" Level="Verbose" Param0="mbxCounter">MbxWrite | Mbx Hdr(Length 10, Type 0x03, Cnt {0}, CoE(Service 0x02, Sdo Request(Complete Access 0x00, CommandSpecifier 0x02, Index 0x1018, Subindex 0x01))))</Description>
				<SendCoECmd>
					<SdoRequest>
						<Timeout>mbxReqTimeout</Timeout>
						<Index>#x1018</Index>
						<SubIndex>1</SubIndex>
						<InitiateUpload CompleteAccess="#x0" DataSetSize="#x0" SizeIndicator="#x0" TransferType="#x0"></InitiateUpload>
						<MbxHeaderLen>#x0a</MbxHeaderLen>
						<MbxHeaderCounter>mbxCounter</MbxHeaderCounter>
					</SdoRequest>
				</SendCoECmd>
				<RaiseErrorOnFailure Id="1">MbxWrite | Failed to write to mailbox</RaiseErrorOnFailure>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<Return Id="2"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="SendSoECmd">
				<Description Id="3" Level="Verbose" Param0="mbxCounter">MbxWrite | Mbx Hdr(Length 4, Type 0x05, Cnt {0}, SoE( RRQ(S-0-0030, 'v'))</Description>
				<SendSoECmdRequest>
					<Timeout>mbxReqTimeout</Timeout>
					<Opcode>readReq</Opcode>
					<InComplete>0</InComplete>
					<Error>0</Error>
					<DriveNo>0</DriveNo>
					<ElementFlags>
						<Value>1</Value>
					</ElementFlags>
					<IDN>30</IDN>
					<MbxHeaderCounter>mbxCounter</MbxHeaderCounter>
				</SendSoECmdRequest>
				<RaiseErrorOnFailure Id="4">MbxWrite | Failed to write to mailbox</RaiseErrorOnFailure>
			</TestStep>
		</TestFunction>
		<TestFunction Name="RequestMbxRepeat" FunctionId="12"><?MAX_OUTPUT_ID 6?>
			<LocalVariables>
				<Name>RequestMbxRepeat.ActivateSM1</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>RequestMbxRepeat.PdiCtrlSM1Exp</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>RequestMbxRepeat.PdiCtrlSM1Read</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<TestStep Name="SetExpectedMbxCntr">
				<SetVariable Target="mbxCounterRcvExp">mbxCounterRcv</SetVariable>
			</TestStep>
			<TestStep Name="ReadActivateSM1">
				<ReadEscData Target="RequestMbxRepeat.ActivateSM1">
					<Address>#x80e</Address>
				</ReadEscData>
				<RaiseErrorOnFailure Id="0">ReqMbxRepeat | ReadEscData address = 0x80e failed =&gt; Could not read SM1 Activation</RaiseErrorOnFailure>
			</TestStep>
			<TestStep Name="CheckStartValue">
				<Compare>
					<Equal>
						<Value1>RequestMbxRepeat.ActivateSM1</Value1>
						<Value2>#x01</Value2>
						<GotoStep>ToggleTo1</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ToggleTo0">
				<SetVariable Target="RequestMbxRepeat.ActivateSM1">1</SetVariable>
				<WriteLine Id="1" Level="Verbose">ReqMbxRepeat | Repeat Request Bit (0x80e:1) = 1 =&gt; ToggleMbxRepeat Repeat Request Bit (0x80e:1) = 0</WriteLine>
			</TestStep>
			<TestStep Name="SetExpPdiCtrlValueTo0">
				<SetVariable Target="RequestMbxRepeat.PdiCtrlSM1Exp">0</SetVariable>
				<Compare>
					<Equal>
						<Value1>1</Value1>
						<Value2>1</Value2>
						<GotoStep>WriteActivateSm1</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ToggleTo1">
				<SetVariable Target="RequestMbxRepeat.ActivateSM1">3</SetVariable>
				<WriteLine Id="2" Level="Verbose">ReqMbxRepeat | Repeat Request Bit (0x80e:1) = 0 =&gt; ToggleMbxRepeat Repeat Request Bit (0x80e:1) = 1</WriteLine>
			</TestStep>
			<TestStep Name="SetExpPdiCtrlValueTo1">
				<SetVariable Target="RequestMbxRepeat.PdiCtrlSM1Exp">2</SetVariable>
			</TestStep>
			<TestStep Name="WriteActivateSm1">
				<WriteEscData Source="RequestMbxRepeat.ActivateSM1">
					<Address>#x80e</Address>
				</WriteEscData>
			</TestStep>
			<TestStep From="0" To="1000" Delay="1" Name="ReadPdiCtrSm1">
				<ReadEscData Target="RequestMbxRepeat.PdiCtrlSM1Read">
					<Address>#x80f</Address>
				</ReadEscData>
				<RaiseErrorOnFailure Id="3">ReqMbxRepeat | ReadEscData address = 0x80f failed =&gt; Could not read SM1 PDI Control</RaiseErrorOnFailure>
				<Compare>
					<NotEqual>
						<Value1>RequestMbxRepeat.PdiCtrlSM1Read</Value1>
						<Value2>RequestMbxRepeat.PdiCtrlSM1Exp</Value2>
						<WriteLine Id="4" Param0="RequestMbxRepeat.PdiCtrlSM1Read" Param1="RequestMbxRepeat.PdiCtrlSM1Exp" Level="Verbose">ReqMbxRepeat | Pdi Control Repeat Ack (0x80f:1) = {0:d} Expected = {1:d} =&gt; ReadEscData addess = 0x080f</WriteLine>
					</NotEqual>
				</Compare>
				<Compare>
					<Equal>
						<Value1>RequestMbxRepeat.PdiCtrlSM1Read</Value1>
						<Value2>RequestMbxRepeat.PdiCtrlSM1Exp</Value2>
						<Return Id="5"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="ReturnError">
				<RaiseErrorOnSuccess Id="6" Param0="RequestMbxRepeat.PdiCtrlSM1Read" Param1="RequestMbxRepeat.PdiCtrlSM1Exp">ReqMbxRepeat | Pdi Control Repeat Ack (0x80f:1) = {0:d} Expected = {1:d} =&gt; Request Mailbox repeat failed</RaiseErrorOnSuccess>
			</TestStep>
		</TestFunction>
		<TestFunction Name="SetMbxTimeouts" FunctionId="13"><?MAX_OUTPUT_ID 1?>
			<TestStep>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info</Value1>
						<Value2>false</Value2>
						<Return Id="0" Param0="DeviceDescr.Info">Device:Info {0}. The default timeouts will be used</Return>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info.Mailbox</Value1>
						<Value2>false</Value2>
						<Return Id="1" Param0="DeviceDescr.Info.Mailbox">Device:Info:Mailbox {0}. The default timeouts will be used</Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="mbxResTimeout">DeviceDescr.Info.Mailbox.ResponseTimeout</SetVariable>
			</TestStep>
			<TestStep>
				<SetVariable Target="mbxReqTimeout">DeviceDescr.Info.Mailbox.RequestTimeout</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="SetStateMachTimeouts" FunctionId="14"><?MAX_OUTPUT_ID 1?>
			<TestStep>
				<SetVariable Target="preOPTimeout">3000</SetVariable>
			</TestStep>
			<TestStep>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info</Value1>
						<Value2>false</Value2>
						<Return Id="0"></Return>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>DeviceDescr.Info.StateMachine.Timeout</Value1>
						<Value2>false</Value2>
						<Return Id="1"></Return>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep>
				<SetVariable Target="preOPTimeout">DeviceDescr.Info.StateMachine.Timeout.PreopTimeout</SetVariable>
			</TestStep>
		</TestFunction>
		<TestFunction Name="SoeToString" FunctionId="15"><?MAX_OUTPUT_ID 0?>
			<Parameter>
				<Name>SoeToString.ServiceData</Name>
				<Type>ArrayOfBytes</Type>
			</Parameter>
			<LocalVariables>
				<Name>SoeToString.Opcode</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Incomplete</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Error</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.DriveNo</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.DataState</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Name</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Attribute</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Unit</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Min</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Max</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Value</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Default</Name>
				<Type>Byte</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Idn0</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Idn1</Name>
				<Type>UInt16</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Idn2</Name>
				<Type>Bool</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.Data</Name>
				<Type>ArrayOfBytes</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.FragmentsLeft</Name>
				<Type>Int32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.ServiceDataLength</Name>
				<Type>UInt32</Type>
			</LocalVariables>
			<LocalVariables>
				<Name>SoeToString.ServiceString</Name>
				<Type>String</Type>
			</LocalVariables>
			<OutParameter>
				<Name>SoeToString.ReturnValue</Name>
				<Type>String</Type>
			</OutParameter>
			<TestStep Name="CheckLength">
				<SizeOf UInt32Var="SoeToString.ServiceDataLength">SoeToString.ServiceData</SizeOf>
				<Compare>
					<Lower>
						<Value1>SoeToString.ServiceDataLength</Value1>
						<Value2>6</Value2>
						<RaiseError Id="0">SoeToString: Service data length is to short for an CoE Frame. At least 6 bytes expected</RaiseError>
					</Lower>
				</Compare>
			</TestStep>
			<TestStep Name="GetSoeOpcode">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Opcode">
					<Offset>0</Offset>
					<Length>3</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeIncomplete">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Incomplete">
					<Offset>3</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeError">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Error">
					<Offset>4</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeDriveNo">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.DriveNo">
					<Offset>5</Offset>
					<Length>3</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeDataState">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.DataState">
					<Offset>8</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeName">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Name">
					<Offset>9</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeAttribute">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Attribute">
					<Offset>10</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeUnit">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Unit">
					<Offset>11</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeMin">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Min">
					<Offset>12</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeMax">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Max">
					<Offset>13</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeValue">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Value">
					<Offset>14</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeDefault">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Default">
					<Offset>15</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="InitData">
				<InitArray TargetArray="SoeToString.Data" Length="SoeToString.ServiceDataLength-4"></InitArray>
			</TestStep>
			<TestStep Name="GetSoeData">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Data">
					<Offset>4*8</Offset>
					<Length>(SoeToString.ServiceDataLength-4)*8</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="StringFormat_SoeHeader1">
				<SetVariable Target="SoeToString.ServiceString" Param0="SoeToString.Opcode" Param1="SoeToString.Incomplete" Param2="SoeToString.Error" Param3="SoeToString.DriveNo" Param4="SoeToString.DataState">SoE(Opcode 0x{0:X2}, Incomplete {1}, Error {2}, DriveNo {3}, DataState {4}, </SetVariable>
			</TestStep>
			<TestStep Name="StringFormat_SoeHeader2">
				<SetVariable Target="SoeToString.ServiceString" Param0="SoeToString.ServiceString" Param1="SoeToString.Name" Param2="SoeToString.Attribute" Param3="SoeToString.Unit" Param4="SoeToString.Min">{0}Name {1}, Attribute {2}, Unit {3}, Min {4}, </SetVariable>
			</TestStep>
			<TestStep Name="StringFormat_SoeHeader3">
				<SetVariable Target="SoeToString.ServiceString" Param0="SoeToString.ServiceString" Param1="SoeToString.Max" Param2="SoeToString.Value" Param3="SoeToString.Default">{0}Max {1}, Value {2}, Default {3}, </SetVariable>
			</TestStep>
			<TestStep Name="SwitchIncomplete">
				<Compare>
					<Equal>
						<Value1>SoeToString.Incomplete</Value1>
						<Value2>1</Value2>
						<GotoStep>GetSoeFragmentsLeft</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetSoeIdn0">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Idn0">
					<Offset>16</Offset>
					<Length>11</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeIdn1">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Idn1">
					<Offset>27</Offset>
					<Length>3</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="GetSoeIdn2">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.Idn2">
					<Offset>30</Offset>
					<Length>1</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="StringFormat_SoeIdnString">
				<Compare>
					<Equal>
						<Value1>SoeToString.Idn2</Value1>
						<Value2>true</Value2>
						<SetVariable Target="SoeToString.ServiceString" Param0="SoeToString.ServiceString" Param1="SoeToString.Idn1" Param2="SoeToString.Idn0">{0}IDN P-{1:d1}-{2:d4}, </SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>SoeToString.Idn2</Value1>
						<Value2>false</Value2>
						<SetVariable Target="SoeToString.ServiceString" Param0="SoeToString.ServiceString" Param1="SoeToString.Idn1" Param2="SoeToString.Idn0">{0}IDN S-{1:d1}-{2:d4}, </SetVariable>
					</Equal>
				</Compare>
				<Compare>
					<Equal>
						<Value1>0</Value1>
						<Value2>0</Value2>
						<GotoStep>StringFormat</GotoStep>
					</Equal>
				</Compare>
			</TestStep>
			<TestStep Name="GetSoeFragmentsLeft">
				<GetBits Source="SoeToString.ServiceData" Target="SoeToString.FragmentsLeft">
					<Offset>16</Offset>
					<Length>16</Length>
				</GetBits>
			</TestStep>
			<TestStep Name="StringFormat_SoeFragmentsLeft">
				<SetVariable Target="SoeToString.ServiceString" Param0="SoeToString.ServiceString" Param1="SoeToString.FragmentsLeft">{0}FragmentsLeft {1}, </SetVariable>
			</TestStep>
			<TestStep Name="StringFormat">
				<SetVariable Target="SoeToString.ReturnValue" Param0="SoeToString.ServiceString" Param1="SoeToString.Data">{0}Data {1})</SetVariable>
			</TestStep>
		</TestFunction>
	</TestFunctions>
	<TestGroups>
		<TestGroup Name="Error Reply Service Data (CoE)" GroupId="1">
			<Comment>Checks the behaviour in case of a mailbox protocol error.</Comment>
			<TestCase Name="MBXERR_UNSUPPORTEDPROTOCOL1" CaseId="1"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Invalid write to the devices mailbox (unknown type in the mailbox header)
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_UNSUPPORTEDPROTOCOL</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="Reset">
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckEscType">
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckCoE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitMbx">
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SendInvalidMbxCmd">
					<Description Id="4" Level="Verbose">SendMbxCmd(CoE: Type=9)</Description>
					<SendToMailbox UseBootStrap="False">
						<Timeout>1000</Timeout>
						<Type>unknown</Type>
						<Data>00</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="5">Failed to send CoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ReadMbx">
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>2</Value2>
							<RaiseError Id="6" Param0="abortCode" Param1="errMsg">Expected MBXERR = MBXERR_UNSUPPORTEDPROTOCOL (0x2). Actual response = {1}  (0x{0:x})</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="7" Param0="errMsg" Param1="abortCode" Level="Success">Device returns expected mailbox error: {0}  (0x{1:X})</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="MBXERR_UNSUPPORTEDPROTOCOL2" CaseId="2"><?MAX_OUTPUT_ID 8?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Invalid write to the devices mailbox (SoE type in the mailbox header)
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_UNSUPPORTEDPROTOCOL</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="Reset">
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckEscType">
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckCoE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>true</Value2>
							<SkipCase Id="3">Device supports SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitMbx">
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SendInvalidMbxCmd">
					<Description Id="5" Level="Verbose">SendMbxCmd(SoE:)</Description>
					<SendToMailbox UseBootStrap="False">
						<Timeout>100</Timeout>
						<Type>SoE</Type>
						<Length>10</Length>
						<Data>00</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="6">Failed to send CoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ReadMbx">
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>2</Value2>
							<RaiseError Id="7" Param0="abortCode" Param1="errMsg">Expected MBXERR = MBXERR_UNSUPPORTEDPROTOCOL (0x2). Actual response = {1}  (0x{0:x})</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="8" Param0="errMsg" Level="Success" Param1="abortCode">Device returns expected mailbox error: {0}  (0x{1:X})</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="MBXERR_INVALIDSIZE" CaseId="3"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Writes an invalid SDO request to the devices mailbox (wrong value in the mailbox header Length field)
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_INVALIDSIZE or MBXERR_SIZETOSHORT</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
						<Reference Specification="ETG1000.6" Chapter="5.6 CoE coding"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="Reset">
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckEscType">
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckCoE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitMbx">
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SendInvalidMbxCmd">
					<Description Id="4" Level="Verbose">SendMbxCmd(CoE: Sdo Req - invalid length)</Description>
					<SendToMailbox UseBootStrap="False">
						<Timeout>100</Timeout>
						<Type>CoE</Type>
						<Length>7</Length>
						<Data>00204000100000000000</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="5">Failed to send CoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ReadMbx">
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<Compare>
						<Equal>
							<Value1>abortCode</Value1>
							<Value2>6</Value2>
							<GotoStep>End</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>8</Value2>
							<RaiseError Id="6" Param0="abortCode">Expected response = 8. Actual response={0:d}</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="End">
					<WriteLine Id="7" Param0="errMsg" Param1="abortCode" Level="Success">Device returns expected mailbox error: {0}  (0x{1:X})</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="MBXERR_INVALIDHEADER" CaseId="4"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Invalid write to the devices mailbox (The mailbox protocol header of the mailbox protocol is wrong (without the 6 octet mailbox header))
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_INVALIDHEADER</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="Reset">
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckEscType">
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckCoE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitMbx">
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SendInvalidMbxCmd">
					<Description Id="4" Level="Verbose">SendMbxCmd(CoE: )</Description>
					<SendToMailbox UseBootStrap="False">
						<Timeout>100</Timeout>
						<Type>CoE</Type>
						<Length>16</Length>
						<Data>000000</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="5">Failed to send CoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ReadMbx">
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>5</Value2>
							<RaiseError Id="6" Param0="abortCode">Expected response = 5. Actual response={0:d}</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="7" Level="Success" Param0="errMsg" Param1="abortCode">Device returns expected mailbox error: {0}  (0x{1:X})</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="MBXERR_SERVICENOTSUPPORTED" CaseId="5"><?MAX_OUTPUT_ID 8?>
				<Description>
					<Purpose>Test the correct mailbox error is returned when an unsupported service in the mailbox protocol is requested</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
- Device does not support SDO Info Service (ESI element Mailbox:CoE@SdoInfo = false)
-Device is in PreOP</PreCondition>
					<Action>-Request SDO Info service "Get Object Description Request" to 0x1018
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_SERVICENOTSUPPORTED 0x04 (the service in the Mailbox protocol is not supported)</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep Name="Reset">
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckEscType">
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep Name="CheckCoe">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE.SdoInfo</Value1>
							<Value2>true</Value2>
							<SkipCase Id="3">Device supports SDO Info</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="InitMbx">
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="SendInvalidMbxCmd">
					<Description Id="5" Level="Verbose">SendMbxCmd(Mbx(CoE: CoE SDO Info: OpCode: 'Obj Req' Index=0x1018)</Description>
					<SendToMailbox UseBootStrap="False">
						<Timeout>100</Timeout>
						<Type>CoE</Type>
						<Length>8</Length>
						<Data>0080030000001810</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="6">Failed to send CoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="ReadMbx">
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>4</Value2>
							<RaiseError Id="7" Param0="abortCode" Param1="errMsg">Expected MBXERR = MBXERR_SERVICENOTSUPPORTED (0x04). Actual response = {1}  (0x{0:x})</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="WriteSuccess">
					<WriteLine Id="8" Param0="errMsg" Level="Success" Param1="abortCode">Device returns expected mailbox error: {0}  (0x{1:X})</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="Mailbox Transfer(CoE)" GroupId="2">
			<Comment>Checks the SyncManager toggle mechanism, if a mailbox DLPDU (DL-protocol-data-unit) is lost.

Definition of the mailbox service counter: 0 reserved, 1 is start value, next value after 7 is 1.
The Slave shall increment the Cnt value for each new mailbox service, the Master shall check this for detection of lost mailbox services. The Master shall change (should increment) the Cnt value. The slave shall check this for detection of a write repeat service. The Slave shall not check the sequence of the Cnt value. The master and the slave Cnt values are independent.</Comment>
			<TestCase Name="Incremented Master Mailbox Counter" CaseId="1"><?MAX_OUTPUT_ID 4?>
				<Description>
					<Purpose>-A mailbox transfer with normal incremented counter values (for the write and read service) in the mailbox header shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Executes 16 valid mailbox transfers with an incremented master counter and checks the slave counter of the mailbox header.</Action>
					<PostCondition>-Counter of the mailbox services (0 reserved, 1 is start value, next value after 7 is 1.
-The Slave shall increment the Cnt value for each new mailbox service, the Master shall check this for detection of lost mailbox services.
-The Master shall change (should increment) the Cnt value.
-The slave shall check this for detection of a write repeat service.
-The Slave shall not check the sequence of the Cnt value. The master and the slave Cnt values are independent
</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep From="0" To="16">
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>3</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="4" Level="Success">Test mailbox counter succeeds</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Invalid Master Mailbox Counter" CaseId="2"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>-The slaves error behaviour of a non incremented master counter of a complete transfer shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Executes two mailbox transfers with an non incremented master counter (3).</Action>
					<PostCondition>-The second transfer shall fail. (Working counter of the read request = 0)</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<SetVariable Target="mbxCounter">mbxCounter</SetVariable>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Failed to send request to mailbox</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="4" Param0="errorMessage">Failed to read response from mailbox. {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="5">Failed to send request to mailbox</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnSuccess Id="6">Reading of mailbox should have failed, because mailbox counter has not changed.</RaiseErrorOnSuccess>
					<WriteLine Id="7" Level="Success">No response in input mailbox, because repeat request was not sent</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Mailbox Write Service Repeat " CaseId="3"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>-The slaves behaviour in case of a mailbox write repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master sends a mailbox write service to the slave and ignores the response frame.
-Master sends the mailbox write service (with the same counter) again.
-Master polls the mailbox read service. </Action>
					<PostCondition>-The slave shall ignore the second write service</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>3</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Failed to send request to mailbox 1</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="5">Failed to send request to mailbox 2</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="6" Param0="errorMessage">Failed to read response from mailbox. {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="7" Level="Success">Write reapeat succeeds</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Mailbox Read Service Repeat 1" CaseId="4"><?MAX_OUTPUT_ID 6?>
				<Description>
					<Purpose>-The slaves behaviour in case of a mailbox read service repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master sends a mailbox write service to the slave.
-Master polls the mailbox read service and ignores the response frame with working counter = 1 (Lost frame from slave to master).
-Master toggles repeat request bit of the corresponding Sync Manager.
-Master polls the repeat acknowlege bit of the corresponding Sync Manager.
-Master polls the mailbox read service again. </Action>
					<PostCondition>1.The slave shall detect the mailbox read request by checking the Sync Manager activate.
2.The slave shall put the stored sent buffer in the send mailbox again.
3.The slave shall toggle the Sync Manager read toggle</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="6.7.1 Sync manager overview"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>3</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Mailbox Repeat Request 1 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="5" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="6" Level="Success">Read repeat succeeds</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Mailbox Read Service Repeat 2" CaseId="5"><?MAX_OUTPUT_ID 8?>
				<Description>
					<Purpose>-The slaves behaviour in case of a mailbox read service repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master sends a mailbox write service (counter = x) to the slave.
-Master polls the mailbox read service and ignores the response frame with working counter = 1 (Lost frame from slave to master).
-Master sends a new mailbox write service (counter = x+1) to the slave.
-Master waits for the mailbox response timeout, to ensure that the DuTs mailbox out buffer has been filled again.
-Master toggles repeat request bit of the corresponding Sync Manager.
-Master polls the repeat acknowlege bit of the corresponding Sync Manager.
-Master polls the mailbox read service again. </Action>
					<PostCondition>1.The slave shall detect the mailbox read request by checking the Sync Manager activate.
2.The slave shall put the stored sent buffer in the send mailbox again.
3.The slave shall toggle the Sync Manager read toggle</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="6.7.1 Sync manager overview"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>3</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Failed to send request to mailbox 1</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="WaitMbxRespTimeout" Delay="mbxResTimeout">
					<WriteLine Id="5" Level="Output" Param0="mbxResTimeout">Wait for mailbox response timeout before requesting the mailbox repeat. MbxResTimeout: {0}ms</WriteLine>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="6">Mailbox Repeat Request failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="7">Failed to read response from mailbox</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="8" Level="Success">Read repeat succeeds</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Multiple Mailbox Read Service Repeat" CaseId="6"><?MAX_OUTPUT_ID 11?>
				<Description>
					<Purpose>-The slaves behaviour in case of a multiple  mailbox read service repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox CoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master initializes the repeat sequence three times</Action>
					<PostCondition>For each sequence:
		1.The slave shall detect the mailbox read request by checking the Sync Manager activate.
		2.The slave shall put the stored sent buffer in the send mailbox again.
		3.The slave shall toggle the Sync Manager read toggle</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="6.7.1 Sync manager overview"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support CoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep From="0" To="13">
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>3</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Mailbox Repeat Request  1 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="5" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep From="0" To="7">
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>3</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="6">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="7">Mailbox Repeat Request 2 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="8" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="9">Mailbox Repeat Request 3 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>3</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="10" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="11" Level="Success">Read repeat succeeds</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="Error Reply Service Data(SoE)" GroupId="3">
			<Comment>Checks the behaviour in case of a mailbox protocol error.</Comment>
			<TestCase Name="MBXERR_UNSUPPORTEDPROTOCOL1" CaseId="1"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Invalid write to the devices mailbox (unknown type in the mailbox header)
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_UNSUPPORTEDPROTOCOL</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<SendToMailbox UseBootStrap="False">
						<Timeout>1000</Timeout>
						<Type>unknown</Type>
						<Data>00</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="4">Failed to send SoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<WriteLine Id="5" Param0="errMsg" Param1="abortCode" Level="Verbose">Received Mailbox Error: {0} (0x{1:X})</WriteLine>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>2</Value2>
							<RaiseError Id="6" Param0="abortCode">Expected response = 2. Actual response={0:d}</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<WriteLine Id="7" Level="Success">Expected Mailbox Error received</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="MBXERR_UNSUPPORTEDPROTOCOL2" CaseId="2"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Invalid write to the devices mailbox (CoE type in the mailbox header)
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_UNSUPPORTEDPROTOCOL</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<SendToMailbox UseBootStrap="False">
						<Timeout>100</Timeout>
						<Type>CoE</Type>
						<Length>10</Length>
						<Data>00</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="4">Failed to send CoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<WriteLine Id="5" Param0="errMsg" Param1="abortCode">received Mailbox Error: {0} (0x{1:X})</WriteLine>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>2</Value2>
							<RaiseError Id="6" Param0="abortCode">Expected response = 2. Actual response={0:d}</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<WriteLine Id="7" Level="Success">Expected Mailbox Error received</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="MBXERR_INVALIDSIZE" CaseId="3"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Writes an invalid request to the devices mailbox (wrong value in the mailbox header Length field)
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_INVALIDSIZE or MBXERR_SIZETOSHORT</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<SendToMailbox UseBootStrap="False">
						<Timeout>mbxReqTimeout</Timeout>
						<Type>SoE</Type>
						<Length>3</Length>
						<Data>01401100</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="4">Failed to send SoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<Compare>
						<Equal>
							<Value1>abortCode</Value1>
							<Value2>6</Value2>
							<GotoStep>End</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>8</Value2>
							<RaiseError Id="5" Param0="abortCode">Expected response = 8. Actual response={0:d}</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="End">
					<WriteLine Id="6" Param0="errMsg" Param1="abortCode" Level="Verbose">Received Mailbox Error: {0} (0x{1:x})</WriteLine>
					<WriteLine Id="7" Level="Success">Expected Mailbox Error received</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="MBXERR_INVALIDHEADER" CaseId="4"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>The mailbox error protocol shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Invalid write to the devices mailbox (The mailbox protocol header of the mailbox protocol is wrong (without the 6 octet mailbox header))
-Read the mailbox</Action>
					<PostCondition>-Device shall reply MBXERR_INVALIDHEADER</PostCondition>
					<References>
						<Reference Specification="ETG1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Initialization failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<SendToMailbox UseBootStrap="False">
						<Timeout>mbxReqTimeout</Timeout>
						<Type>SoE</Type>
						<Length>4</Length>
						<Data>00000000</Data>
					</SendToMailbox>
					<RaiseErrorOnFailure Id="4">Failed to send SoE Cmd</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<ReadFromMailbox UseBootStrap="False">
						<Timeout>mbxResTimeout</Timeout>
						<Error>
							<Code>abortCode</Code>
							<Message>errMsg</Message>
						</Error>
					</ReadFromMailbox>
					<WriteLine Id="5" Param0="errMsg" Param1="abortCode" Level="Verbose">received Mailbox Error: {0} (0x{1:x})</WriteLine>
					<Compare>
						<NotEqual>
							<Value1>abortCode</Value1>
							<Value2>5</Value2>
							<RaiseError Id="6" Param0="abortCode">Expected response = 5. Actual response={0:d}</RaiseError>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<WriteLine Id="7" Level="Success">Expected Mailbox Error received</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="Mailbox Transfer(SoE)" GroupId="4">
			<Comment>Checks the SyncManager toggle mechanism, if a mailbox DLPDU (DL-protocol-data-unit) is lost.

Definition of the mailbox service counter: 0 reserved, 1 is start value, next value after 7 is 1.
The Slave shall increment the Cnt value for each new mailbox service, the Master shall check this for detection of lost mailbox services. The Master shall change (should increment) the Cnt value. The slave shall check this for detection of a write repeat service. The Slave shall not check the sequence of the Cnt value. The master and the slave Cnt values are independent.</Comment>
			<TestCase Name="Incremented Master Mailbox Counter" CaseId="1"><?MAX_OUTPUT_ID 4?>
				<Description>
					<Purpose>-A mailbox transfer with normal incremented counter values (for the write and read service) in the mailbox header shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Executes 16 valid mailbox transfers with an incremented master counter and checks the slave counter of the mailbox header.</Action>
					<PostCondition>-Counter of the mailbox services (0 reserved, 1 is start value, next value after 7 is 1.
-The Slave shall increment the Cnt value for each new mailbox service, the Master shall check this for detection of lost mailbox services.
-The Master shall change (should increment) the Cnt value.
-The slave shall check this for detection of a write repeat service.
-The Slave shall not check the sequence of the Cnt value. The master and the slave Cnt values are independent
</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep From="0" To="16">
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>5</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="4" Level="Success">Mailbox comunication with a valid send counter succeeded</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Invalid Master Mailbox Counter" CaseId="2"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>-The slaves error behaviour of a non incremented master counter of a complete transfer shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Executes two mailbox transfers with an non incremented master counter (3).</Action>
					<PostCondition>-The second transfer shall fail. (Working counter of the read request = 0)</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<SetVariable Target="mbxCounter">mbxCounter</SetVariable>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="3">Failed to send request to mailbox</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="4" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="5">Failed to send request to mailbox</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnSuccess Id="6">Reading of mailbox should have failed, because mailbox counter has not changed.</RaiseErrorOnSuccess>
					<WriteLine Id="7" Level="Success">No response in input mailbox, because repeat request was not sent</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Mailbox Write Service Repeat " CaseId="3"><?MAX_OUTPUT_ID 7?>
				<Description>
					<Purpose>-The slaves behaviour in case of a mailbox write repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master sends a mailbox write service to the slave and ignores the response frame.
-Master sends the mailbox write service (with the same counter) again.
-Master polls the mailbox read service. </Action>
					<PostCondition>-The slave shall ignore the second write service</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>5</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Failed to send request to mailbox 1</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="5">Failed to send request to mailbox 2</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="6" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="7" Level="Success">Mailbox write repeat succeeded</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Mailbox Read Service Repeat 1" CaseId="4"><?MAX_OUTPUT_ID 6?>
				<Description>
					<Purpose>-The slaves behaviour in case of a mailbox read service repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master sends a mailbox write service to the slave.
-Master polls the mailbox read service and ignores the response frame with working counter = 1 (Lost frame from slave to master).
-Master toggles repeat request bit of the corresponding Sync Manager.
-Master polls the repeat acknowlege bit of the corresponding Sync Manager.
-Master polls the mailbox read service again. </Action>
					<PostCondition>1.The slave shall detect the mailbox read request by checking the Sync Manager activate.
2.The slave shall put the stored sent buffer in the send mailbox again.
3.The slave shall toggle the Sync Manager read toggle</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="6.7.1 Sync manager overview"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>5</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Mailbox Repeat Request 1 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="5" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="6" Level="Success">Mailbox read repeat succeeded</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Mailbox Read Service Repeat 2" CaseId="5"><?MAX_OUTPUT_ID 8?>
				<Description>
					<Purpose>-The slaves behaviour in case of a mailbox read service repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master sends a mailbox write service (counter = x) to the slave.
-Master polls the mailbox read service and ignores the response frame with working counter = 1 (Lost frame from slave to master).
-Master sends a new mailbox write service (counter = x+1) to the slave.
-Master waits for the mailbox response timeout, to ensure that the DuTs mailbox out buffer has been filled again.
-Master toggles repeat request bit of the corresponding Sync Manager.
-Master polls the repeat acknowlege bit of the corresponding Sync Manager.
-Master polls the mailbox read service again. </Action>
					<PostCondition>1.The slave shall detect the mailbox read request by checking the Sync Manager activate.
2.The slave shall put the stored sent buffer in the send mailbox again.
3.The slave shall toggle the Sync Manager read toggle</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="6.7.1 Sync manager overview"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>5</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxWrite"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Failed to send request to mailbox 1</RaiseErrorOnFailure>
				</TestStep>
				<TestStep Name="WaitMbxRespTimeout" Delay="mbxResTimeout">
					<WriteLine Id="5" Level="Output" Param0="mbxResTimeout">Wait for mailbox response timeout before requesting the mailbox repeat. MbxResTimeout: {0}ms</WriteLine>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="6">Mailbox Repeat Request failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="7" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="8" Level="Success">Mailbox read repeat succeeded</WriteLine>
				</TestStep>
			</TestCase>
			<TestCase Name="Multiple Mailbox Read Service Repeat" CaseId="6"><?MAX_OUTPUT_ID 11?>
				<Description>
					<Purpose>-The slaves behaviour in case of a multiple  mailbox read service repeat shall be tested.</Purpose>
					<PreCondition>-Device supports mailbox SoE protocol
-Device is in PreOP</PreCondition>
					<Action>-Master initializes the repeat sequence three times</Action>
					<PostCondition>For each sequence:
		1.The slave shall detect the mailbox read request by checking the Sync Manager activate.
		2.The slave shall put the stored sent buffer in the send mailbox again.
		3.The slave shall toggle the Sync Manager read toggle</PostCondition>
					<References>
						<Reference Specification="ETG 1000.4" Chapter="5.6 EtherCAT mailbox structure"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="6.7.1 Sync manager overview"></Reference>
						<Reference Specification="ETG 1000.4" Chapter="7.2.1 Mailbox transfer"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<LocalVariables>
					<LocalVariable>
						<Name>errorMessage</Name>
						<Type>String</Type>
					</LocalVariable>
				</LocalVariables>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="0">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="CheckESCRevTypeBuild"></CallTestFunction>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<SkipCase Id="1">Device does not support mailbox communication</SkipCase>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<SkipCase Id="2">Device does not support SoE</SkipCase>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="InitMbxLayer"></CallTestFunction>
				</TestStep>
				<TestStep From="0" To="13">
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>5</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="3">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="4">Mailbox Repeat Request  1 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="5" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep From="0" To="7">
					<CallTestFunction Name="CheckMbxCounter">
						<Parameter>5</Parameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="6">CheckMbxCounter failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="7">Mailbox Repeat Request 2 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="8" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="RequestMbxRepeat"></CallTestFunction>
					<RaiseErrorOnFailure Id="9">Mailbox Repeat Request 3 failed</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<CallTestFunction Name="MbxRead">
						<Parameter>5</Parameter>
						<OutParameter>errorMessage</OutParameter>
					</CallTestFunction>
					<RaiseErrorOnFailure Id="10" Param0="errorMessage">Failed to read response from mailbox: {0}</RaiseErrorOnFailure>
				</TestStep>
				<TestStep>
					<WriteLine Id="11" Level="Success">Mailbox read repeat succeeded</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
		<TestGroup Name="General DLL tests" GroupId="5">
			<Comment>Checks general settings on the DL layer (e.g. IP Core Vendor ID usage, or device emulation settings)</Comment>
			<TestCase Name="Check Device Type (Complex or Simple Type)" CaseId="1"><?MAX_OUTPUT_ID 25?>
				
				<Description>
					<PreCondition>Read Device Emulation Bit from Register 0x0110 and check if at least one Mailbox Protocol is supported according to ESI file</PreCondition>
					<Action>Check if Device Emulation is off when at least one Mbx protocol is supported</Action>
					<PostCondition>Error if Device Emulation deactivated and at least one Mailbox Protocol supported</PostCondition>
					<References>
						<Reference Specification="ETG.1000, part 5" Chapter=""></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<Description Id="13">CheckIfSimpleDevice</Description>
					<CallTestFunction Name="IsSimpleDevice">
						<OutParameter>devEm</OutParameter>
					</CallTestFunction>
				</TestStep>
				<TestStep Name="CECKGENERALMBXSUPPORT">
					<Description Id="14" Level="Verbose">Check if at least one Mailbox Protocol is supported according to ESI file</Description>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>true</Value2>
							<GotoStep>VOE</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox</Value1>
							<Value2>false</Value2>
							<GotoStep>NOMBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="VOE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.VoE</Value1>
							<Value2>false</Value2>
							<GotoStep>COE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.VoE</Value1>
							<Value2>true</Value2>
							<WriteLine Id="15" Level="Verbose">VoE mailbox support</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.VoE</Value1>
							<Value2>true</Value2>
							<GotoStep>MBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="COE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>false</Value2>
							<GotoStep>EOE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<WriteLine Id="16" Level="Verbose">CoE mailbox support</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.CoE</Value1>
							<Value2>true</Value2>
							<GotoStep>MBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="EOE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.EoE</Value1>
							<Value2>false</Value2>
							<GotoStep>FOE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.EoE</Value1>
							<Value2>true</Value2>
							<WriteLine Id="17" Level="Verbose">EoE mailbox support</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.EoE</Value1>
							<Value2>TRUE</Value2>
							<GotoStep>MBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="FOE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.FoE</Value1>
							<Value2>false</Value2>
							<GotoStep>AOE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.FoE</Value1>
							<Value2>true</Value2>
							<WriteLine Id="18" Level="Verbose">FoE mailbox support</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.FoE</Value1>
							<Value2>true</Value2>
							<GotoStep>MBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="AOE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.AoE</Value1>
							<Value2>false</Value2>
							<GotoStep>SOE</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.AoE</Value1>
							<Value2>true</Value2>
							<WriteLine Id="19" Level="Verbose">AoE mailbox support</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.AoE</Value1>
							<Value2>true</Value2>
							<GotoStep>MBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="SOE">
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>true</Value2>
							<WriteLine Id="20" Level="Verbose">AoE mailbox support</WriteLine>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>true</Value2>
							<GotoStep>MBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>DeviceDescr.Mailbox.SoE</Value1>
							<Value2>false</Value2>
							<GotoStep>NOMBXPROTOCOLSUPPORT</GotoStep>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="NOMBXPROTOCOLSUPPORT">
					<WriteLine Id="21" Level="Verbose">No mailbox protocol is supported</WriteLine>
					<Compare>
						<Equal>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<ReturnSuccess Id="22" Param0="devEm">No Mailbox Protocol supported || INFO: Device Emulation = {0}</ReturnSuccess>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep Name="MBXPROTOCOLSUPPORT">
					<WriteLine Id="23" Level="Verbose">At least one Mailbox protocol is supported</WriteLine>
					<Compare>
						<Equal>
							<Value1>devEm</Value1>
							<Value2>false</Value2>
							<ReturnSuccess Id="24" Param0="devEm">SUCCESSFUL | Device Emulation Bit (register 0x0141:0) is set correctly || INFO: MailboxProtocolSupported = true; Device Emulation = {0} </ReturnSuccess>
						</Equal>
					</Compare>
					<Compare>
						<Equal>
							<Value1>devEm</Value1>
							<Value2>true</Value2>
							<RaiseError Id="25">Device Emulation is active even thougth device supports at least one Mailbox Protocol </RaiseError>
						</Equal>
					</Compare>
				</TestStep>
			</TestCase>
			<TestCase Name="Secondary Vendor ID in IP Core" CaseId="2"><?MAX_OUTPUT_ID 15?>
				
				<Description>
					<PreCondition>Check if ESC is an IP Core (registe 0x0000 = 0x04). If not, skip test. If IP Core then read Vendor ID from register 0x0E08</PreCondition>
					<Action>Check if Vendor ID is an secondary Vendor ID (highest nibble = 0xE)</Action>
					<PostCondition>Error if device has a secondary Vendor ID</PostCondition>
					<ProposalForSolution>Use own EtherCAT Vendor ID. One can apply for an EtherCAT Vendor ID at www.ethercat.org</ProposalForSolution>
					<References>
						<Reference Specification="ETG.9002 ETG Vendory ID Policy" Chapter="1.6"></Reference>
					</References>
					<Mandatory>true</Mandatory>
				</Description>
				<TestStep>
					<!--Reset device (if offline test will skipped)-->
					<Description Id="8">Reset</Description>
					<CallTestFunction Name="Reset"></CallTestFunction>
				</TestStep>
				<TestStep>
					<!--IP Core ?-->
					<Description Id="9" Level="Verbose">Check if ESC is a IP Core</Description>
					<ReadEscData Target="escType">
						<Address>#x0</Address>
					</ReadEscData>
					<Compare>
						<NotEqual>
							<Value1>escType</Value1>
							<Value2>#x4</Value2>
							<GotoStep>NOIPCORE</GotoStep>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Get Vendor ID from 0x0E08-->
					<Description Id="10" Level="Verbose">Get Vendor ID from register 0x0E08</Description>
					<ReadEscData Target="vendorIdIpCore">
						<Address>#x0E08</Address>
					</ReadEscData>
				</TestStep>
				<TestStep>
					<!--Check if Secondary Vendor ID-->
					<Description Id="11" Level="Verbose">Check if Vendor ID read from 0x0E08 is a Secondary Vendor ID</Description>
					<GetBits Target="byteVal1" Source="vendorIdIpCore">
						<Offset>28</Offset>
						<Length>4</Length>
					</GetBits>
					<Compare>
						<Equal>
							<Value1>byteVal1</Value1>
							<Value2>#xE</Value2>
							<RaiseError Id="12" Param0="byteVal1" Param1="vendorIdIpCore">Invallid Vendor ID in register 0x0E08 | The Vendor ID read (0x{1:x}) is a secondary Vendor ID. It is used for embedded EtherCAT communication modules and cannot be certified.</RaiseError>
						</Equal>
					</Compare>
				</TestStep>
				<TestStep>
					<!--Successful-->
					<WriteLine Id="13" Param0="vendorIdIpCore" Level="Success">Successful || Valid Vendor ID in ESI file (0x{0:x})</WriteLine>
					<Compare>
						<NotEqual>
							<Value1>true</Value1>
							<Value2>true</Value2>
							<Return Id="14"></Return>
						</NotEqual>
					</Compare>
				</TestStep>
				<TestStep Name="NOIPCORE">
					<!--Successful - no Ip Core-->
					<WriteLine Id="15" Param0="escType" Level="Success">SUCCESSFUL: ESC is no IP Core | INFO: ESC Type (register 0x0000) = 0x{0:x4}</WriteLine>
				</TestStep>
			</TestCase>
		</TestGroup>
	</TestGroups>
</EtherCATTest>